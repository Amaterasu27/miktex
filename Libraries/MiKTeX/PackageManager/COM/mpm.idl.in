/* mpm.idl:							-*- IDL -*-

   Copyright (C) 2006-2008 Christian Schenk

   This file is part of MiKTeX Package Manager.

   MiKTeX Package Manager is free software; you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2, or
   (at your option) any later version.
   
   MiKTeX Package Manager is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with MiKTeX Package Manager; if not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA. */

import "oaidl.idl";
import "ocidl.idl";

import "miktexidl.idl";

/* _________________________________________________________________________
   
   MD5
   _________________________________________________________________________ */

/// @brief MD5 sum.
///
/// This structure holds an MD5 hash code.
typedef [uuid(F92D6E8F-22CC-4585-8309-58440C5A0DFB)] struct MD5
{
  /// @brief 128 bits.
  BYTE bits[16];
} MD5;


/* _________________________________________________________________________
   
   PackageInfo
   _________________________________________________________________________ */

/// @brief Package information.
typedef [uuid(22A5E6E6-04B3-4540-A122-6A612210F52E)] struct PackageInfo
{
  /// @brief Name of the package.
  BSTR deploymentName;
  /// @brief User-friendly name of the package.
  BSTR displayName;
  /// @brief One-line package description.
  BSTR title;
  /// @brief Package version number.
  BSTR version;
  /// @brief Package description.
  BSTR description;
  /// @brief Name of package creator.
  BSTR creator;
  /// @brief Total size (in bytes) of all run-time files.
  DOUBLE sizeRunFiles;
  /// @brief Total size (in bytes) of all documentation files.
  DOUBLE sizeDocFiles;
  /// @brief Total size (in bytes) of all source files.
  DOUBLE sizeSourceFiles;
  /// @brief Number of run-time files.
  LONG numRunFiles;
  /// @brief Number of documentation files.
  LONG numDocFiles;
  /// @brief Number of source files.
  LONG numSourceFiles;
  /// @brief Date/time the package was created.
  DATE timePackaged;
  /// @brief Date/time the package was installed.
  DATE timeInstalled;
  /// @brief Size of the package archive file.
  LONG archiveFileSize;
  /// @brief Package digest.
  MD5 digest;
  /// @brief Install flag.
  VARIANT_BOOL isInstalled;
} PackageInfo;

/* _________________________________________________________________________
   
   IPackageInstallerCallback
   _________________________________________________________________________ */

/// @brief Package installer callback.
///
/// This interface can be implemented by clients in order to get notified
/// of certain events.
[
  object,
  uuid(4B081787-2C08-4AFD-80E1-B4B3E23324B4),
  nonextensible,
  helpstring("IPackageInstallerCallback Interface"),
  pointer_default(unique)
]
interface IPackageInstallerCallback : IUnknown
{
  /// @brief Reports progress of the package installer.
  /// @param[in] line The message to be reported.
  [
    helpstring("method ReportLine")
  ]
  HRESULT ReportLine ([in] BSTR line);

  /// @brief Reports an error.
  /// @param[in] message The error message to be reported.
  /// @return Returns VARIANT_FALSE, if the installation can continue.
  [
    helpstring("method OnRetryableError")
  ]
  HRESULT
  OnRetryableError ([in] BSTR			message,
		    [out,retval] VARIANT_BOOL * doContinue);

  /// @brief Notifies the client.
  /// @param[in] nf The notification code.
  /// @return Returns VARIANT_TRUE, if the installation can continue.
  [
    helpstring("method OnProgress")
  ]
  HRESULT
  OnProgress ([in] LONG nf, [out,retval] VARIANT_BOOL * doContinue);
};

/* _________________________________________________________________________
   
   IPackageInstaller
   _________________________________________________________________________ */

/// @brief Package installer interface.
[
  object,
  uuid(74C7EE83-4851-4766-B471-9CF29E7C2DA3),
  dual,
  nonextensible,
  helpstring("IPackageInstaller Interface"),
  pointer_default(unique)
]
interface IPackageInstaller : IDispatch
{
  /// @brief Adds a package to the installer queue.
  /// @param[in] packageName Name of the package to be installed/uninstalled.
  /// @param[in] toBeInstalled Boolean value that determines whether
  ///   the package shall be installed or uninstalled.
  [
    id(1),
    helpstring("method Add")
  ]
  HRESULT
  Add ([in] BSTR packageName, [in] VARIANT_BOOL toBeInstalled);

  /// @brief Sets the client callback interface.
  /// @param[in] callback Pointer to an interface. This interface will
  ///   be queried for IPackageInstallerCallback.
  [
    id(2),
    helpstring("method SetCallback")
  ]
  HRESULT
  SetCallback ([in] IUnknown * callback);

  /// @brief Installs/Uninstalls packages.
  [
    id(3),
    helpstring("method InstallRemove")
  ]
  HRESULT
  InstallRemove ();

  /// @brief Gets information about the last error
  /// @return Returns the error information.
  [
    id(4),
    helpstring("method GetLastError")
  ]
  HRESULT
  GetErrorInfo ([out,retval] ErrorInfo * errorInfo);

  /// @brief Updates the package database.
  [
    id(5),
    helpstring("method UpdateDb")
  ]
  HRESULT
  UpdateDb ();

  /// @brief Set the package repository.
  /// @param[in] repository The repository to be used.
  [
    id(6),
    helpstring("method SetRepository")
  ]
  HRESULT
  SetRepository ([in] BSTR repository);
};

/* _________________________________________________________________________
   
   IPackageManager
   _________________________________________________________________________ */

/// @brief Package manager interface.
[
  object,
  uuid(C6A0E0A9-532D-46DF-8969-0E0A17539FC9),
  dual,
  nonextensible,
  helpstring("IPackageManager Interface"),
  pointer_default(unique)
]
interface IPackageManager : IDispatch
{
  /// @brief Get a package installer interface.
  /// @return Returns a pointer to the package installer interface.
  [
    id(1),
    helpstring("method CreateInstaller")
  ]
  HRESULT
  CreateInstaller ([out,retval] IPackageInstaller ** installer);

  /// @brief Get information about a package.
  /// @param[in] packageName Name of the package.
  /// @return Returns the package information.
  [
    id(2),
    helpstring("method GetPackageInfo")
  ]
  HRESULT
  GetPackageInfo ([in] BSTR			packageName,
		  [out,retval] PackageInfo *	packageInfo);
};

/* _________________________________________________________________________
   
   IPackageIterator
   _________________________________________________________________________ */

/// @brief Package info iterator interface.
[
  object,
  uuid(D02EF17D-1CEF-450B-9C58-ABBB3AE286CC),
  helpstring("IPackageIterator Interface"),
  pointer_default(unique)
]
interface IPackageIterator : IUnknown
{
  /// @brief Retrieve the next package info structure.
  /// @return Returns the next structure.
  [
    helpstring("method GetNextPackageInfo")
  ]
  HRESULT
  GetNextPackageInfo ([out] PackageInfo * packageInfo,
		      [out,retval] VARIANT_BOOL * done);
};

/* _________________________________________________________________________
   
   IEnumPackageInfo
   _________________________________________________________________________ */

/// @brief Package info enumerator interface.
[
  object,
  uuid(8BD4C3EE-A863-4E5E-A77F-108D3D47ADCF),
  helpstring("IEnumPackageInfo Interface"),
  pointer_default(unique)
]
interface IEnumPackageInfo : IUnknown
{
  /// @brief Retrieve the next package info structures.
  /// @param[in] count Number of structures being requested.
  /// @param[out] packageInfo Array of size count (or larger).
  /// @param[out] fetched Number of structures actually supplied.
  [
    helpstring("method Next")
  ]
  HRESULT
  Next ([in] ULONG count, 
	[out,  size_is(count), length_is(*fetched)] PackageInfo * packageInfo,
	[out] ULONG * fetched);

  /// @brief Skip over the next specified number of structures.
  /// @param[in] count Number of structures to be skipped.
  [
    helpstring("method Skip")
  ]
  HRESULT
  Skip ([in] ULONG count);

  /// @brief Resets the enumeration sequence to the beginning.
  [
    helpstring("method Reset")
  ]
  HRESULT
  Reset ();

  /// @brief Creates another enumerator that contains the same
  ///   enumeration state as the current one.
  /// @param[out] other Address of IEnumPackageInfo pointer variable
  ///   that receives the interface pointer to the enumeration object.
  [
    helpstring("method Clone")
  ]
  HRESULT
  Clone ([out] IEnumPackageInfo ** other);
};

/* _________________________________________________________________________
   
   IPackageInfoCollection
   _________________________________________________________________________ */

/// @brief Package info collection interface.
[
  object,
  uuid(C941F37E-439C-4215-835F-75C7AD49B80C),
  dual,
  nonextensible,
  helpstring("IPackageInfoCollection Interface"),
  pointer_default(unique)
]
interface IPackageInfoCollection : IDispatch
{
  /// @brief Creates a new enumerator interface.
  /// @return Returns the new enumerator interface.
  [id(DISPID_NEWENUM), propget]
  HRESULT _NewEnum ([out, retval] IUnknown ** enumerator);

  /// @brief Obtains a specific package info structure.
  /// @param[in] index Index of package info structure to be retrieved.
  /// @return Returns the requested package info structure.
  [id(DISPID_VALUE), propget]
  HRESULT Item ([in] long index, 
		[out, retval] VARIANT * item);

  /// @brief Number of package info structures in the collection.
  /// @return Returns the number of package info structures.
  [id(1), propget]
  HRESULT Count([out, retval] long * count);
};

/* _________________________________________________________________________
   
   IPackageManager2
   _________________________________________________________________________ */

/// @brief Package manager interface (version 2).
[
  object,
  uuid(847D93E9-E086-4F09-B8C5-91CDCCF12CF3),
  dual,
  nonextensible,
  helpstring("IPackageManager2 Interface"),
  pointer_default(unique)
]
interface IPackageManager2 : IPackageManager
{
  /// @brief Obtains a packageinfo  collection.
  /// @return Returns the package info collection.
  [
    id(3),
    helpstring("method GetPackageInfoCollection")
  ]
  HRESULT
  GetPackageInfoCollection ([out,retval] IPackageInfoCollection ** collection);

  /// @brief Obtains a packageinfo enumerator.
  /// @return Returns the enumerator.
  [
    id(4),
    helpstring("method GetPackageInfoEnumerator")
  ]
  HRESULT
  GetPackageInfoEnumerator ([out,retval] IEnumPackageInfo ** enumerator);

  /// @brief Obtains a package iterator.
  /// @return Returns the iterator.
  [
    id(5),
    helpstring("method GetPackageIterator")
  ]
  HRESULT
  GetPackageIterator ([out,retval] IPackageIterator ** iter);
};

/* _________________________________________________________________________
   
   MiKTeXPackageManager@MIKTEX_SERIES_ID_STR@
   _________________________________________________________________________ */

/// @brief Package manager type library.
[
  uuid(@guid_MiKTeX_Package_Manager_TLB_CURVER@),
  version(1.0),
  helpstring("MiKTeX @MIKTEX_SERIES_STR@ Package Manager")
]
library MiKTeXPackageManager@MIKTEX_SERIES_ID_STR@
{
  importlib("stdole2.tlb");

  /// @brief The MiKTeX package manager COM object.
  ///
  /// This COM object implements the
  /// @link IPackageManager @endlink
  /// interface.
  [
    uuid(@guid_MiKTeX_Package_Manager_CURVER@),
    helpstring("MiKTeX @MIKTEX_SERIES_STR@ Package Manager")
  ]
  coclass PackageManager@MIKTEX_SERIES_ID_STR@
  {
    interface IPackageManager;
    [default] interface IPackageManager2;
  };

  struct MD5;
  struct PackageInfo;
  interface IPackageInstaller;
  interface IPackageInstallerCallback;
  interface IEnumPackageInfo;
  interface IPackageIterator;
  interface IPackageInfoCollection;
};
