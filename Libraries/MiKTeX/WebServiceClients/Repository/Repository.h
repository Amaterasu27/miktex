// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* Repository.h
   Generated by wsdl2h 2.8.8 from http://api.miktex.org/Repository.asmx?WSDL and typemap.dat
   2012-05-23 13:11:02 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2012 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on Repository.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://miktex.org/2008/05/repository                                     *
 *                                                                            *
\******************************************************************************/

/* WSDL Documentation:

Retrieve information about the MiKTeX package repositories.
*/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://miktex.org/2008/05/repository"
mtrep = "http://miktex.org/2006/06/repository"
mtrep2 = "http://miktex.org/2007/03/repository"
mtrep3 = "http://miktex.org/2007/07/repository"
mtrep4 = "http://miktex.org/2007/10/repository"

*/

#define SOAP_NAMESPACE_OF_mtrep	"http://miktex.org/2006/06/repository"
//gsoap mtrep schema namespace:	http://miktex.org/2006/06/repository
//gsoap mtrep schema elementForm:	qualified
//gsoap mtrep schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_mtrep2	"http://miktex.org/2007/03/repository"
//gsoap mtrep2 schema namespace:	http://miktex.org/2007/03/repository
//gsoap mtrep2 schema elementForm:	qualified
//gsoap mtrep2 schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_mtrep3	"http://miktex.org/2007/07/repository"
//gsoap mtrep3 schema namespace:	http://miktex.org/2007/07/repository
//gsoap mtrep3 schema elementForm:	qualified
//gsoap mtrep3 schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_mtrep4	"http://miktex.org/2007/10/repository"
//gsoap mtrep4 schema namespace:	http://miktex.org/2007/10/repository
//gsoap mtrep4 schema elementForm:	qualified
//gsoap mtrep4 schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://miktex.org/2008/05/repository"
//gsoap ns1   schema namespace:	http://miktex.org/2008/05/repository
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class mtrep__RepositoryInfo.
class mtrep__RepositoryInfo;

//  Forward declaration of class mtrep__ArrayOfRepositoryInfo.
class mtrep__ArrayOfRepositoryInfo;

//  Forward declaration of class _mtrep__TryGetRepositoryInfo.
class _mtrep__TryGetRepositoryInfo;

//  Forward declaration of class _mtrep__TryGetRepositoryInfoResponse.
class _mtrep__TryGetRepositoryInfoResponse;

//  Forward declaration of class _mtrep__PickRepository.
class _mtrep__PickRepository;

//  Forward declaration of class _mtrep__PickRepositoryResponse.
class _mtrep__PickRepositoryResponse;

//  Forward declaration of class _mtrep__GetAllRepositories.
class _mtrep__GetAllRepositories;

//  Forward declaration of class _mtrep__GetAllRepositoriesResponse.
class _mtrep__GetAllRepositoriesResponse;

//  Forward declaration of class _mtrep__GetRepositories.
class _mtrep__GetRepositories;

//  Forward declaration of class _mtrep__GetRepositoriesResponse.
class _mtrep__GetRepositoriesResponse;

//  Forward declaration of class _mtrep2__GetListCreationTime.
class _mtrep2__GetListCreationTime;

//  Forward declaration of class _mtrep2__GetListCreationTimeResponse.
class _mtrep2__GetListCreationTimeResponse;

//  Forward declaration of class mtrep3__ClientInfo.
class mtrep3__ClientInfo;

//  Forward declaration of class mtrep3__ArrayOfRepositoryInfo.
class mtrep3__ArrayOfRepositoryInfo;

//  Forward declaration of class mtrep3__RepositoryInfo.
class mtrep3__RepositoryInfo;

//  Forward declaration of class _mtrep3__GetRepositories2.
class _mtrep3__GetRepositories2;

//  Forward declaration of class _mtrep3__GetRepositories2Response.
class _mtrep3__GetRepositories2Response;

//  Forward declaration of class _mtrep3__PickRepository2.
class _mtrep3__PickRepository2;

//  Forward declaration of class _mtrep3__PickRepository2Response.
class _mtrep3__PickRepository2Response;

//  Forward declaration of class _mtrep3__TryGetRepositoryInfo2.
class _mtrep3__TryGetRepositoryInfo2;

//  Forward declaration of class _mtrep3__TryGetRepositoryInfo2Response.
class _mtrep3__TryGetRepositoryInfo2Response;

//  Forward declaration of class mtrep4__ClientInfo.
class mtrep4__ClientInfo;

//  Forward declaration of class mtrep4__RepositoryInfo.
class mtrep4__RepositoryInfo;

//  Forward declaration of class _mtrep4__VerifyRepository.
class _mtrep4__VerifyRepository;

//  Forward declaration of class _mtrep4__VerifyRepositoryResponse.
class _mtrep4__VerifyRepositoryResponse;

//  Forward declaration of class ns1__ClientInfo.
class ns1__ClientInfo;

//  Forward declaration of class ns1__ArrayOfRepositoryInfo2.
class ns1__ArrayOfRepositoryInfo2;

//  Forward declaration of class ns1__RepositoryInfo2.
class ns1__RepositoryInfo2;

//  Forward declaration of class ns1__RepositoryInfo.
class ns1__RepositoryInfo;

//  Forward declaration of class _ns1__GetRepositories3.
class _ns1__GetRepositories3;

//  Forward declaration of class _ns1__GetRepositories3Response.
class _ns1__GetRepositories3Response;

//  Forward declaration of class _ns1__PickRepository3.
class _ns1__PickRepository3;

//  Forward declaration of class _ns1__PickRepository3Response.
class _ns1__PickRepository3Response;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2006/06/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2007/03/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2007/07/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2007/10/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2008/05/repository                                     *
 *                                                                            *
\******************************************************************************/


/// "http://miktex.org/2006/06/repository":Integrities is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'mtrep__Integrities' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum mtrep__Integrities
{
	mtrep__Integrities__Intact,	///< xs:string value="Intact"
	mtrep__Integrities__Corrupted,	///< xs:string value="Corrupted"
	mtrep__Integrities__Unknown,	///< xs:string value="Unknown"
};

/// "http://miktex.org/2006/06/repository":Levels is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'mtrep__Levels' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum mtrep__Levels
{
	mtrep__Levels__Essential,	///< xs:string value="Essential"
	mtrep__Levels__Basic,	///< xs:string value="Basic"
	mtrep__Levels__Advanced,	///< xs:string value="Advanced"
	mtrep__Levels__Complete,	///< xs:string value="Complete"
};

/// "http://miktex.org/2006/06/repository":RepositoryStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'mtrep__RepositoryStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum mtrep__RepositoryStatus
{
	mtrep__RepositoryStatus__Online,	///< xs:string value="Online"
	mtrep__RepositoryStatus__Offline,	///< xs:string value="Offline"
	mtrep__RepositoryStatus__Unknown,	///< xs:string value="Unknown"
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2007/03/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2007/07/repository                                     *
 *                                                                            *
\******************************************************************************/


/// "http://miktex.org/2007/07/repository":Integrities is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'mtrep3__Integrities' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum mtrep3__Integrities
{
	mtrep3__Integrities__Intact,	///< xs:string value="Intact"
	mtrep3__Integrities__Corrupted,	///< xs:string value="Corrupted"
	mtrep3__Integrities__Unknown,	///< xs:string value="Unknown"
};

/// "http://miktex.org/2007/07/repository":Levels is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'mtrep3__Levels' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum mtrep3__Levels
{
	mtrep3__Levels__Essential,	///< xs:string value="Essential"
	mtrep3__Levels__Basic,	///< xs:string value="Basic"
	mtrep3__Levels__Advanced,	///< xs:string value="Advanced"
	mtrep3__Levels__Complete,	///< xs:string value="Complete"
};

/// "http://miktex.org/2007/07/repository":RepositoryStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'mtrep3__RepositoryStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum mtrep3__RepositoryStatus
{
	mtrep3__RepositoryStatus__Online,	///< xs:string value="Online"
	mtrep3__RepositoryStatus__Offline,	///< xs:string value="Offline"
	mtrep3__RepositoryStatus__Unknown,	///< xs:string value="Unknown"
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2007/10/repository                                     *
 *                                                                            *
\******************************************************************************/


/// "http://miktex.org/2007/10/repository":Integrities is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'mtrep4__Integrities' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum mtrep4__Integrities
{
	mtrep4__Integrities__Intact,	///< xs:string value="Intact"
	mtrep4__Integrities__Corrupted,	///< xs:string value="Corrupted"
	mtrep4__Integrities__Unknown,	///< xs:string value="Unknown"
};

/// "http://miktex.org/2007/10/repository":Levels is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'mtrep4__Levels' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum mtrep4__Levels
{
	mtrep4__Levels__Essential,	///< xs:string value="Essential"
	mtrep4__Levels__Basic,	///< xs:string value="Basic"
	mtrep4__Levels__Advanced,	///< xs:string value="Advanced"
	mtrep4__Levels__Complete,	///< xs:string value="Complete"
};

/// "http://miktex.org/2007/10/repository":RepositoryStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'mtrep4__RepositoryStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum mtrep4__RepositoryStatus
{
	mtrep4__RepositoryStatus__Online,	///< xs:string value="Online"
	mtrep4__RepositoryStatus__Offline,	///< xs:string value="Offline"
	mtrep4__RepositoryStatus__Unknown,	///< xs:string value="Unknown"
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2008/05/repository                                     *
 *                                                                            *
\******************************************************************************/


/// "http://miktex.org/2008/05/repository":Integrities is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__Integrities' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__Integrities
{
	ns1__Integrities__Intact,	///< xs:string value="Intact"
	ns1__Integrities__Corrupted,	///< xs:string value="Corrupted"
	ns1__Integrities__Unknown,	///< xs:string value="Unknown"
};

/// "http://miktex.org/2008/05/repository":Levels is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__Levels' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__Levels
{
	ns1__Levels__Essential,	///< xs:string value="Essential"
	ns1__Levels__Basic,	///< xs:string value="Basic"
	ns1__Levels__Advanced,	///< xs:string value="Advanced"
	ns1__Levels__Complete,	///< xs:string value="Complete"
};

/// "http://miktex.org/2008/05/repository":RepositoryStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__RepositoryStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__RepositoryStatus
{
	ns1__RepositoryStatus__Online,	///< xs:string value="Online"
	ns1__RepositoryStatus__Offline,	///< xs:string value="Offline"
	ns1__RepositoryStatus__Unknown,	///< xs:string value="Unknown"
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://miktex.org/2006/06/repository                                     *
 *                                                                            *
\******************************************************************************/


/// "http://miktex.org/2006/06/repository":RepositoryInfo is a complexType.
class mtrep__RepositoryInfo
{ public:
/// Element Country of type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element Date of type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element Delay of type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element Integrity of type "http://miktex.org/2006/06/repository":Integrities.
    enum mtrep__Integrities              Integrity                      1;	///< Required element.
/// Element Level of type "http://miktex.org/2006/06/repository":Levels.
    enum mtrep__Levels                   Level                          1;	///< Required element.
/// Element Status of type "http://miktex.org/2006/06/repository":RepositoryStatus.
    enum mtrep__RepositoryStatus         Status                         1;	///< Required element.
/// Element Url of type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element Version of type xs:int.
    int                                  Version                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://miktex.org/2006/06/repository":ArrayOfRepositoryInfo is a complexType.
class mtrep__ArrayOfRepositoryInfo
{ public:
/// Vector of mtrep__RepositoryInfo* with length 0..unbounded
    std::vector<mtrep__RepositoryInfo* > RepositoryInfo                 0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2006/06/repository":TryGetRepositoryInfo

/// "http://miktex.org/2006/06/repository":TryGetRepositoryInfo is a complexType.
class _mtrep__TryGetRepositoryInfo
{ public:
/// Element url of type xs:string.
    std::string*                         url                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2006/06/repository":TryGetRepositoryInfoResponse

/// "http://miktex.org/2006/06/repository":TryGetRepositoryInfoResponse is a complexType.
class _mtrep__TryGetRepositoryInfoResponse
{ public:
/// Element TryGetRepositoryInfoResult of type xs:boolean.
    bool                                 TryGetRepositoryInfoResult     1;	///< Required element.
/// Element repositoryInfo of type "http://miktex.org/2006/06/repository":RepositoryInfo.
    mtrep__RepositoryInfo*               repositoryInfo                 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2006/06/repository":PickRepository

/// "http://miktex.org/2006/06/repository":PickRepository is a complexType.
class _mtrep__PickRepository
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2006/06/repository":PickRepositoryResponse

/// "http://miktex.org/2006/06/repository":PickRepositoryResponse is a complexType.
class _mtrep__PickRepositoryResponse
{ public:
/// Element PickRepositoryResult of type "http://miktex.org/2006/06/repository":RepositoryInfo.
    mtrep__RepositoryInfo*               PickRepositoryResult           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2006/06/repository":GetAllRepositories

/// "http://miktex.org/2006/06/repository":GetAllRepositories is a complexType.
class _mtrep__GetAllRepositories
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2006/06/repository":GetAllRepositoriesResponse

/// "http://miktex.org/2006/06/repository":GetAllRepositoriesResponse is a complexType.
class _mtrep__GetAllRepositoriesResponse
{ public:
/// Element GetAllRepositoriesResult of type "http://miktex.org/2006/06/repository":ArrayOfRepositoryInfo.
    mtrep__ArrayOfRepositoryInfo*        GetAllRepositoriesResult       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2006/06/repository":GetRepositories

/// "http://miktex.org/2006/06/repository":GetRepositories is a complexType.
class _mtrep__GetRepositories
{ public:
/// Element onlyOnline of type xs:boolean.
    bool                                 onlyOnline                     1;	///< Required element.
/// Element noCorrupted of type xs:boolean.
    bool                                 noCorrupted                    1;	///< Required element.
/// Element maxDelay of type xs:int.
    int                                  maxDelay                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2006/06/repository":GetRepositoriesResponse

/// "http://miktex.org/2006/06/repository":GetRepositoriesResponse is a complexType.
class _mtrep__GetRepositoriesResponse
{ public:
/// Element GetRepositoriesResult of type "http://miktex.org/2006/06/repository":ArrayOfRepositoryInfo.
    mtrep__ArrayOfRepositoryInfo*        GetRepositoriesResult          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://miktex.org/2007/03/repository                                     *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://miktex.org/2007/03/repository":GetListCreationTime

/// "http://miktex.org/2007/03/repository":GetListCreationTime is a complexType.
class _mtrep2__GetListCreationTime
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2007/03/repository":GetListCreationTimeResponse

/// "http://miktex.org/2007/03/repository":GetListCreationTimeResponse is a complexType.
class _mtrep2__GetListCreationTimeResponse
{ public:
/// Element GetListCreationTimeResult of type xs:int.
    int                                  GetListCreationTimeResult      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://miktex.org/2007/07/repository                                     *
 *                                                                            *
\******************************************************************************/


/// "http://miktex.org/2007/07/repository":ClientInfo is a complexType.
class mtrep3__ClientInfo
{ public:
/// Element Name of type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// Element Version of type xs:string.
    std::string*                         Version                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://miktex.org/2007/07/repository":ArrayOfRepositoryInfo is a complexType.
class mtrep3__ArrayOfRepositoryInfo
{ public:
/// Vector of mtrep3__RepositoryInfo* with length 0..unbounded
    std::vector<mtrep3__RepositoryInfo*> RepositoryInfo                 0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://miktex.org/2007/07/repository":RepositoryInfo is a complexType.
class mtrep3__RepositoryInfo
{ public:
/// Element Country of type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element Date of type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element Delay of type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element Integrity of type "http://miktex.org/2007/07/repository":Integrities.
    enum mtrep3__Integrities             Integrity                      1;	///< Required element.
/// Element Level of type "http://miktex.org/2007/07/repository":Levels.
    enum mtrep3__Levels                  Level                          1;	///< Required element.
/// Element Status of type "http://miktex.org/2007/07/repository":RepositoryStatus.
    enum mtrep3__RepositoryStatus        Status                         1;	///< Required element.
/// Element Url of type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element Version of type xs:int.
    int                                  Version                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2007/07/repository":GetRepositories2

/// "http://miktex.org/2007/07/repository":GetRepositories2 is a complexType.
class _mtrep3__GetRepositories2
{ public:
/// Element clientInfo of type "http://miktex.org/2007/07/repository":ClientInfo.
    mtrep3__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// Element onlyOnline of type xs:boolean.
    bool                                 onlyOnline                     1;	///< Required element.
/// Element noCorrupted of type xs:boolean.
    bool                                 noCorrupted                    1;	///< Required element.
/// Element maxDelay of type xs:int.
    int                                  maxDelay                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2007/07/repository":GetRepositories2Response

/// "http://miktex.org/2007/07/repository":GetRepositories2Response is a complexType.
class _mtrep3__GetRepositories2Response
{ public:
/// Element GetRepositories2Result of type "http://miktex.org/2007/07/repository":ArrayOfRepositoryInfo.
    mtrep3__ArrayOfRepositoryInfo*       GetRepositories2Result         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2007/07/repository":PickRepository2

/// "http://miktex.org/2007/07/repository":PickRepository2 is a complexType.
class _mtrep3__PickRepository2
{ public:
/// Element clientInfo of type "http://miktex.org/2007/07/repository":ClientInfo.
    mtrep3__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2007/07/repository":PickRepository2Response

/// "http://miktex.org/2007/07/repository":PickRepository2Response is a complexType.
class _mtrep3__PickRepository2Response
{ public:
/// Element PickRepository2Result of type "http://miktex.org/2007/07/repository":RepositoryInfo.
    mtrep3__RepositoryInfo*              PickRepository2Result          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2007/07/repository":TryGetRepositoryInfo2

/// "http://miktex.org/2007/07/repository":TryGetRepositoryInfo2 is a complexType.
class _mtrep3__TryGetRepositoryInfo2
{ public:
/// Element clientInfo of type "http://miktex.org/2007/07/repository":ClientInfo.
    mtrep3__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// Element url of type xs:string.
    std::string*                         url                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2007/07/repository":TryGetRepositoryInfo2Response

/// "http://miktex.org/2007/07/repository":TryGetRepositoryInfo2Response is a complexType.
class _mtrep3__TryGetRepositoryInfo2Response
{ public:
/// Element TryGetRepositoryInfo2Result of type xs:boolean.
    bool                                 TryGetRepositoryInfo2Result    1;	///< Required element.
/// Element repositoryInfo of type "http://miktex.org/2007/07/repository":RepositoryInfo.
    mtrep3__RepositoryInfo*              repositoryInfo                 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://miktex.org/2007/10/repository                                     *
 *                                                                            *
\******************************************************************************/


/// "http://miktex.org/2007/10/repository":ClientInfo is a complexType.
class mtrep4__ClientInfo
{ public:
/// Element Name of type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// Element Version of type xs:string.
    std::string*                         Version                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://miktex.org/2007/10/repository":RepositoryInfo is a complexType.
class mtrep4__RepositoryInfo
{ public:
/// Element Country of type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element Date of type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element Delay of type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element Integrity of type "http://miktex.org/2007/10/repository":Integrities.
    enum mtrep4__Integrities             Integrity                      1;	///< Required element.
/// Element Level of type "http://miktex.org/2007/10/repository":Levels.
    enum mtrep4__Levels                  Level                          1;	///< Required element.
/// Element Status of type "http://miktex.org/2007/10/repository":RepositoryStatus.
    enum mtrep4__RepositoryStatus        Status                         1;	///< Required element.
/// Element Url of type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element Version of type xs:int.
    int                                  Version                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2007/10/repository":VerifyRepository

/// "http://miktex.org/2007/10/repository":VerifyRepository is a complexType.
class _mtrep4__VerifyRepository
{ public:
/// Element clientInfo of type "http://miktex.org/2007/10/repository":ClientInfo.
    mtrep4__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// Element url of type xs:string.
    std::string*                         url                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2007/10/repository":VerifyRepositoryResponse

/// "http://miktex.org/2007/10/repository":VerifyRepositoryResponse is a complexType.
class _mtrep4__VerifyRepositoryResponse
{ public:
/// Element VerifyRepositoryResult of type xs:boolean.
    bool                                 VerifyRepositoryResult         1;	///< Required element.
/// Element repositoryInfo of type "http://miktex.org/2007/10/repository":RepositoryInfo.
    mtrep4__RepositoryInfo*              repositoryInfo                 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://miktex.org/2008/05/repository                                     *
 *                                                                            *
\******************************************************************************/


/// "http://miktex.org/2008/05/repository":ClientInfo is a complexType.
class ns1__ClientInfo
{ public:
/// Element Name of type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// Element Version of type xs:string.
    std::string*                         Version                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://miktex.org/2008/05/repository":ArrayOfRepositoryInfo2 is a complexType.
class ns1__ArrayOfRepositoryInfo2
{ public:
/// Vector of ns1__RepositoryInfo2* with length 0..unbounded
    std::vector<ns1__RepositoryInfo2*  > RepositoryInfo2                0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://miktex.org/2008/05/repository":RepositoryInfo is a complexType.
class ns1__RepositoryInfo
{ public:
/// Element Country of type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element Date of type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element Delay of type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element Integrity of type "http://miktex.org/2008/05/repository":Integrities.
    enum ns1__Integrities                Integrity                      1;	///< Required element.
/// Element Level of type "http://miktex.org/2008/05/repository":Levels.
    enum ns1__Levels                     Level                          1;	///< Required element.
/// Element Status of type "http://miktex.org/2008/05/repository":RepositoryStatus.
    enum ns1__RepositoryStatus           Status                         1;	///< Required element.
/// Element Url of type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element Version of type xs:int.
    int                                  Version                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2008/05/repository":GetRepositories3

/// "http://miktex.org/2008/05/repository":GetRepositories3 is a complexType.
class _ns1__GetRepositories3
{ public:
/// Element clientInfo of type "http://miktex.org/2008/05/repository":ClientInfo.
    ns1__ClientInfo*                     clientInfo                     0;	///< Optional element.
/// Element onlyOnline of type xs:boolean.
    bool                                 onlyOnline                     1;	///< Required element.
/// Element noCorrupted of type xs:boolean.
    bool                                 noCorrupted                    1;	///< Required element.
/// Element httpOnly of type xs:boolean.
    bool                                 httpOnly                       1;	///< Required element.
/// Element excludeHidden of type xs:boolean.
    bool                                 excludeHidden                  1;	///< Required element.
/// Element maxDelay of type xs:int.
    int                                  maxDelay                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2008/05/repository":GetRepositories3Response

/// "http://miktex.org/2008/05/repository":GetRepositories3Response is a complexType.
class _ns1__GetRepositories3Response
{ public:
/// Element GetRepositories3Result of type "http://miktex.org/2008/05/repository":ArrayOfRepositoryInfo2.
    ns1__ArrayOfRepositoryInfo2*         GetRepositories3Result         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2008/05/repository":PickRepository3

/// "http://miktex.org/2008/05/repository":PickRepository3 is a complexType.
class _ns1__PickRepository3
{ public:
/// Element clientInfo of type "http://miktex.org/2008/05/repository":ClientInfo.
    ns1__ClientInfo*                     clientInfo                     0;	///< Optional element.
/// Element favorHttp of type xs:boolean.
    bool                                 favorHttp                      1;	///< Required element.
/// Element nearest of type xs:boolean.
    bool                                 nearest                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://miktex.org/2008/05/repository":PickRepository3Response

/// "http://miktex.org/2008/05/repository":PickRepository3Response is a complexType.
class _ns1__PickRepository3Response
{ public:
/// Element PickRepository3Result of type "http://miktex.org/2008/05/repository":RepositoryInfo2.
    ns1__RepositoryInfo2*                PickRepository3Result          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://miktex.org/2008/05/repository":RepositoryInfo2 is a complexType with complexContent extension of "http://miktex.org/2008/05/repository":RepositoryInfo.
class ns1__RepositoryInfo2 : public ns1__RepositoryInfo
{ public:
/*  INHERITED FROM ns1__RepositoryInfo:
/// Element Country of type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element Date of type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element Delay of type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element Integrity of type "http://miktex.org/2008/05/repository":Integrities.
    enum ns1__Integrities                Integrity                      1;	///< Required element.
/// Element Level of type "http://miktex.org/2008/05/repository":Levels.
    enum ns1__Levels                     Level                          1;	///< Required element.
/// Element Status of type "http://miktex.org/2008/05/repository":RepositoryStatus.
    enum ns1__RepositoryStatus           Status                         1;	///< Required element.
/// Element Url of type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element Version of type xs:int.
    int                                  Version                        1;	///< Required element.
    END OF INHERITED FROM ns1__RepositoryInfo */
/// Element CountryCode of type xs:string.
    std::string*                         CountryCode                    0;	///< Optional element.
/// Element City of type xs:string.
    std::string*                         City                           0;	///< Optional element.
/// Element Latitude of type xs:double.
    double                               Latitude                       1;	///< Required element.
/// Element Longitude of type xs:double.
    double                               Longitude                      1;	///< Required element.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://miktex.org/2006/06/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://miktex.org/2006/06/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://miktex.org/2007/03/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://miktex.org/2007/03/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://miktex.org/2007/07/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://miktex.org/2007/07/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://miktex.org/2007/10/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://miktex.org/2007/10/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://miktex.org/2008/05/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://miktex.org/2008/05/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns2  service name:	RepositorySoap 
//gsoap ns2  service type:	RepositorySoap 
//gsoap ns2  service port:	http://api.miktex.org/Repository.asmx 
//gsoap ns2  service namespace:	http://miktex.org/2008/05/repository/RepositorySoap 
//gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns3  service name:	RepositorySoap12 
//gsoap ns3  service type:	RepositorySoap 
//gsoap ns3  service port:	http://api.miktex.org/Repository.asmx 
//gsoap ns3  service namespace:	http://miktex.org/2008/05/repository/RepositorySoap12 
//gsoap ns3  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_documentation Documentation
Retrieve information about the MiKTeX package repositories.

@section Service_bindings Service Bindings

  - @ref RepositorySoap

  - @ref RepositorySoap12

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page RepositorySoap Binding "RepositorySoap"

@section Repository_service Service Documentation "Repository"
Retrieve information about the MiKTeX package repositories.

@section RepositorySoap_operations Operations of Binding  "RepositorySoap"

  - @ref __ns2__TryGetRepositoryInfo

  - @ref __ns2__PickRepository

  - @ref __ns2__GetAllRepositories

  - @ref __ns2__GetRepositories

  - @ref __ns2__GetListCreationTime

  - @ref __ns2__GetRepositories2

  - @ref __ns2__PickRepository2

  - @ref __ns2__TryGetRepositoryInfo2

  - @ref __ns2__VerifyRepository

  - @ref __ns2__GetRepositories3

  - @ref __ns2__PickRepository3

@section RepositorySoap_ports Endpoints of Binding  "RepositorySoap"

  - http://api.miktex.org/Repository.asmx

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page RepositorySoap12 Binding "RepositorySoap12"

@section Repository_service Service Documentation "Repository"
Retrieve information about the MiKTeX package repositories.

@section RepositorySoap12_operations Operations of Binding  "RepositorySoap12"

  - @ref __ns3__TryGetRepositoryInfo

  - @ref __ns3__PickRepository

  - @ref __ns3__GetAllRepositories

  - @ref __ns3__GetRepositories

  - @ref __ns3__GetListCreationTime

  - @ref __ns3__GetRepositories2

  - @ref __ns3__PickRepository2

  - @ref __ns3__TryGetRepositoryInfo2

  - @ref __ns3__VerifyRepository

  - @ref __ns3__GetRepositories3

  - @ref __ns3__PickRepository3

@section RepositorySoap12_ports Endpoints of Binding  "RepositorySoap12"

  - http://api.miktex.org/Repository.asmx

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   RepositorySoap                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__TryGetRepositoryInfo                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__TryGetRepositoryInfo" of service binding "RepositorySoap"

/**

Operation details:

Try to get information about a package repository (deprecated).

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2006/06/repository/TryGetRepositoryInfo"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/TryGetRepositoryInfo"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/TryGetRepositoryInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__TryGetRepositoryInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep__TryGetRepositoryInfo*       mtrep__TryGetRepositoryInfo,
    // response parameters:
    _mtrep__TryGetRepositoryInfoResponse* mtrep__TryGetRepositoryInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__TryGetRepositoryInfo(
    struct soap *soap,
    // request parameters:
    _mtrep__TryGetRepositoryInfo*       mtrep__TryGetRepositoryInfo,
    // response parameters:
    _mtrep__TryGetRepositoryInfoResponse* mtrep__TryGetRepositoryInfoResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	TryGetRepositoryInfo document
//gsoap ns2  service method-encoding:	TryGetRepositoryInfo literal
//gsoap ns2  service method-action:	TryGetRepositoryInfo http://miktex.org/2006/06/repository/TryGetRepositoryInfo
//gsoap ns2  service method-output-action:	TryGetRepositoryInfo http://miktex.org/2008/05/repository/RepositorySoap/TryGetRepositoryInfoResponse
int __ns2__TryGetRepositoryInfo(
    _mtrep__TryGetRepositoryInfo*       mtrep__TryGetRepositoryInfo,	///< Request parameter
    _mtrep__TryGetRepositoryInfoResponse* mtrep__TryGetRepositoryInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__PickRepository                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__PickRepository" of service binding "RepositorySoap"

/**

Operation details:

Pick out a random package repository (deprecated).

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2006/06/repository/PickRepository"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/PickRepository"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/PickRepositoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__PickRepository(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep__PickRepository*             mtrep__PickRepository,
    // response parameters:
    _mtrep__PickRepositoryResponse*     mtrep__PickRepositoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__PickRepository(
    struct soap *soap,
    // request parameters:
    _mtrep__PickRepository*             mtrep__PickRepository,
    // response parameters:
    _mtrep__PickRepositoryResponse*     mtrep__PickRepositoryResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	PickRepository document
//gsoap ns2  service method-encoding:	PickRepository literal
//gsoap ns2  service method-action:	PickRepository http://miktex.org/2006/06/repository/PickRepository
//gsoap ns2  service method-output-action:	PickRepository http://miktex.org/2008/05/repository/RepositorySoap/PickRepositoryResponse
int __ns2__PickRepository(
    _mtrep__PickRepository*             mtrep__PickRepository,	///< Request parameter
    _mtrep__PickRepositoryResponse*     mtrep__PickRepositoryResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetAllRepositories                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetAllRepositories" of service binding "RepositorySoap"

/**

Operation details:

Get all known package repositories (deprecated).

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2006/06/repository/GetAllRepositories"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/GetAllRepositories"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/GetAllRepositoriesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetAllRepositories(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep__GetAllRepositories*         mtrep__GetAllRepositories,
    // response parameters:
    _mtrep__GetAllRepositoriesResponse* mtrep__GetAllRepositoriesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetAllRepositories(
    struct soap *soap,
    // request parameters:
    _mtrep__GetAllRepositories*         mtrep__GetAllRepositories,
    // response parameters:
    _mtrep__GetAllRepositoriesResponse* mtrep__GetAllRepositoriesResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	GetAllRepositories document
//gsoap ns2  service method-encoding:	GetAllRepositories literal
//gsoap ns2  service method-action:	GetAllRepositories http://miktex.org/2006/06/repository/GetAllRepositories
//gsoap ns2  service method-output-action:	GetAllRepositories http://miktex.org/2008/05/repository/RepositorySoap/GetAllRepositoriesResponse
int __ns2__GetAllRepositories(
    _mtrep__GetAllRepositories*         mtrep__GetAllRepositories,	///< Request parameter
    _mtrep__GetAllRepositoriesResponse* mtrep__GetAllRepositoriesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetRepositories                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetRepositories" of service binding "RepositorySoap"

/**

Operation details:

Get a filtered list of known package repositories (deprecated).

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2006/06/repository/GetRepositories"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/GetRepositoriesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetRepositories(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep__GetRepositories*            mtrep__GetRepositories,
    // response parameters:
    _mtrep__GetRepositoriesResponse*    mtrep__GetRepositoriesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetRepositories(
    struct soap *soap,
    // request parameters:
    _mtrep__GetRepositories*            mtrep__GetRepositories,
    // response parameters:
    _mtrep__GetRepositoriesResponse*    mtrep__GetRepositoriesResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	GetRepositories document
//gsoap ns2  service method-encoding:	GetRepositories literal
//gsoap ns2  service method-action:	GetRepositories http://miktex.org/2006/06/repository/GetRepositories
//gsoap ns2  service method-output-action:	GetRepositories http://miktex.org/2008/05/repository/RepositorySoap/GetRepositoriesResponse
int __ns2__GetRepositories(
    _mtrep__GetRepositories*            mtrep__GetRepositories,	///< Request parameter
    _mtrep__GetRepositoriesResponse*    mtrep__GetRepositoriesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetListCreationTime                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetListCreationTime" of service binding "RepositorySoap"

/**

Operation details:

Get the creation date and time of the repository list.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2007/03/repository/GetListCreationTime"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/GetListCreationTime"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/GetListCreationTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetListCreationTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep2__GetListCreationTime*       mtrep2__GetListCreationTime,
    // response parameters:
    _mtrep2__GetListCreationTimeResponse* mtrep2__GetListCreationTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetListCreationTime(
    struct soap *soap,
    // request parameters:
    _mtrep2__GetListCreationTime*       mtrep2__GetListCreationTime,
    // response parameters:
    _mtrep2__GetListCreationTimeResponse* mtrep2__GetListCreationTimeResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	GetListCreationTime document
//gsoap ns2  service method-encoding:	GetListCreationTime literal
//gsoap ns2  service method-action:	GetListCreationTime http://miktex.org/2007/03/repository/GetListCreationTime
//gsoap ns2  service method-output-action:	GetListCreationTime http://miktex.org/2008/05/repository/RepositorySoap/GetListCreationTimeResponse
int __ns2__GetListCreationTime(
    _mtrep2__GetListCreationTime*       mtrep2__GetListCreationTime,	///< Request parameter
    _mtrep2__GetListCreationTimeResponse* mtrep2__GetListCreationTimeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetRepositories2                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetRepositories2" of service binding "RepositorySoap"

/**

Operation details:

Get a filtered list of known package repositories.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2007/07/repository/GetRepositories2"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories2"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetRepositories2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep3__GetRepositories2*          mtrep3__GetRepositories2,
    // response parameters:
    _mtrep3__GetRepositories2Response*  mtrep3__GetRepositories2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetRepositories2(
    struct soap *soap,
    // request parameters:
    _mtrep3__GetRepositories2*          mtrep3__GetRepositories2,
    // response parameters:
    _mtrep3__GetRepositories2Response*  mtrep3__GetRepositories2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	GetRepositories2 document
//gsoap ns2  service method-encoding:	GetRepositories2 literal
//gsoap ns2  service method-action:	GetRepositories2 http://miktex.org/2007/07/repository/GetRepositories2
//gsoap ns2  service method-output-action:	GetRepositories2 http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories2Response
int __ns2__GetRepositories2(
    _mtrep3__GetRepositories2*          mtrep3__GetRepositories2,	///< Request parameter
    _mtrep3__GetRepositories2Response*  mtrep3__GetRepositories2Response	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__PickRepository2                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__PickRepository2" of service binding "RepositorySoap"

/**

Operation details:

Pick out a random package repository.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2007/07/repository/PickRepository2"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/PickRepository2"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/PickRepository2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__PickRepository2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep3__PickRepository2*           mtrep3__PickRepository2,
    // response parameters:
    _mtrep3__PickRepository2Response*   mtrep3__PickRepository2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__PickRepository2(
    struct soap *soap,
    // request parameters:
    _mtrep3__PickRepository2*           mtrep3__PickRepository2,
    // response parameters:
    _mtrep3__PickRepository2Response*   mtrep3__PickRepository2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	PickRepository2 document
//gsoap ns2  service method-encoding:	PickRepository2 literal
//gsoap ns2  service method-action:	PickRepository2 http://miktex.org/2007/07/repository/PickRepository2
//gsoap ns2  service method-output-action:	PickRepository2 http://miktex.org/2008/05/repository/RepositorySoap/PickRepository2Response
int __ns2__PickRepository2(
    _mtrep3__PickRepository2*           mtrep3__PickRepository2,	///< Request parameter
    _mtrep3__PickRepository2Response*   mtrep3__PickRepository2Response	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__TryGetRepositoryInfo2                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__TryGetRepositoryInfo2" of service binding "RepositorySoap"

/**

Operation details:

Try to get information about a package repository.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2007/07/repository/TryGetRepositoryInfo2"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/TryGetRepositoryInfo2"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/TryGetRepositoryInfo2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__TryGetRepositoryInfo2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep3__TryGetRepositoryInfo2*     mtrep3__TryGetRepositoryInfo2,
    // response parameters:
    _mtrep3__TryGetRepositoryInfo2Response* mtrep3__TryGetRepositoryInfo2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__TryGetRepositoryInfo2(
    struct soap *soap,
    // request parameters:
    _mtrep3__TryGetRepositoryInfo2*     mtrep3__TryGetRepositoryInfo2,
    // response parameters:
    _mtrep3__TryGetRepositoryInfo2Response* mtrep3__TryGetRepositoryInfo2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	TryGetRepositoryInfo2 document
//gsoap ns2  service method-encoding:	TryGetRepositoryInfo2 literal
//gsoap ns2  service method-action:	TryGetRepositoryInfo2 http://miktex.org/2007/07/repository/TryGetRepositoryInfo2
//gsoap ns2  service method-output-action:	TryGetRepositoryInfo2 http://miktex.org/2008/05/repository/RepositorySoap/TryGetRepositoryInfo2Response
int __ns2__TryGetRepositoryInfo2(
    _mtrep3__TryGetRepositoryInfo2*     mtrep3__TryGetRepositoryInfo2,	///< Request parameter
    _mtrep3__TryGetRepositoryInfo2Response* mtrep3__TryGetRepositoryInfo2Response	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__VerifyRepository                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__VerifyRepository" of service binding "RepositorySoap"

/**

Operation details:

Verify the integrity of a package repository.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2007/10/repository/VerifyRepository"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/VerifyRepository"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/VerifyRepositoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__VerifyRepository(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep4__VerifyRepository*          mtrep4__VerifyRepository,
    // response parameters:
    _mtrep4__VerifyRepositoryResponse*  mtrep4__VerifyRepositoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__VerifyRepository(
    struct soap *soap,
    // request parameters:
    _mtrep4__VerifyRepository*          mtrep4__VerifyRepository,
    // response parameters:
    _mtrep4__VerifyRepositoryResponse*  mtrep4__VerifyRepositoryResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	VerifyRepository document
//gsoap ns2  service method-encoding:	VerifyRepository literal
//gsoap ns2  service method-action:	VerifyRepository http://miktex.org/2007/10/repository/VerifyRepository
//gsoap ns2  service method-output-action:	VerifyRepository http://miktex.org/2008/05/repository/RepositorySoap/VerifyRepositoryResponse
int __ns2__VerifyRepository(
    _mtrep4__VerifyRepository*          mtrep4__VerifyRepository,	///< Request parameter
    _mtrep4__VerifyRepositoryResponse*  mtrep4__VerifyRepositoryResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetRepositories3                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__GetRepositories3" of service binding "RepositorySoap"

/**

Operation details:

Get a filtered list of known package repositories.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2008/05/repository/GetRepositories3"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories3"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories3Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetRepositories3(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetRepositories3*             ns1__GetRepositories3,
    // response parameters:
    _ns1__GetRepositories3Response*     ns1__GetRepositories3Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetRepositories3(
    struct soap *soap,
    // request parameters:
    _ns1__GetRepositories3*             ns1__GetRepositories3,
    // response parameters:
    _ns1__GetRepositories3Response*     ns1__GetRepositories3Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	GetRepositories3 document
//gsoap ns2  service method-encoding:	GetRepositories3 literal
//gsoap ns2  service method-action:	GetRepositories3 http://miktex.org/2008/05/repository/GetRepositories3
//gsoap ns2  service method-output-action:	GetRepositories3 http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories3Response
int __ns2__GetRepositories3(
    _ns1__GetRepositories3*             ns1__GetRepositories3,	///< Request parameter
    _ns1__GetRepositories3Response*     ns1__GetRepositories3Response	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__PickRepository3                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__PickRepository3" of service binding "RepositorySoap"

/**

Operation details:

Pick out a random package repository.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2008/05/repository/PickRepository3"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/PickRepository3"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/PickRepository3Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__PickRepository3(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__PickRepository3*              ns1__PickRepository3,
    // response parameters:
    _ns1__PickRepository3Response*      ns1__PickRepository3Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__PickRepository3(
    struct soap *soap,
    // request parameters:
    _ns1__PickRepository3*              ns1__PickRepository3,
    // response parameters:
    _ns1__PickRepository3Response*      ns1__PickRepository3Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	PickRepository3 document
//gsoap ns2  service method-encoding:	PickRepository3 literal
//gsoap ns2  service method-action:	PickRepository3 http://miktex.org/2008/05/repository/PickRepository3
//gsoap ns2  service method-output-action:	PickRepository3 http://miktex.org/2008/05/repository/RepositorySoap/PickRepository3Response
int __ns2__PickRepository3(
    _ns1__PickRepository3*              ns1__PickRepository3,	///< Request parameter
    _ns1__PickRepository3Response*      ns1__PickRepository3Response	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   RepositorySoap12                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__TryGetRepositoryInfo                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__TryGetRepositoryInfo" of service binding "RepositorySoap12"

/**

Operation details:

Try to get information about a package repository (deprecated).

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2006/06/repository/TryGetRepositoryInfo"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/TryGetRepositoryInfo"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/TryGetRepositoryInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__TryGetRepositoryInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep__TryGetRepositoryInfo*       mtrep__TryGetRepositoryInfo,
    // response parameters:
    _mtrep__TryGetRepositoryInfoResponse* mtrep__TryGetRepositoryInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__TryGetRepositoryInfo(
    struct soap *soap,
    // request parameters:
    _mtrep__TryGetRepositoryInfo*       mtrep__TryGetRepositoryInfo,
    // response parameters:
    _mtrep__TryGetRepositoryInfoResponse* mtrep__TryGetRepositoryInfoResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoap12Proxy.h):
@code
  class RepositorySoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoap12Service.h):
@code
  class RepositorySoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	TryGetRepositoryInfo document
//gsoap ns3  service method-encoding:	TryGetRepositoryInfo literal
//gsoap ns3  service method-action:	TryGetRepositoryInfo http://miktex.org/2006/06/repository/TryGetRepositoryInfo
//gsoap ns3  service method-output-action:	TryGetRepositoryInfo http://miktex.org/2008/05/repository/RepositorySoap/TryGetRepositoryInfoResponse
int __ns3__TryGetRepositoryInfo(
    _mtrep__TryGetRepositoryInfo*       mtrep__TryGetRepositoryInfo,	///< Request parameter
    _mtrep__TryGetRepositoryInfoResponse* mtrep__TryGetRepositoryInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__PickRepository                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__PickRepository" of service binding "RepositorySoap12"

/**

Operation details:

Pick out a random package repository (deprecated).

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2006/06/repository/PickRepository"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/PickRepository"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/PickRepositoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__PickRepository(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep__PickRepository*             mtrep__PickRepository,
    // response parameters:
    _mtrep__PickRepositoryResponse*     mtrep__PickRepositoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__PickRepository(
    struct soap *soap,
    // request parameters:
    _mtrep__PickRepository*             mtrep__PickRepository,
    // response parameters:
    _mtrep__PickRepositoryResponse*     mtrep__PickRepositoryResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoap12Proxy.h):
@code
  class RepositorySoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoap12Service.h):
@code
  class RepositorySoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	PickRepository document
//gsoap ns3  service method-encoding:	PickRepository literal
//gsoap ns3  service method-action:	PickRepository http://miktex.org/2006/06/repository/PickRepository
//gsoap ns3  service method-output-action:	PickRepository http://miktex.org/2008/05/repository/RepositorySoap/PickRepositoryResponse
int __ns3__PickRepository(
    _mtrep__PickRepository*             mtrep__PickRepository,	///< Request parameter
    _mtrep__PickRepositoryResponse*     mtrep__PickRepositoryResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__GetAllRepositories                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__GetAllRepositories" of service binding "RepositorySoap12"

/**

Operation details:

Get all known package repositories (deprecated).

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2006/06/repository/GetAllRepositories"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/GetAllRepositories"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/GetAllRepositoriesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__GetAllRepositories(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep__GetAllRepositories*         mtrep__GetAllRepositories,
    // response parameters:
    _mtrep__GetAllRepositoriesResponse* mtrep__GetAllRepositoriesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__GetAllRepositories(
    struct soap *soap,
    // request parameters:
    _mtrep__GetAllRepositories*         mtrep__GetAllRepositories,
    // response parameters:
    _mtrep__GetAllRepositoriesResponse* mtrep__GetAllRepositoriesResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoap12Proxy.h):
@code
  class RepositorySoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoap12Service.h):
@code
  class RepositorySoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	GetAllRepositories document
//gsoap ns3  service method-encoding:	GetAllRepositories literal
//gsoap ns3  service method-action:	GetAllRepositories http://miktex.org/2006/06/repository/GetAllRepositories
//gsoap ns3  service method-output-action:	GetAllRepositories http://miktex.org/2008/05/repository/RepositorySoap/GetAllRepositoriesResponse
int __ns3__GetAllRepositories(
    _mtrep__GetAllRepositories*         mtrep__GetAllRepositories,	///< Request parameter
    _mtrep__GetAllRepositoriesResponse* mtrep__GetAllRepositoriesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__GetRepositories                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__GetRepositories" of service binding "RepositorySoap12"

/**

Operation details:

Get a filtered list of known package repositories (deprecated).

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2006/06/repository/GetRepositories"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/GetRepositoriesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__GetRepositories(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep__GetRepositories*            mtrep__GetRepositories,
    // response parameters:
    _mtrep__GetRepositoriesResponse*    mtrep__GetRepositoriesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__GetRepositories(
    struct soap *soap,
    // request parameters:
    _mtrep__GetRepositories*            mtrep__GetRepositories,
    // response parameters:
    _mtrep__GetRepositoriesResponse*    mtrep__GetRepositoriesResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoap12Proxy.h):
@code
  class RepositorySoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoap12Service.h):
@code
  class RepositorySoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	GetRepositories document
//gsoap ns3  service method-encoding:	GetRepositories literal
//gsoap ns3  service method-action:	GetRepositories http://miktex.org/2006/06/repository/GetRepositories
//gsoap ns3  service method-output-action:	GetRepositories http://miktex.org/2008/05/repository/RepositorySoap/GetRepositoriesResponse
int __ns3__GetRepositories(
    _mtrep__GetRepositories*            mtrep__GetRepositories,	///< Request parameter
    _mtrep__GetRepositoriesResponse*    mtrep__GetRepositoriesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__GetListCreationTime                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__GetListCreationTime" of service binding "RepositorySoap12"

/**

Operation details:

Get the creation date and time of the repository list.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2007/03/repository/GetListCreationTime"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/GetListCreationTime"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/GetListCreationTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__GetListCreationTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep2__GetListCreationTime*       mtrep2__GetListCreationTime,
    // response parameters:
    _mtrep2__GetListCreationTimeResponse* mtrep2__GetListCreationTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__GetListCreationTime(
    struct soap *soap,
    // request parameters:
    _mtrep2__GetListCreationTime*       mtrep2__GetListCreationTime,
    // response parameters:
    _mtrep2__GetListCreationTimeResponse* mtrep2__GetListCreationTimeResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoap12Proxy.h):
@code
  class RepositorySoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoap12Service.h):
@code
  class RepositorySoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	GetListCreationTime document
//gsoap ns3  service method-encoding:	GetListCreationTime literal
//gsoap ns3  service method-action:	GetListCreationTime http://miktex.org/2007/03/repository/GetListCreationTime
//gsoap ns3  service method-output-action:	GetListCreationTime http://miktex.org/2008/05/repository/RepositorySoap/GetListCreationTimeResponse
int __ns3__GetListCreationTime(
    _mtrep2__GetListCreationTime*       mtrep2__GetListCreationTime,	///< Request parameter
    _mtrep2__GetListCreationTimeResponse* mtrep2__GetListCreationTimeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__GetRepositories2                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__GetRepositories2" of service binding "RepositorySoap12"

/**

Operation details:

Get a filtered list of known package repositories.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2007/07/repository/GetRepositories2"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories2"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__GetRepositories2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep3__GetRepositories2*          mtrep3__GetRepositories2,
    // response parameters:
    _mtrep3__GetRepositories2Response*  mtrep3__GetRepositories2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__GetRepositories2(
    struct soap *soap,
    // request parameters:
    _mtrep3__GetRepositories2*          mtrep3__GetRepositories2,
    // response parameters:
    _mtrep3__GetRepositories2Response*  mtrep3__GetRepositories2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoap12Proxy.h):
@code
  class RepositorySoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoap12Service.h):
@code
  class RepositorySoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	GetRepositories2 document
//gsoap ns3  service method-encoding:	GetRepositories2 literal
//gsoap ns3  service method-action:	GetRepositories2 http://miktex.org/2007/07/repository/GetRepositories2
//gsoap ns3  service method-output-action:	GetRepositories2 http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories2Response
int __ns3__GetRepositories2(
    _mtrep3__GetRepositories2*          mtrep3__GetRepositories2,	///< Request parameter
    _mtrep3__GetRepositories2Response*  mtrep3__GetRepositories2Response	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__PickRepository2                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__PickRepository2" of service binding "RepositorySoap12"

/**

Operation details:

Pick out a random package repository.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2007/07/repository/PickRepository2"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/PickRepository2"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/PickRepository2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__PickRepository2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep3__PickRepository2*           mtrep3__PickRepository2,
    // response parameters:
    _mtrep3__PickRepository2Response*   mtrep3__PickRepository2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__PickRepository2(
    struct soap *soap,
    // request parameters:
    _mtrep3__PickRepository2*           mtrep3__PickRepository2,
    // response parameters:
    _mtrep3__PickRepository2Response*   mtrep3__PickRepository2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoap12Proxy.h):
@code
  class RepositorySoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoap12Service.h):
@code
  class RepositorySoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	PickRepository2 document
//gsoap ns3  service method-encoding:	PickRepository2 literal
//gsoap ns3  service method-action:	PickRepository2 http://miktex.org/2007/07/repository/PickRepository2
//gsoap ns3  service method-output-action:	PickRepository2 http://miktex.org/2008/05/repository/RepositorySoap/PickRepository2Response
int __ns3__PickRepository2(
    _mtrep3__PickRepository2*           mtrep3__PickRepository2,	///< Request parameter
    _mtrep3__PickRepository2Response*   mtrep3__PickRepository2Response	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__TryGetRepositoryInfo2                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__TryGetRepositoryInfo2" of service binding "RepositorySoap12"

/**

Operation details:

Try to get information about a package repository.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2007/07/repository/TryGetRepositoryInfo2"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/TryGetRepositoryInfo2"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/TryGetRepositoryInfo2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__TryGetRepositoryInfo2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep3__TryGetRepositoryInfo2*     mtrep3__TryGetRepositoryInfo2,
    // response parameters:
    _mtrep3__TryGetRepositoryInfo2Response* mtrep3__TryGetRepositoryInfo2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__TryGetRepositoryInfo2(
    struct soap *soap,
    // request parameters:
    _mtrep3__TryGetRepositoryInfo2*     mtrep3__TryGetRepositoryInfo2,
    // response parameters:
    _mtrep3__TryGetRepositoryInfo2Response* mtrep3__TryGetRepositoryInfo2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoap12Proxy.h):
@code
  class RepositorySoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoap12Service.h):
@code
  class RepositorySoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	TryGetRepositoryInfo2 document
//gsoap ns3  service method-encoding:	TryGetRepositoryInfo2 literal
//gsoap ns3  service method-action:	TryGetRepositoryInfo2 http://miktex.org/2007/07/repository/TryGetRepositoryInfo2
//gsoap ns3  service method-output-action:	TryGetRepositoryInfo2 http://miktex.org/2008/05/repository/RepositorySoap/TryGetRepositoryInfo2Response
int __ns3__TryGetRepositoryInfo2(
    _mtrep3__TryGetRepositoryInfo2*     mtrep3__TryGetRepositoryInfo2,	///< Request parameter
    _mtrep3__TryGetRepositoryInfo2Response* mtrep3__TryGetRepositoryInfo2Response	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__VerifyRepository                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__VerifyRepository" of service binding "RepositorySoap12"

/**

Operation details:

Verify the integrity of a package repository.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2007/10/repository/VerifyRepository"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/VerifyRepository"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/VerifyRepositoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__VerifyRepository(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mtrep4__VerifyRepository*          mtrep4__VerifyRepository,
    // response parameters:
    _mtrep4__VerifyRepositoryResponse*  mtrep4__VerifyRepositoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__VerifyRepository(
    struct soap *soap,
    // request parameters:
    _mtrep4__VerifyRepository*          mtrep4__VerifyRepository,
    // response parameters:
    _mtrep4__VerifyRepositoryResponse*  mtrep4__VerifyRepositoryResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoap12Proxy.h):
@code
  class RepositorySoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoap12Service.h):
@code
  class RepositorySoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	VerifyRepository document
//gsoap ns3  service method-encoding:	VerifyRepository literal
//gsoap ns3  service method-action:	VerifyRepository http://miktex.org/2007/10/repository/VerifyRepository
//gsoap ns3  service method-output-action:	VerifyRepository http://miktex.org/2008/05/repository/RepositorySoap/VerifyRepositoryResponse
int __ns3__VerifyRepository(
    _mtrep4__VerifyRepository*          mtrep4__VerifyRepository,	///< Request parameter
    _mtrep4__VerifyRepositoryResponse*  mtrep4__VerifyRepositoryResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__GetRepositories3                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__GetRepositories3" of service binding "RepositorySoap12"

/**

Operation details:

Get a filtered list of known package repositories.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2008/05/repository/GetRepositories3"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories3"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories3Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__GetRepositories3(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetRepositories3*             ns1__GetRepositories3,
    // response parameters:
    _ns1__GetRepositories3Response*     ns1__GetRepositories3Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__GetRepositories3(
    struct soap *soap,
    // request parameters:
    _ns1__GetRepositories3*             ns1__GetRepositories3,
    // response parameters:
    _ns1__GetRepositories3Response*     ns1__GetRepositories3Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoap12Proxy.h):
@code
  class RepositorySoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoap12Service.h):
@code
  class RepositorySoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	GetRepositories3 document
//gsoap ns3  service method-encoding:	GetRepositories3 literal
//gsoap ns3  service method-action:	GetRepositories3 http://miktex.org/2008/05/repository/GetRepositories3
//gsoap ns3  service method-output-action:	GetRepositories3 http://miktex.org/2008/05/repository/RepositorySoap/GetRepositories3Response
int __ns3__GetRepositories3(
    _ns1__GetRepositories3*             ns1__GetRepositories3,	///< Request parameter
    _ns1__GetRepositories3Response*     ns1__GetRepositories3Response	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns3__PickRepository3                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns3__PickRepository3" of service binding "RepositorySoap12"

/**

Operation details:

Pick out a random package repository.

  - SOAP document/literal style messaging

  - SOAP action: "http://miktex.org/2008/05/repository/PickRepository3"

  - Addressing action: "http://miktex.org/2008/05/repository/RepositorySoap/PickRepository3"

  - Addressing response action: "http://miktex.org/2008/05/repository/RepositorySoap/PickRepository3Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns3__PickRepository3(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__PickRepository3*              ns1__PickRepository3,
    // response parameters:
    _ns1__PickRepository3Response*      ns1__PickRepository3Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns3__PickRepository3(
    struct soap *soap,
    // request parameters:
    _ns1__PickRepository3*              ns1__PickRepository3,
    // response parameters:
    _ns1__PickRepository3Response*      ns1__PickRepository3Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoap12Proxy.h):
@code
  class RepositorySoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoap12Service.h):
@code
  class RepositorySoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns3  service method-style:	PickRepository3 document
//gsoap ns3  service method-encoding:	PickRepository3 literal
//gsoap ns3  service method-action:	PickRepository3 http://miktex.org/2008/05/repository/PickRepository3
//gsoap ns3  service method-output-action:	PickRepository3 http://miktex.org/2008/05/repository/RepositorySoap/PickRepository3Response
int __ns3__PickRepository3(
    _ns1__PickRepository3*              ns1__PickRepository3,	///< Request parameter
    _ns1__PickRepository3Response*      ns1__PickRepository3Response	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section mtrep Top-level root elements of schema "http://miktex.org/2006/06/repository"

  - <mtrep:TryGetRepositoryInfo> @ref _mtrep__TryGetRepositoryInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__TryGetRepositoryInfo(struct soap*, _mtrep__TryGetRepositoryInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__TryGetRepositoryInfo(struct soap*, _mtrep__TryGetRepositoryInfo*);
    @endcode

  - <mtrep:TryGetRepositoryInfoResponse> @ref _mtrep__TryGetRepositoryInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__TryGetRepositoryInfoResponse(struct soap*, _mtrep__TryGetRepositoryInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__TryGetRepositoryInfoResponse(struct soap*, _mtrep__TryGetRepositoryInfoResponse*);
    @endcode

  - <mtrep:PickRepository> @ref _mtrep__PickRepository
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__PickRepository(struct soap*, _mtrep__PickRepository*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__PickRepository(struct soap*, _mtrep__PickRepository*);
    @endcode

  - <mtrep:PickRepositoryResponse> @ref _mtrep__PickRepositoryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__PickRepositoryResponse(struct soap*, _mtrep__PickRepositoryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__PickRepositoryResponse(struct soap*, _mtrep__PickRepositoryResponse*);
    @endcode

  - <mtrep:GetAllRepositories> @ref _mtrep__GetAllRepositories
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__GetAllRepositories(struct soap*, _mtrep__GetAllRepositories*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__GetAllRepositories(struct soap*, _mtrep__GetAllRepositories*);
    @endcode

  - <mtrep:GetAllRepositoriesResponse> @ref _mtrep__GetAllRepositoriesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__GetAllRepositoriesResponse(struct soap*, _mtrep__GetAllRepositoriesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__GetAllRepositoriesResponse(struct soap*, _mtrep__GetAllRepositoriesResponse*);
    @endcode

  - <mtrep:GetRepositories> @ref _mtrep__GetRepositories
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__GetRepositories(struct soap*, _mtrep__GetRepositories*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__GetRepositories(struct soap*, _mtrep__GetRepositories*);
    @endcode

  - <mtrep:GetRepositoriesResponse> @ref _mtrep__GetRepositoriesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__GetRepositoriesResponse(struct soap*, _mtrep__GetRepositoriesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__GetRepositoriesResponse(struct soap*, _mtrep__GetRepositoriesResponse*);
    @endcode

@section mtrep2 Top-level root elements of schema "http://miktex.org/2007/03/repository"

  - <mtrep2:GetListCreationTime> @ref _mtrep2__GetListCreationTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep2__GetListCreationTime(struct soap*, _mtrep2__GetListCreationTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep2__GetListCreationTime(struct soap*, _mtrep2__GetListCreationTime*);
    @endcode

  - <mtrep2:GetListCreationTimeResponse> @ref _mtrep2__GetListCreationTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep2__GetListCreationTimeResponse(struct soap*, _mtrep2__GetListCreationTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep2__GetListCreationTimeResponse(struct soap*, _mtrep2__GetListCreationTimeResponse*);
    @endcode

@section mtrep3 Top-level root elements of schema "http://miktex.org/2007/07/repository"

  - <mtrep3:GetRepositories2> @ref _mtrep3__GetRepositories2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep3__GetRepositories2(struct soap*, _mtrep3__GetRepositories2*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep3__GetRepositories2(struct soap*, _mtrep3__GetRepositories2*);
    @endcode

  - <mtrep3:GetRepositories2Response> @ref _mtrep3__GetRepositories2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep3__GetRepositories2Response(struct soap*, _mtrep3__GetRepositories2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep3__GetRepositories2Response(struct soap*, _mtrep3__GetRepositories2Response*);
    @endcode

  - <mtrep3:PickRepository2> @ref _mtrep3__PickRepository2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep3__PickRepository2(struct soap*, _mtrep3__PickRepository2*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep3__PickRepository2(struct soap*, _mtrep3__PickRepository2*);
    @endcode

  - <mtrep3:PickRepository2Response> @ref _mtrep3__PickRepository2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep3__PickRepository2Response(struct soap*, _mtrep3__PickRepository2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep3__PickRepository2Response(struct soap*, _mtrep3__PickRepository2Response*);
    @endcode

  - <mtrep3:TryGetRepositoryInfo2> @ref _mtrep3__TryGetRepositoryInfo2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep3__TryGetRepositoryInfo2(struct soap*, _mtrep3__TryGetRepositoryInfo2*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep3__TryGetRepositoryInfo2(struct soap*, _mtrep3__TryGetRepositoryInfo2*);
    @endcode

  - <mtrep3:TryGetRepositoryInfo2Response> @ref _mtrep3__TryGetRepositoryInfo2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep3__TryGetRepositoryInfo2Response(struct soap*, _mtrep3__TryGetRepositoryInfo2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep3__TryGetRepositoryInfo2Response(struct soap*, _mtrep3__TryGetRepositoryInfo2Response*);
    @endcode

@section mtrep4 Top-level root elements of schema "http://miktex.org/2007/10/repository"

  - <mtrep4:VerifyRepository> @ref _mtrep4__VerifyRepository
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep4__VerifyRepository(struct soap*, _mtrep4__VerifyRepository*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep4__VerifyRepository(struct soap*, _mtrep4__VerifyRepository*);
    @endcode

  - <mtrep4:VerifyRepositoryResponse> @ref _mtrep4__VerifyRepositoryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep4__VerifyRepositoryResponse(struct soap*, _mtrep4__VerifyRepositoryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep4__VerifyRepositoryResponse(struct soap*, _mtrep4__VerifyRepositoryResponse*);
    @endcode

@section ns1 Top-level root elements of schema "http://miktex.org/2008/05/repository"

  - <ns1:GetRepositories3> @ref _ns1__GetRepositories3
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRepositories3(struct soap*, _ns1__GetRepositories3*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRepositories3(struct soap*, _ns1__GetRepositories3*);
    @endcode

  - <ns1:GetRepositories3Response> @ref _ns1__GetRepositories3Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetRepositories3Response(struct soap*, _ns1__GetRepositories3Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetRepositories3Response(struct soap*, _ns1__GetRepositories3Response*);
    @endcode

  - <ns1:PickRepository3> @ref _ns1__PickRepository3
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PickRepository3(struct soap*, _ns1__PickRepository3*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PickRepository3(struct soap*, _ns1__PickRepository3*);
    @endcode

  - <ns1:PickRepository3Response> @ref _ns1__PickRepository3Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PickRepository3Response(struct soap*, _ns1__PickRepository3Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PickRepository3Response(struct soap*, _ns1__PickRepository3Response*);
    @endcode

*/

/* End of Repository.h */
