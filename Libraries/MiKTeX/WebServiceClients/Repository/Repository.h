// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* Repository.h
   Generated by wsdl2h 1.2.6e from http://api.miktex.org/Repository.asmx?WSDL and typemap.dat
   2006-04-01 17:45:52 GMT
   Copyright (C) 2001-2005 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control schema namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

*/

/******************************************************************************\
 *                                                                            *
 * http://miktex.org/                                                         *
 *                                                                            *
\******************************************************************************/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/

// This service uses SOAP 1.2 namespaces:
//gsoap SOAP-ENV schema namespace:	http://www.w3.org/2003/05/soap-envelope
//gsoap SOAP-ENC schema namespace:	http://www.w3.org/2003/05/soap-encoding

/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

mws = "http://miktex.org/"

*/

//gsoap mws   schema namespace:	http://miktex.org/
//gsoap mws   schema elementForm:	qualified
//gsoap mws   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class mws__RepositoryInfo.
class mws__RepositoryInfo;

//  Forward declaration of class mws__ArrayOfRepositoryInfo.
class mws__ArrayOfRepositoryInfo;

//  Forward declaration of class _mws__TryGetRepositoryInfo.
class _mws__TryGetRepositoryInfo;

//  Forward declaration of class _mws__TryGetRepositoryInfoResponse.
class _mws__TryGetRepositoryInfoResponse;

//  Forward declaration of class _mws__PickRepository.
class _mws__PickRepository;

//  Forward declaration of class _mws__PickRepositoryResponse.
class _mws__PickRepositoryResponse;

//  Forward declaration of class _mws__GetAllRepositories.
class _mws__GetAllRepositories;

//  Forward declaration of class _mws__GetAllRepositoriesResponse.
class _mws__GetAllRepositoriesResponse;

//  Forward declaration of class _mws__GetRepositories.
class _mws__GetRepositories;

//  Forward declaration of class _mws__GetRepositoriesResponse.
class _mws__GetRepositoriesResponse;

/// "http://miktex.org/":Integrities is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'mws__Integrities' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum mws__Integrities
{
	mws__Integrities__Intact,	///< xs:string value="Intact"
	mws__Integrities__Corrupted,	///< xs:string value="Corrupted"
	mws__Integrities__Unknown,	///< xs:string value="Unknown"
};

/// "http://miktex.org/":Levels is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'mws__Levels' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum mws__Levels
{
	mws__Levels__Essential,	///< xs:string value="Essential"
	mws__Levels__Basic,	///< xs:string value="Basic"
	mws__Levels__Advanced,	///< xs:string value="Advanced"
	mws__Levels__Complete,	///< xs:string value="Complete"
};

/// "http://miktex.org/":RepositoryStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'mws__RepositoryStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum mws__RepositoryStatus
{
	mws__RepositoryStatus__Online,	///< xs:string value="Online"
	mws__RepositoryStatus__Offline,	///< xs:string value="Offline"
	mws__RepositoryStatus__Unknown,	///< xs:string value="Unknown"
};

/// "http://miktex.org/":RepositoryInfo is a complexType.
class mws__RepositoryInfo
{ public:
/// Element Country of type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element Date of type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element Delay of type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element Description of type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element Integrity of type "http://miktex.org/":Integrities.
    enum mws__Integrities                Integrity                      1;	///< Required element.
/// Element Level of type "http://miktex.org/":Levels.
    enum mws__Levels                     Level                          1;	///< Required element.
/// Element Status of type "http://miktex.org/":RepositoryStatus.
    enum mws__RepositoryStatus           Status                         1;	///< Required element.
/// Element Url of type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element Version of type xs:int.
    int                                  Version                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://miktex.org/":ArrayOfRepositoryInfo is a complexType.
class mws__ArrayOfRepositoryInfo
{ public:
/// Vector of mws__RepositoryInfo* with length 0..unbounded
    std::vector<mws__RepositoryInfo*   > RepositoryInfo                 0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://miktex.org/":TryGetRepositoryInfo of complexType.

/// "http://miktex.org/":TryGetRepositoryInfo is a complexType.
class _mws__TryGetRepositoryInfo
{ public:
/// Element url of type xs:string.
    std::string*                         url                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://miktex.org/":TryGetRepositoryInfoResponse of complexType.

/// "http://miktex.org/":TryGetRepositoryInfoResponse is a complexType.
class _mws__TryGetRepositoryInfoResponse
{ public:
/// Element TryGetRepositoryInfoResult of type xs:boolean.
    bool                                 TryGetRepositoryInfoResult     1;	///< Required element.
/// Element repositoryInfo of type "http://miktex.org/":RepositoryInfo.
    mws__RepositoryInfo*                 repositoryInfo                 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://miktex.org/":PickRepository of complexType.

/// "http://miktex.org/":PickRepository is a complexType.
class _mws__PickRepository
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://miktex.org/":PickRepositoryResponse of complexType.

/// "http://miktex.org/":PickRepositoryResponse is a complexType.
class _mws__PickRepositoryResponse
{ public:
/// Element PickRepositoryResult of type "http://miktex.org/":RepositoryInfo.
    mws__RepositoryInfo*                 PickRepositoryResult           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://miktex.org/":GetAllRepositories of complexType.

/// "http://miktex.org/":GetAllRepositories is a complexType.
class _mws__GetAllRepositories
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://miktex.org/":GetAllRepositoriesResponse of complexType.

/// "http://miktex.org/":GetAllRepositoriesResponse is a complexType.
class _mws__GetAllRepositoriesResponse
{ public:
/// Element GetAllRepositoriesResult of type "http://miktex.org/":ArrayOfRepositoryInfo.
    mws__ArrayOfRepositoryInfo*          GetAllRepositoriesResult       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://miktex.org/":GetRepositories of complexType.

/// "http://miktex.org/":GetRepositories is a complexType.
class _mws__GetRepositories
{ public:
/// Element onlyOnline of type xs:boolean.
    bool                                 onlyOnline                     1;	///< Required element.
/// Element noCorrupted of type xs:boolean.
    bool                                 noCorrupted                    1;	///< Required element.
/// Element maxDelay of type xs:int.
    int                                  maxDelay                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://miktex.org/":GetRepositoriesResponse of complexType.

/// "http://miktex.org/":GetRepositoriesResponse is a complexType.
class _mws__GetRepositoriesResponse
{ public:
/// Element GetRepositoriesResult of type "http://miktex.org/":ArrayOfRepositoryInfo.
    mws__ArrayOfRepositoryInfo*          GetRepositoriesResult          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap mws  service name:	RepositorySoap 
//gsoap mws  service type:	RepositorySoap 
//gsoap mws  service port:	http://api.miktex.org/Repository.asmx 
//gsoap mws  service namespace:	http://miktex.org/ 
//gsoap mws  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Bindings
  - @ref RepositorySoap

*/

/**

@page RepositorySoap Binding "RepositorySoap"

@section RepositorySoap_operations Operations of Binding  "RepositorySoap"
  - @ref __mws__TryGetRepositoryInfo
  - @ref __mws__PickRepository
  - @ref __mws__GetAllRepositories
  - @ref __mws__GetRepositories
  - @ref __mws__TryGetRepositoryInfo_
  - @ref __mws__PickRepository_
  - @ref __mws__GetAllRepositories_
  - @ref __mws__GetRepositories_

@section RepositorySoap_ports Endpoints of Binding  "RepositorySoap"
  - http://api.miktex.org/Repository.asmx

*/

/******************************************************************************\
 *                                                                            *
 * RepositorySoap                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __mws__TryGetRepositoryInfo                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__mws__TryGetRepositoryInfo" of service binding "RepositorySoap"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://miktex.org/TryGetRepositoryInfo"

C stub function (defined in soapClient.c[pp] after running soapcpp2):
@code
  int soap_call___mws__TryGetRepositoryInfo(struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mws__TryGetRepositoryInfo*         mws__TryGetRepositoryInfo,
    // response parameters:
    _mws__TryGetRepositoryInfoResponse* mws__TryGetRepositoryInfoResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
  class RepositorySoap;

*/

//gsoap mws  service method-style:	TryGetRepositoryInfo document
//gsoap mws  service method-encoding:	TryGetRepositoryInfo literal
//gsoap mws  service method-action:	TryGetRepositoryInfo http://miktex.org/TryGetRepositoryInfo
int __mws__TryGetRepositoryInfo(
    _mws__TryGetRepositoryInfo*         mws__TryGetRepositoryInfo,	///< Request parameter
    _mws__TryGetRepositoryInfoResponse* mws__TryGetRepositoryInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __mws__PickRepository                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__mws__PickRepository" of service binding "RepositorySoap"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://miktex.org/PickRepository"

C stub function (defined in soapClient.c[pp] after running soapcpp2):
@code
  int soap_call___mws__PickRepository(struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mws__PickRepository*               mws__PickRepository,
    // response parameters:
    _mws__PickRepositoryResponse*       mws__PickRepositoryResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
  class RepositorySoap;

*/

//gsoap mws  service method-style:	PickRepository document
//gsoap mws  service method-encoding:	PickRepository literal
//gsoap mws  service method-action:	PickRepository http://miktex.org/PickRepository
int __mws__PickRepository(
    _mws__PickRepository*               mws__PickRepository,	///< Request parameter
    _mws__PickRepositoryResponse*       mws__PickRepositoryResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __mws__GetAllRepositories                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__mws__GetAllRepositories" of service binding "RepositorySoap"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://miktex.org/GetAllRepositories"

C stub function (defined in soapClient.c[pp] after running soapcpp2):
@code
  int soap_call___mws__GetAllRepositories(struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mws__GetAllRepositories*           mws__GetAllRepositories,
    // response parameters:
    _mws__GetAllRepositoriesResponse*   mws__GetAllRepositoriesResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
  class RepositorySoap;

*/

//gsoap mws  service method-style:	GetAllRepositories document
//gsoap mws  service method-encoding:	GetAllRepositories literal
//gsoap mws  service method-action:	GetAllRepositories http://miktex.org/GetAllRepositories
int __mws__GetAllRepositories(
    _mws__GetAllRepositories*           mws__GetAllRepositories,	///< Request parameter
    _mws__GetAllRepositoriesResponse*   mws__GetAllRepositoriesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __mws__GetRepositories                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__mws__GetRepositories" of service binding "RepositorySoap"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://miktex.org/GetRepositories"

C stub function (defined in soapClient.c[pp] after running soapcpp2):
@code
  int soap_call___mws__GetRepositories(struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mws__GetRepositories*              mws__GetRepositories,
    // response parameters:
    _mws__GetRepositoriesResponse*      mws__GetRepositoriesResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
  class RepositorySoap;

*/

//gsoap mws  service method-style:	GetRepositories document
//gsoap mws  service method-encoding:	GetRepositories literal
//gsoap mws  service method-action:	GetRepositories http://miktex.org/GetRepositories
int __mws__GetRepositories(
    _mws__GetRepositories*              mws__GetRepositories,	///< Request parameter
    _mws__GetRepositoriesResponse*      mws__GetRepositoriesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __mws__TryGetRepositoryInfo_                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__mws__TryGetRepositoryInfo_" of service binding "RepositorySoap"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://miktex.org/TryGetRepositoryInfo"

C stub function (defined in soapClient.c[pp] after running soapcpp2):
@code
  int soap_call___mws__TryGetRepositoryInfo_(struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mws__TryGetRepositoryInfo*         mws__TryGetRepositoryInfo,
    // response parameters:
    _mws__TryGetRepositoryInfoResponse* mws__TryGetRepositoryInfoResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
  class RepositorySoap;

*/

//gsoap mws  service method-style:	TryGetRepositoryInfo_ document
//gsoap mws  service method-encoding:	TryGetRepositoryInfo_ literal
//gsoap mws  service method-action:	TryGetRepositoryInfo_ http://miktex.org/TryGetRepositoryInfo
int __mws__TryGetRepositoryInfo_(
    _mws__TryGetRepositoryInfo*         mws__TryGetRepositoryInfo,	///< Request parameter
    _mws__TryGetRepositoryInfoResponse* mws__TryGetRepositoryInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __mws__PickRepository_                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__mws__PickRepository_" of service binding "RepositorySoap"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://miktex.org/PickRepository"

C stub function (defined in soapClient.c[pp] after running soapcpp2):
@code
  int soap_call___mws__PickRepository_(struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mws__PickRepository*               mws__PickRepository,
    // response parameters:
    _mws__PickRepositoryResponse*       mws__PickRepositoryResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
  class RepositorySoap;

*/

//gsoap mws  service method-style:	PickRepository_ document
//gsoap mws  service method-encoding:	PickRepository_ literal
//gsoap mws  service method-action:	PickRepository_ http://miktex.org/PickRepository
int __mws__PickRepository_(
    _mws__PickRepository*               mws__PickRepository,	///< Request parameter
    _mws__PickRepositoryResponse*       mws__PickRepositoryResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __mws__GetAllRepositories_                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__mws__GetAllRepositories_" of service binding "RepositorySoap"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://miktex.org/GetAllRepositories"

C stub function (defined in soapClient.c[pp] after running soapcpp2):
@code
  int soap_call___mws__GetAllRepositories_(struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mws__GetAllRepositories*           mws__GetAllRepositories,
    // response parameters:
    _mws__GetAllRepositoriesResponse*   mws__GetAllRepositoriesResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
  class RepositorySoap;

*/

//gsoap mws  service method-style:	GetAllRepositories_ document
//gsoap mws  service method-encoding:	GetAllRepositories_ literal
//gsoap mws  service method-action:	GetAllRepositories_ http://miktex.org/GetAllRepositories
int __mws__GetAllRepositories_(
    _mws__GetAllRepositories*           mws__GetAllRepositories,	///< Request parameter
    _mws__GetAllRepositoriesResponse*   mws__GetAllRepositoriesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __mws__GetRepositories_                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__mws__GetRepositories_" of service binding "RepositorySoap"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://miktex.org/GetRepositories"

C stub function (defined in soapClient.c[pp] after running soapcpp2):
@code
  int soap_call___mws__GetRepositories_(struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mws__GetRepositories*              mws__GetRepositories,
    // response parameters:
    _mws__GetRepositoriesResponse*      mws__GetRepositoriesResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
  class RepositorySoap;

*/

//gsoap mws  service method-style:	GetRepositories_ document
//gsoap mws  service method-encoding:	GetRepositories_ literal
//gsoap mws  service method-action:	GetRepositories_ http://miktex.org/GetRepositories
int __mws__GetRepositories_(
    _mws__GetRepositories*              mws__GetRepositories,	///< Request parameter
    _mws__GetRepositoriesResponse*      mws__GetRepositoriesResponse	///< Response parameter
);

/* End of Repository.h */
