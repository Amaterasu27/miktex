/* repositoryStub.h
   Generated by gSOAP 2.7.8c from Repository.h
   Copyright (C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef repositoryStub_H
#define repositoryStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_mtrep__Integrities
#define SOAP_TYPE_mtrep__Integrities (17)
/* mtrep:Integrities */
enum mtrep__Integrities {mtrep__Integrities__Intact = 0, mtrep__Integrities__Corrupted = 1, mtrep__Integrities__Unknown = 2};
#endif

#ifndef SOAP_TYPE_mtrep__Levels
#define SOAP_TYPE_mtrep__Levels (18)
/* mtrep:Levels */
enum mtrep__Levels {mtrep__Levels__Essential = 0, mtrep__Levels__Basic = 1, mtrep__Levels__Advanced = 2, mtrep__Levels__Complete = 3};
#endif

#ifndef SOAP_TYPE_mtrep__RepositoryStatus
#define SOAP_TYPE_mtrep__RepositoryStatus (19)
/* mtrep:RepositoryStatus */
enum mtrep__RepositoryStatus {mtrep__RepositoryStatus__Online = 0, mtrep__RepositoryStatus__Offline = 1, mtrep__RepositoryStatus__Unknown = 2};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do no redeclare */

#endif



#ifndef SOAP_TYPE_mtrep__RepositoryInfo
#define SOAP_TYPE_mtrep__RepositoryInfo (7)
/* mtrep:RepositoryInfo */
class SOAP_CMAC mtrep__RepositoryInfo
{
public:
	std::string *Country;	/* optional element of type xsd:string */
	int Date;	/* required element of type xsd:int */
	int Delay;	/* required element of type xsd:int */
	std::string *Description;	/* optional element of type xsd:string */
	enum mtrep__Integrities Integrity;	/* required element of type mtrep:Integrities */
	enum mtrep__Levels Level;	/* required element of type mtrep:Levels */
	enum mtrep__RepositoryStatus Status;	/* required element of type mtrep:RepositoryStatus */
	std::string *Url;	/* optional element of type xsd:string */
	int Version;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_mtrep__RepositoryInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         mtrep__RepositoryInfo() : Country(NULL), Description(NULL), Url(NULL), soap(NULL) { }
	virtual ~mtrep__RepositoryInfo() { }
};
#endif

#ifndef SOAP_TYPE_mtrep__ArrayOfRepositoryInfo
#define SOAP_TYPE_mtrep__ArrayOfRepositoryInfo (8)
/* mtrep:ArrayOfRepositoryInfo */
class SOAP_CMAC mtrep__ArrayOfRepositoryInfo
{
public:
	std::vector<mtrep__RepositoryInfo * >RepositoryInfo;	/* optional element of type mtrep:RepositoryInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_mtrep__ArrayOfRepositoryInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         mtrep__ArrayOfRepositoryInfo() : soap(NULL) { }
	virtual ~mtrep__ArrayOfRepositoryInfo() { }
};
#endif

#ifndef SOAP_TYPE__mtrep__TryGetRepositoryInfo
#define SOAP_TYPE__mtrep__TryGetRepositoryInfo (9)
/* mtrep:TryGetRepositoryInfo */
class SOAP_CMAC _mtrep__TryGetRepositoryInfo
{
public:
	std::string *url;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE__mtrep__TryGetRepositoryInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _mtrep__TryGetRepositoryInfo() : url(NULL), soap(NULL) { }
	virtual ~_mtrep__TryGetRepositoryInfo() { }
};
#endif

#ifndef SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse
#define SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse (10)
/* mtrep:TryGetRepositoryInfoResponse */
class SOAP_CMAC _mtrep__TryGetRepositoryInfoResponse
{
public:
	bool TryGetRepositoryInfoResult;	/* RPC return element */	/* required element of type xsd:boolean */
	mtrep__RepositoryInfo *repositoryInfo;	/* optional element of type mtrep:RepositoryInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _mtrep__TryGetRepositoryInfoResponse() : repositoryInfo(NULL), soap(NULL) { }
	virtual ~_mtrep__TryGetRepositoryInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__mtrep__PickRepository
#define SOAP_TYPE__mtrep__PickRepository (11)
/* mtrep:PickRepository */
class SOAP_CMAC _mtrep__PickRepository
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE__mtrep__PickRepository */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _mtrep__PickRepository() : soap(NULL) { }
	virtual ~_mtrep__PickRepository() { }
};
#endif

#ifndef SOAP_TYPE__mtrep__PickRepositoryResponse
#define SOAP_TYPE__mtrep__PickRepositoryResponse (12)
/* mtrep:PickRepositoryResponse */
class SOAP_CMAC _mtrep__PickRepositoryResponse
{
public:
	mtrep__RepositoryInfo *PickRepositoryResult;	/* RPC return element */	/* optional element of type mtrep:RepositoryInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE__mtrep__PickRepositoryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _mtrep__PickRepositoryResponse() : PickRepositoryResult(NULL), soap(NULL) { }
	virtual ~_mtrep__PickRepositoryResponse() { }
};
#endif

#ifndef SOAP_TYPE__mtrep__GetAllRepositories
#define SOAP_TYPE__mtrep__GetAllRepositories (13)
/* mtrep:GetAllRepositories */
class SOAP_CMAC _mtrep__GetAllRepositories
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__mtrep__GetAllRepositories */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _mtrep__GetAllRepositories() : soap(NULL) { }
	virtual ~_mtrep__GetAllRepositories() { }
};
#endif

#ifndef SOAP_TYPE__mtrep__GetAllRepositoriesResponse
#define SOAP_TYPE__mtrep__GetAllRepositoriesResponse (14)
/* mtrep:GetAllRepositoriesResponse */
class SOAP_CMAC _mtrep__GetAllRepositoriesResponse
{
public:
	mtrep__ArrayOfRepositoryInfo *GetAllRepositoriesResult;	/* RPC return element */	/* optional element of type mtrep:ArrayOfRepositoryInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE__mtrep__GetAllRepositoriesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _mtrep__GetAllRepositoriesResponse() : GetAllRepositoriesResult(NULL), soap(NULL) { }
	virtual ~_mtrep__GetAllRepositoriesResponse() { }
};
#endif

#ifndef SOAP_TYPE__mtrep__GetRepositories
#define SOAP_TYPE__mtrep__GetRepositories (15)
/* mtrep:GetRepositories */
class SOAP_CMAC _mtrep__GetRepositories
{
public:
	bool onlyOnline;	/* required element of type xsd:boolean */
	bool noCorrupted;	/* required element of type xsd:boolean */
	int maxDelay;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__mtrep__GetRepositories */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _mtrep__GetRepositories() : soap(NULL) { }
	virtual ~_mtrep__GetRepositories() { }
};
#endif

#ifndef SOAP_TYPE__mtrep__GetRepositoriesResponse
#define SOAP_TYPE__mtrep__GetRepositoriesResponse (16)
/* mtrep:GetRepositoriesResponse */
class SOAP_CMAC _mtrep__GetRepositoriesResponse
{
public:
	mtrep__ArrayOfRepositoryInfo *GetRepositoriesResult;	/* RPC return element */	/* optional element of type mtrep:ArrayOfRepositoryInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE__mtrep__GetRepositoriesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _mtrep__GetRepositoriesResponse() : GetRepositoriesResult(NULL), soap(NULL) { }
	virtual ~_mtrep__GetRepositoriesResponse() { }
};
#endif

#ifndef SOAP_TYPE___mtrep__TryGetRepositoryInfo
#define SOAP_TYPE___mtrep__TryGetRepositoryInfo (31)
/* Operation wrapper: */
struct __mtrep__TryGetRepositoryInfo
{
public:
	_mtrep__TryGetRepositoryInfo *mtrep__TryGetRepositoryInfo;	/* optional element of type mtrep:TryGetRepositoryInfo */
};
#endif

#ifndef SOAP_TYPE___mtrep__PickRepository
#define SOAP_TYPE___mtrep__PickRepository (35)
/* Operation wrapper: */
struct __mtrep__PickRepository
{
public:
	_mtrep__PickRepository *mtrep__PickRepository;	/* optional element of type mtrep:PickRepository */
};
#endif

#ifndef SOAP_TYPE___mtrep__GetAllRepositories
#define SOAP_TYPE___mtrep__GetAllRepositories (39)
/* Operation wrapper: */
struct __mtrep__GetAllRepositories
{
public:
	_mtrep__GetAllRepositories *mtrep__GetAllRepositories;	/* optional element of type mtrep:GetAllRepositories */
};
#endif

#ifndef SOAP_TYPE___mtrep__GetRepositories
#define SOAP_TYPE___mtrep__GetRepositories (43)
/* Operation wrapper: */
struct __mtrep__GetRepositories
{
public:
	_mtrep__GetRepositories *mtrep__GetRepositories;	/* optional element of type mtrep:GetRepositories */
};
#endif

#ifndef SOAP_TYPE___mtrep__TryGetRepositoryInfo_
#define SOAP_TYPE___mtrep__TryGetRepositoryInfo_ (45)
/* Operation wrapper: */
struct __mtrep__TryGetRepositoryInfo_
{
public:
	_mtrep__TryGetRepositoryInfo *mtrep__TryGetRepositoryInfo;	/* optional element of type mtrep:TryGetRepositoryInfo */
};
#endif

#ifndef SOAP_TYPE___mtrep__PickRepository_
#define SOAP_TYPE___mtrep__PickRepository_ (47)
/* Operation wrapper: */
struct __mtrep__PickRepository_
{
public:
	_mtrep__PickRepository *mtrep__PickRepository;	/* optional element of type mtrep:PickRepository */
};
#endif

#ifndef SOAP_TYPE___mtrep__GetAllRepositories_
#define SOAP_TYPE___mtrep__GetAllRepositories_ (49)
/* Operation wrapper: */
struct __mtrep__GetAllRepositories_
{
public:
	_mtrep__GetAllRepositories *mtrep__GetAllRepositories;	/* optional element of type mtrep:GetAllRepositories */
};
#endif

#ifndef SOAP_TYPE___mtrep__GetRepositories_
#define SOAP_TYPE___mtrep__GetRepositories_ (51)
/* Operation wrapper: */
struct __mtrep__GetRepositories_
{
public:
	_mtrep__GetRepositories *mtrep__GetRepositories;	/* optional element of type mtrep:GetRepositories */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (54)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	void *dummy;	/* transient */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (55)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (57)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (58)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (59)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of repositoryStub.h */
