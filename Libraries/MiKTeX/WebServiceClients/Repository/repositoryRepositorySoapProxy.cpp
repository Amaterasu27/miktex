/* repositoryRepositorySoapProxy.cpp
   Generated by gSOAP 2.7.9d from C:/work3/miktex-2.6/Libraries/MiKTeX/WebServiceClients/Repository/Repository.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "repositoryRepositorySoapProxy.h"

RepositorySoapProxy::RepositorySoapProxy()
{	RepositorySoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

RepositorySoapProxy::RepositorySoapProxy(soap_mode iomode)
{	RepositorySoapProxy_init(iomode, iomode);
}

RepositorySoapProxy::RepositorySoapProxy(soap_mode imode, soap_mode omode)
{	RepositorySoapProxy_init(imode, omode);
}

void RepositorySoapProxy::RepositorySoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_init2(this, imode, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://www.w3.org/2003/05/soap-envelope", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://www.w3.org/2003/05/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"mtrep", "http://miktex.org/2006/06/repository", NULL, NULL},
	{"ns1", "http://miktex.org/2007/03/repository", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
};

RepositorySoapProxy::~RepositorySoapProxy()
{	soap_destroy(this);
	soap_end(this);
	soap_done(this);
};

int RepositorySoapProxy::TryGetRepositoryInfo(_mtrep__TryGetRepositoryInfo *mtrep__TryGetRepositoryInfo, _mtrep__TryGetRepositoryInfoResponse *mtrep__TryGetRepositoryInfoResponse)
{	struct soap *soap = this;
	struct __ns1__TryGetRepositoryInfo soap_tmp___ns1__TryGetRepositoryInfo;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/TryGetRepositoryInfo";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__TryGetRepositoryInfo.mtrep__TryGetRepositoryInfo = mtrep__TryGetRepositoryInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__TryGetRepositoryInfo(soap, &soap_tmp___ns1__TryGetRepositoryInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__TryGetRepositoryInfo(soap, &soap_tmp___ns1__TryGetRepositoryInfo, "-ns1:TryGetRepositoryInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__TryGetRepositoryInfo(soap, &soap_tmp___ns1__TryGetRepositoryInfo, "-ns1:TryGetRepositoryInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__TryGetRepositoryInfoResponse)
		return soap_closesock(soap);
	mtrep__TryGetRepositoryInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__TryGetRepositoryInfoResponse->soap_get(soap, "mtrep:TryGetRepositoryInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository(_mtrep__PickRepository *mtrep__PickRepository, _mtrep__PickRepositoryResponse *mtrep__PickRepositoryResponse)
{	struct soap *soap = this;
	struct __ns1__PickRepository soap_tmp___ns1__PickRepository;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/PickRepository";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__PickRepository.mtrep__PickRepository = mtrep__PickRepository;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__PickRepository(soap, &soap_tmp___ns1__PickRepository);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PickRepository(soap, &soap_tmp___ns1__PickRepository, "-ns1:PickRepository", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PickRepository(soap, &soap_tmp___ns1__PickRepository, "-ns1:PickRepository", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__PickRepositoryResponse)
		return soap_closesock(soap);
	mtrep__PickRepositoryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__PickRepositoryResponse->soap_get(soap, "mtrep:PickRepositoryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetAllRepositories(_mtrep__GetAllRepositories *mtrep__GetAllRepositories, _mtrep__GetAllRepositoriesResponse *mtrep__GetAllRepositoriesResponse)
{	struct soap *soap = this;
	struct __ns1__GetAllRepositories soap_tmp___ns1__GetAllRepositories;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/GetAllRepositories";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetAllRepositories.mtrep__GetAllRepositories = mtrep__GetAllRepositories;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllRepositories(soap, &soap_tmp___ns1__GetAllRepositories);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllRepositories(soap, &soap_tmp___ns1__GetAllRepositories, "-ns1:GetAllRepositories", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllRepositories(soap, &soap_tmp___ns1__GetAllRepositories, "-ns1:GetAllRepositories", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__GetAllRepositoriesResponse)
		return soap_closesock(soap);
	mtrep__GetAllRepositoriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__GetAllRepositoriesResponse->soap_get(soap, "mtrep:GetAllRepositoriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories(_mtrep__GetRepositories *mtrep__GetRepositories, _mtrep__GetRepositoriesResponse *mtrep__GetRepositoriesResponse)
{	struct soap *soap = this;
	struct __ns1__GetRepositories soap_tmp___ns1__GetRepositories;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/GetRepositories";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetRepositories.mtrep__GetRepositories = mtrep__GetRepositories;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetRepositories(soap, &soap_tmp___ns1__GetRepositories);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetRepositories(soap, &soap_tmp___ns1__GetRepositories, "-ns1:GetRepositories", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetRepositories(soap, &soap_tmp___ns1__GetRepositories, "-ns1:GetRepositories", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__GetRepositoriesResponse)
		return soap_closesock(soap);
	mtrep__GetRepositoriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__GetRepositoriesResponse->soap_get(soap, "mtrep:GetRepositoriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetListCreationTime(_ns1__GetListCreationTime *ns1__GetListCreationTime, _ns1__GetListCreationTimeResponse *ns1__GetListCreationTimeResponse)
{	struct soap *soap = this;
	struct __ns1__GetListCreationTime soap_tmp___ns1__GetListCreationTime;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2007/03/repository/GetListCreationTime";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetListCreationTime.ns1__GetListCreationTime = ns1__GetListCreationTime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetListCreationTime(soap, &soap_tmp___ns1__GetListCreationTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetListCreationTime(soap, &soap_tmp___ns1__GetListCreationTime, "-ns1:GetListCreationTime", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetListCreationTime(soap, &soap_tmp___ns1__GetListCreationTime, "-ns1:GetListCreationTime", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetListCreationTimeResponse)
		return soap_closesock(soap);
	ns1__GetListCreationTimeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetListCreationTimeResponse->soap_get(soap, "ns1:GetListCreationTimeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::TryGetRepositoryInfo_(_mtrep__TryGetRepositoryInfo *mtrep__TryGetRepositoryInfo, _mtrep__TryGetRepositoryInfoResponse *mtrep__TryGetRepositoryInfoResponse)
{	struct soap *soap = this;
	struct __ns1__TryGetRepositoryInfo_ soap_tmp___ns1__TryGetRepositoryInfo_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/TryGetRepositoryInfo";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__TryGetRepositoryInfo_.mtrep__TryGetRepositoryInfo = mtrep__TryGetRepositoryInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__TryGetRepositoryInfo_(soap, &soap_tmp___ns1__TryGetRepositoryInfo_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__TryGetRepositoryInfo_(soap, &soap_tmp___ns1__TryGetRepositoryInfo_, "-ns1:TryGetRepositoryInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__TryGetRepositoryInfo_(soap, &soap_tmp___ns1__TryGetRepositoryInfo_, "-ns1:TryGetRepositoryInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__TryGetRepositoryInfoResponse)
		return soap_closesock(soap);
	mtrep__TryGetRepositoryInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__TryGetRepositoryInfoResponse->soap_get(soap, "mtrep:TryGetRepositoryInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository_(_mtrep__PickRepository *mtrep__PickRepository, _mtrep__PickRepositoryResponse *mtrep__PickRepositoryResponse)
{	struct soap *soap = this;
	struct __ns1__PickRepository_ soap_tmp___ns1__PickRepository_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/PickRepository";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__PickRepository_.mtrep__PickRepository = mtrep__PickRepository;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__PickRepository_(soap, &soap_tmp___ns1__PickRepository_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PickRepository_(soap, &soap_tmp___ns1__PickRepository_, "-ns1:PickRepository", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PickRepository_(soap, &soap_tmp___ns1__PickRepository_, "-ns1:PickRepository", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__PickRepositoryResponse)
		return soap_closesock(soap);
	mtrep__PickRepositoryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__PickRepositoryResponse->soap_get(soap, "mtrep:PickRepositoryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetAllRepositories_(_mtrep__GetAllRepositories *mtrep__GetAllRepositories, _mtrep__GetAllRepositoriesResponse *mtrep__GetAllRepositoriesResponse)
{	struct soap *soap = this;
	struct __ns1__GetAllRepositories_ soap_tmp___ns1__GetAllRepositories_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/GetAllRepositories";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetAllRepositories_.mtrep__GetAllRepositories = mtrep__GetAllRepositories;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAllRepositories_(soap, &soap_tmp___ns1__GetAllRepositories_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAllRepositories_(soap, &soap_tmp___ns1__GetAllRepositories_, "-ns1:GetAllRepositories", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAllRepositories_(soap, &soap_tmp___ns1__GetAllRepositories_, "-ns1:GetAllRepositories", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__GetAllRepositoriesResponse)
		return soap_closesock(soap);
	mtrep__GetAllRepositoriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__GetAllRepositoriesResponse->soap_get(soap, "mtrep:GetAllRepositoriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories_(_mtrep__GetRepositories *mtrep__GetRepositories, _mtrep__GetRepositoriesResponse *mtrep__GetRepositoriesResponse)
{	struct soap *soap = this;
	struct __ns1__GetRepositories_ soap_tmp___ns1__GetRepositories_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/GetRepositories";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetRepositories_.mtrep__GetRepositories = mtrep__GetRepositories;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetRepositories_(soap, &soap_tmp___ns1__GetRepositories_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetRepositories_(soap, &soap_tmp___ns1__GetRepositories_, "-ns1:GetRepositories", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetRepositories_(soap, &soap_tmp___ns1__GetRepositories_, "-ns1:GetRepositories", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__GetRepositoriesResponse)
		return soap_closesock(soap);
	mtrep__GetRepositoriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__GetRepositoriesResponse->soap_get(soap, "mtrep:GetRepositoriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetListCreationTime_(_ns1__GetListCreationTime *ns1__GetListCreationTime, _ns1__GetListCreationTimeResponse *ns1__GetListCreationTimeResponse)
{	struct soap *soap = this;
	struct __ns1__GetListCreationTime_ soap_tmp___ns1__GetListCreationTime_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2007/03/repository/GetListCreationTime";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetListCreationTime_.ns1__GetListCreationTime = ns1__GetListCreationTime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetListCreationTime_(soap, &soap_tmp___ns1__GetListCreationTime_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetListCreationTime_(soap, &soap_tmp___ns1__GetListCreationTime_, "-ns1:GetListCreationTime", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetListCreationTime_(soap, &soap_tmp___ns1__GetListCreationTime_, "-ns1:GetListCreationTime", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetListCreationTimeResponse)
		return soap_closesock(soap);
	ns1__GetListCreationTimeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetListCreationTimeResponse->soap_get(soap, "ns1:GetListCreationTimeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
