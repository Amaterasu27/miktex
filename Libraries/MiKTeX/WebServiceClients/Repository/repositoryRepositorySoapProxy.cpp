/* repositoryRepositorySoapProxy.cpp
   Generated by gSOAP 2.7.17 from C:/work3/miktex-2.9/Libraries/MiKTeX/WebServiceClients/Repository/Repository.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "repositoryRepositorySoapProxy.h"

RepositorySoapProxy::RepositorySoapProxy()
{	RepositorySoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

RepositorySoapProxy::RepositorySoapProxy(const struct soap &_soap) : soap(_soap)
{ }

RepositorySoapProxy::RepositorySoapProxy(soap_mode iomode)
{	RepositorySoapProxy_init(iomode, iomode);
}

RepositorySoapProxy::RepositorySoapProxy(soap_mode imode, soap_mode omode)
{	RepositorySoapProxy_init(imode, omode);
}

void RepositorySoapProxy::RepositorySoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://www.w3.org/2003/05/soap-envelope", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://www.w3.org/2003/05/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"mtrep", "http://miktex.org/2006/06/repository", NULL, NULL},
	{"mtrep2", "http://miktex.org/2007/03/repository", NULL, NULL},
	{"mtrep3", "http://miktex.org/2007/07/repository", NULL, NULL},
	{"mtrep4", "http://miktex.org/2007/10/repository", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
}

RepositorySoapProxy::~RepositorySoapProxy()
{ }

void RepositorySoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void RepositorySoapProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *RepositorySoapProxy::soap_fault()
{	return this->fault;
}

const char *RepositorySoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *RepositorySoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int RepositorySoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

void RepositorySoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void RepositorySoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *RepositorySoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int RepositorySoapProxy::TryGetRepositoryInfo(_mtrep__TryGetRepositoryInfo *mtrep__TryGetRepositoryInfo, _mtrep__TryGetRepositoryInfoResponse *mtrep__TryGetRepositoryInfoResponse)
{	struct soap *soap = this;
	struct __mtrep4__TryGetRepositoryInfo soap_tmp___mtrep4__TryGetRepositoryInfo;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/TryGetRepositoryInfo";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__TryGetRepositoryInfo.mtrep__TryGetRepositoryInfo = mtrep__TryGetRepositoryInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__TryGetRepositoryInfo(soap, &soap_tmp___mtrep4__TryGetRepositoryInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__TryGetRepositoryInfo(soap, &soap_tmp___mtrep4__TryGetRepositoryInfo, "-mtrep4:TryGetRepositoryInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__TryGetRepositoryInfo(soap, &soap_tmp___mtrep4__TryGetRepositoryInfo, "-mtrep4:TryGetRepositoryInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__TryGetRepositoryInfoResponse)
		return soap_closesock(soap);
	mtrep__TryGetRepositoryInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__TryGetRepositoryInfoResponse->soap_get(soap, "mtrep:TryGetRepositoryInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository(_mtrep__PickRepository *mtrep__PickRepository, _mtrep__PickRepositoryResponse *mtrep__PickRepositoryResponse)
{	struct soap *soap = this;
	struct __mtrep4__PickRepository soap_tmp___mtrep4__PickRepository;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/PickRepository";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__PickRepository.mtrep__PickRepository = mtrep__PickRepository;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__PickRepository(soap, &soap_tmp___mtrep4__PickRepository);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__PickRepository(soap, &soap_tmp___mtrep4__PickRepository, "-mtrep4:PickRepository", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__PickRepository(soap, &soap_tmp___mtrep4__PickRepository, "-mtrep4:PickRepository", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__PickRepositoryResponse)
		return soap_closesock(soap);
	mtrep__PickRepositoryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__PickRepositoryResponse->soap_get(soap, "mtrep:PickRepositoryResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetAllRepositories(_mtrep__GetAllRepositories *mtrep__GetAllRepositories, _mtrep__GetAllRepositoriesResponse *mtrep__GetAllRepositoriesResponse)
{	struct soap *soap = this;
	struct __mtrep4__GetAllRepositories soap_tmp___mtrep4__GetAllRepositories;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/GetAllRepositories";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__GetAllRepositories.mtrep__GetAllRepositories = mtrep__GetAllRepositories;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__GetAllRepositories(soap, &soap_tmp___mtrep4__GetAllRepositories);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__GetAllRepositories(soap, &soap_tmp___mtrep4__GetAllRepositories, "-mtrep4:GetAllRepositories", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__GetAllRepositories(soap, &soap_tmp___mtrep4__GetAllRepositories, "-mtrep4:GetAllRepositories", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__GetAllRepositoriesResponse)
		return soap_closesock(soap);
	mtrep__GetAllRepositoriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__GetAllRepositoriesResponse->soap_get(soap, "mtrep:GetAllRepositoriesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories(_mtrep__GetRepositories *mtrep__GetRepositories, _mtrep__GetRepositoriesResponse *mtrep__GetRepositoriesResponse)
{	struct soap *soap = this;
	struct __mtrep4__GetRepositories soap_tmp___mtrep4__GetRepositories;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/GetRepositories";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__GetRepositories.mtrep__GetRepositories = mtrep__GetRepositories;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__GetRepositories(soap, &soap_tmp___mtrep4__GetRepositories);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__GetRepositories(soap, &soap_tmp___mtrep4__GetRepositories, "-mtrep4:GetRepositories", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__GetRepositories(soap, &soap_tmp___mtrep4__GetRepositories, "-mtrep4:GetRepositories", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__GetRepositoriesResponse)
		return soap_closesock(soap);
	mtrep__GetRepositoriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__GetRepositoriesResponse->soap_get(soap, "mtrep:GetRepositoriesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetListCreationTime(_mtrep2__GetListCreationTime *mtrep2__GetListCreationTime, _mtrep2__GetListCreationTimeResponse *mtrep2__GetListCreationTimeResponse)
{	struct soap *soap = this;
	struct __mtrep4__GetListCreationTime soap_tmp___mtrep4__GetListCreationTime;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2007/03/repository/GetListCreationTime";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__GetListCreationTime.mtrep2__GetListCreationTime = mtrep2__GetListCreationTime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__GetListCreationTime(soap, &soap_tmp___mtrep4__GetListCreationTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__GetListCreationTime(soap, &soap_tmp___mtrep4__GetListCreationTime, "-mtrep4:GetListCreationTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__GetListCreationTime(soap, &soap_tmp___mtrep4__GetListCreationTime, "-mtrep4:GetListCreationTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep2__GetListCreationTimeResponse)
		return soap_closesock(soap);
	mtrep2__GetListCreationTimeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep2__GetListCreationTimeResponse->soap_get(soap, "mtrep2:GetListCreationTimeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories2(_mtrep3__GetRepositories2 *mtrep3__GetRepositories2, _mtrep3__GetRepositories2Response *mtrep3__GetRepositories2Response)
{	struct soap *soap = this;
	struct __mtrep4__GetRepositories2 soap_tmp___mtrep4__GetRepositories2;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2007/07/repository/GetRepositories2";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__GetRepositories2.mtrep3__GetRepositories2 = mtrep3__GetRepositories2;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__GetRepositories2(soap, &soap_tmp___mtrep4__GetRepositories2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__GetRepositories2(soap, &soap_tmp___mtrep4__GetRepositories2, "-mtrep4:GetRepositories2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__GetRepositories2(soap, &soap_tmp___mtrep4__GetRepositories2, "-mtrep4:GetRepositories2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep3__GetRepositories2Response)
		return soap_closesock(soap);
	mtrep3__GetRepositories2Response->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep3__GetRepositories2Response->soap_get(soap, "mtrep3:GetRepositories2Response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository2(_mtrep3__PickRepository2 *mtrep3__PickRepository2, _mtrep3__PickRepository2Response *mtrep3__PickRepository2Response)
{	struct soap *soap = this;
	struct __mtrep4__PickRepository2 soap_tmp___mtrep4__PickRepository2;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2007/07/repository/PickRepository2";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__PickRepository2.mtrep3__PickRepository2 = mtrep3__PickRepository2;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__PickRepository2(soap, &soap_tmp___mtrep4__PickRepository2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__PickRepository2(soap, &soap_tmp___mtrep4__PickRepository2, "-mtrep4:PickRepository2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__PickRepository2(soap, &soap_tmp___mtrep4__PickRepository2, "-mtrep4:PickRepository2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep3__PickRepository2Response)
		return soap_closesock(soap);
	mtrep3__PickRepository2Response->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep3__PickRepository2Response->soap_get(soap, "mtrep3:PickRepository2Response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::TryGetRepositoryInfo2(_mtrep3__TryGetRepositoryInfo2 *mtrep3__TryGetRepositoryInfo2, _mtrep3__TryGetRepositoryInfo2Response *mtrep3__TryGetRepositoryInfo2Response)
{	struct soap *soap = this;
	struct __mtrep4__TryGetRepositoryInfo2 soap_tmp___mtrep4__TryGetRepositoryInfo2;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2007/07/repository/TryGetRepositoryInfo2";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__TryGetRepositoryInfo2.mtrep3__TryGetRepositoryInfo2 = mtrep3__TryGetRepositoryInfo2;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__TryGetRepositoryInfo2(soap, &soap_tmp___mtrep4__TryGetRepositoryInfo2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__TryGetRepositoryInfo2(soap, &soap_tmp___mtrep4__TryGetRepositoryInfo2, "-mtrep4:TryGetRepositoryInfo2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__TryGetRepositoryInfo2(soap, &soap_tmp___mtrep4__TryGetRepositoryInfo2, "-mtrep4:TryGetRepositoryInfo2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep3__TryGetRepositoryInfo2Response)
		return soap_closesock(soap);
	mtrep3__TryGetRepositoryInfo2Response->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep3__TryGetRepositoryInfo2Response->soap_get(soap, "mtrep3:TryGetRepositoryInfo2Response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::VerifyRepository(_mtrep4__VerifyRepository *mtrep4__VerifyRepository, _mtrep4__VerifyRepositoryResponse *mtrep4__VerifyRepositoryResponse)
{	struct soap *soap = this;
	struct __mtrep4__VerifyRepository soap_tmp___mtrep4__VerifyRepository;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2007/10/repository/VerifyRepository";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__VerifyRepository.mtrep4__VerifyRepository = mtrep4__VerifyRepository;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__VerifyRepository(soap, &soap_tmp___mtrep4__VerifyRepository);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__VerifyRepository(soap, &soap_tmp___mtrep4__VerifyRepository, "-mtrep4:VerifyRepository", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__VerifyRepository(soap, &soap_tmp___mtrep4__VerifyRepository, "-mtrep4:VerifyRepository", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep4__VerifyRepositoryResponse)
		return soap_closesock(soap);
	mtrep4__VerifyRepositoryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep4__VerifyRepositoryResponse->soap_get(soap, "mtrep4:VerifyRepositoryResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::TryGetRepositoryInfo_(_mtrep__TryGetRepositoryInfo *mtrep__TryGetRepositoryInfo, _mtrep__TryGetRepositoryInfoResponse *mtrep__TryGetRepositoryInfoResponse)
{	struct soap *soap = this;
	struct __mtrep4__TryGetRepositoryInfo_ soap_tmp___mtrep4__TryGetRepositoryInfo_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/TryGetRepositoryInfo";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__TryGetRepositoryInfo_.mtrep__TryGetRepositoryInfo = mtrep__TryGetRepositoryInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__TryGetRepositoryInfo_(soap, &soap_tmp___mtrep4__TryGetRepositoryInfo_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__TryGetRepositoryInfo_(soap, &soap_tmp___mtrep4__TryGetRepositoryInfo_, "-mtrep4:TryGetRepositoryInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__TryGetRepositoryInfo_(soap, &soap_tmp___mtrep4__TryGetRepositoryInfo_, "-mtrep4:TryGetRepositoryInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__TryGetRepositoryInfoResponse)
		return soap_closesock(soap);
	mtrep__TryGetRepositoryInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__TryGetRepositoryInfoResponse->soap_get(soap, "mtrep:TryGetRepositoryInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository_(_mtrep__PickRepository *mtrep__PickRepository, _mtrep__PickRepositoryResponse *mtrep__PickRepositoryResponse)
{	struct soap *soap = this;
	struct __mtrep4__PickRepository_ soap_tmp___mtrep4__PickRepository_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/PickRepository";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__PickRepository_.mtrep__PickRepository = mtrep__PickRepository;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__PickRepository_(soap, &soap_tmp___mtrep4__PickRepository_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__PickRepository_(soap, &soap_tmp___mtrep4__PickRepository_, "-mtrep4:PickRepository", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__PickRepository_(soap, &soap_tmp___mtrep4__PickRepository_, "-mtrep4:PickRepository", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__PickRepositoryResponse)
		return soap_closesock(soap);
	mtrep__PickRepositoryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__PickRepositoryResponse->soap_get(soap, "mtrep:PickRepositoryResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetAllRepositories_(_mtrep__GetAllRepositories *mtrep__GetAllRepositories, _mtrep__GetAllRepositoriesResponse *mtrep__GetAllRepositoriesResponse)
{	struct soap *soap = this;
	struct __mtrep4__GetAllRepositories_ soap_tmp___mtrep4__GetAllRepositories_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/GetAllRepositories";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__GetAllRepositories_.mtrep__GetAllRepositories = mtrep__GetAllRepositories;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__GetAllRepositories_(soap, &soap_tmp___mtrep4__GetAllRepositories_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__GetAllRepositories_(soap, &soap_tmp___mtrep4__GetAllRepositories_, "-mtrep4:GetAllRepositories", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__GetAllRepositories_(soap, &soap_tmp___mtrep4__GetAllRepositories_, "-mtrep4:GetAllRepositories", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__GetAllRepositoriesResponse)
		return soap_closesock(soap);
	mtrep__GetAllRepositoriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__GetAllRepositoriesResponse->soap_get(soap, "mtrep:GetAllRepositoriesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories_(_mtrep__GetRepositories *mtrep__GetRepositories, _mtrep__GetRepositoriesResponse *mtrep__GetRepositoriesResponse)
{	struct soap *soap = this;
	struct __mtrep4__GetRepositories_ soap_tmp___mtrep4__GetRepositories_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2006/06/repository/GetRepositories";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__GetRepositories_.mtrep__GetRepositories = mtrep__GetRepositories;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__GetRepositories_(soap, &soap_tmp___mtrep4__GetRepositories_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__GetRepositories_(soap, &soap_tmp___mtrep4__GetRepositories_, "-mtrep4:GetRepositories", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__GetRepositories_(soap, &soap_tmp___mtrep4__GetRepositories_, "-mtrep4:GetRepositories", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep__GetRepositoriesResponse)
		return soap_closesock(soap);
	mtrep__GetRepositoriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__GetRepositoriesResponse->soap_get(soap, "mtrep:GetRepositoriesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetListCreationTime_(_mtrep2__GetListCreationTime *mtrep2__GetListCreationTime, _mtrep2__GetListCreationTimeResponse *mtrep2__GetListCreationTimeResponse)
{	struct soap *soap = this;
	struct __mtrep4__GetListCreationTime_ soap_tmp___mtrep4__GetListCreationTime_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2007/03/repository/GetListCreationTime";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__GetListCreationTime_.mtrep2__GetListCreationTime = mtrep2__GetListCreationTime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__GetListCreationTime_(soap, &soap_tmp___mtrep4__GetListCreationTime_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__GetListCreationTime_(soap, &soap_tmp___mtrep4__GetListCreationTime_, "-mtrep4:GetListCreationTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__GetListCreationTime_(soap, &soap_tmp___mtrep4__GetListCreationTime_, "-mtrep4:GetListCreationTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep2__GetListCreationTimeResponse)
		return soap_closesock(soap);
	mtrep2__GetListCreationTimeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep2__GetListCreationTimeResponse->soap_get(soap, "mtrep2:GetListCreationTimeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories2_(_mtrep3__GetRepositories2 *mtrep3__GetRepositories2, _mtrep3__GetRepositories2Response *mtrep3__GetRepositories2Response)
{	struct soap *soap = this;
	struct __mtrep4__GetRepositories2_ soap_tmp___mtrep4__GetRepositories2_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2007/07/repository/GetRepositories2";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__GetRepositories2_.mtrep3__GetRepositories2 = mtrep3__GetRepositories2;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__GetRepositories2_(soap, &soap_tmp___mtrep4__GetRepositories2_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__GetRepositories2_(soap, &soap_tmp___mtrep4__GetRepositories2_, "-mtrep4:GetRepositories2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__GetRepositories2_(soap, &soap_tmp___mtrep4__GetRepositories2_, "-mtrep4:GetRepositories2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep3__GetRepositories2Response)
		return soap_closesock(soap);
	mtrep3__GetRepositories2Response->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep3__GetRepositories2Response->soap_get(soap, "mtrep3:GetRepositories2Response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository2_(_mtrep3__PickRepository2 *mtrep3__PickRepository2, _mtrep3__PickRepository2Response *mtrep3__PickRepository2Response)
{	struct soap *soap = this;
	struct __mtrep4__PickRepository2_ soap_tmp___mtrep4__PickRepository2_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2007/07/repository/PickRepository2";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__PickRepository2_.mtrep3__PickRepository2 = mtrep3__PickRepository2;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__PickRepository2_(soap, &soap_tmp___mtrep4__PickRepository2_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__PickRepository2_(soap, &soap_tmp___mtrep4__PickRepository2_, "-mtrep4:PickRepository2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__PickRepository2_(soap, &soap_tmp___mtrep4__PickRepository2_, "-mtrep4:PickRepository2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep3__PickRepository2Response)
		return soap_closesock(soap);
	mtrep3__PickRepository2Response->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep3__PickRepository2Response->soap_get(soap, "mtrep3:PickRepository2Response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::TryGetRepositoryInfo2_(_mtrep3__TryGetRepositoryInfo2 *mtrep3__TryGetRepositoryInfo2, _mtrep3__TryGetRepositoryInfo2Response *mtrep3__TryGetRepositoryInfo2Response)
{	struct soap *soap = this;
	struct __mtrep4__TryGetRepositoryInfo2_ soap_tmp___mtrep4__TryGetRepositoryInfo2_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2007/07/repository/TryGetRepositoryInfo2";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__TryGetRepositoryInfo2_.mtrep3__TryGetRepositoryInfo2 = mtrep3__TryGetRepositoryInfo2;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__TryGetRepositoryInfo2_(soap, &soap_tmp___mtrep4__TryGetRepositoryInfo2_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__TryGetRepositoryInfo2_(soap, &soap_tmp___mtrep4__TryGetRepositoryInfo2_, "-mtrep4:TryGetRepositoryInfo2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__TryGetRepositoryInfo2_(soap, &soap_tmp___mtrep4__TryGetRepositoryInfo2_, "-mtrep4:TryGetRepositoryInfo2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep3__TryGetRepositoryInfo2Response)
		return soap_closesock(soap);
	mtrep3__TryGetRepositoryInfo2Response->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep3__TryGetRepositoryInfo2Response->soap_get(soap, "mtrep3:TryGetRepositoryInfo2Response", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::VerifyRepository_(_mtrep4__VerifyRepository *mtrep4__VerifyRepository, _mtrep4__VerifyRepositoryResponse *mtrep4__VerifyRepositoryResponse)
{	struct soap *soap = this;
	struct __mtrep4__VerifyRepository_ soap_tmp___mtrep4__VerifyRepository_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/2007/10/repository/VerifyRepository";
	soap->encodingStyle = NULL;
	soap_tmp___mtrep4__VerifyRepository_.mtrep4__VerifyRepository = mtrep4__VerifyRepository;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mtrep4__VerifyRepository_(soap, &soap_tmp___mtrep4__VerifyRepository_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep4__VerifyRepository_(soap, &soap_tmp___mtrep4__VerifyRepository_, "-mtrep4:VerifyRepository", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep4__VerifyRepository_(soap, &soap_tmp___mtrep4__VerifyRepository_, "-mtrep4:VerifyRepository", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mtrep4__VerifyRepositoryResponse)
		return soap_closesock(soap);
	mtrep4__VerifyRepositoryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep4__VerifyRepositoryResponse->soap_get(soap, "mtrep4:VerifyRepositoryResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
