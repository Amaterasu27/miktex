/* repositoryRepositorySoapProxy.cpp
   Generated by gSOAP 2.7.6e from Repository.h
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "repositoryRepositorySoapProxy.h"

RepositorySoapProxy::RepositorySoapProxy()
{	RepositorySoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

RepositorySoapProxy::RepositorySoapProxy(soap_mode iomode)
{	RepositorySoapProxy_init(iomode, iomode);
}

RepositorySoapProxy::RepositorySoapProxy(soap_mode imode, soap_mode omode)
{	RepositorySoapProxy_init(imode, omode);
}

void RepositorySoapProxy::RepositorySoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_init2(this, imode, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://www.w3.org/2003/05/soap-envelope", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://www.w3.org/2003/05/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"mws", "http://miktex.org/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
};

RepositorySoapProxy::~RepositorySoapProxy()
{	soap_destroy(this);
	soap_end(this);
	soap_done(this);
};

int RepositorySoapProxy::TryGetRepositoryInfo(_mws__TryGetRepositoryInfo *mws__TryGetRepositoryInfo, _mws__TryGetRepositoryInfoResponse *mws__TryGetRepositoryInfoResponse)
{	struct soap *soap = this;
	struct __mws__TryGetRepositoryInfo soap_tmp___mws__TryGetRepositoryInfo;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/TryGetRepositoryInfo";
	soap->encodingStyle = NULL;
	soap_tmp___mws__TryGetRepositoryInfo.mws__TryGetRepositoryInfo = mws__TryGetRepositoryInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mws__TryGetRepositoryInfo(soap, &soap_tmp___mws__TryGetRepositoryInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mws__TryGetRepositoryInfo(soap, &soap_tmp___mws__TryGetRepositoryInfo, "-mws:TryGetRepositoryInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mws__TryGetRepositoryInfo(soap, &soap_tmp___mws__TryGetRepositoryInfo, "-mws:TryGetRepositoryInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mws__TryGetRepositoryInfoResponse)
		return soap_closesock(soap);
	mws__TryGetRepositoryInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mws__TryGetRepositoryInfoResponse->soap_get(soap, "mws:TryGetRepositoryInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository(_mws__PickRepository *mws__PickRepository, _mws__PickRepositoryResponse *mws__PickRepositoryResponse)
{	struct soap *soap = this;
	struct __mws__PickRepository soap_tmp___mws__PickRepository;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/PickRepository";
	soap->encodingStyle = NULL;
	soap_tmp___mws__PickRepository.mws__PickRepository = mws__PickRepository;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mws__PickRepository(soap, &soap_tmp___mws__PickRepository);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mws__PickRepository(soap, &soap_tmp___mws__PickRepository, "-mws:PickRepository", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mws__PickRepository(soap, &soap_tmp___mws__PickRepository, "-mws:PickRepository", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mws__PickRepositoryResponse)
		return soap_closesock(soap);
	mws__PickRepositoryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mws__PickRepositoryResponse->soap_get(soap, "mws:PickRepositoryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetAllRepositories(_mws__GetAllRepositories *mws__GetAllRepositories, _mws__GetAllRepositoriesResponse *mws__GetAllRepositoriesResponse)
{	struct soap *soap = this;
	struct __mws__GetAllRepositories soap_tmp___mws__GetAllRepositories;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/GetAllRepositories";
	soap->encodingStyle = NULL;
	soap_tmp___mws__GetAllRepositories.mws__GetAllRepositories = mws__GetAllRepositories;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mws__GetAllRepositories(soap, &soap_tmp___mws__GetAllRepositories);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mws__GetAllRepositories(soap, &soap_tmp___mws__GetAllRepositories, "-mws:GetAllRepositories", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mws__GetAllRepositories(soap, &soap_tmp___mws__GetAllRepositories, "-mws:GetAllRepositories", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mws__GetAllRepositoriesResponse)
		return soap_closesock(soap);
	mws__GetAllRepositoriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mws__GetAllRepositoriesResponse->soap_get(soap, "mws:GetAllRepositoriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories(_mws__GetRepositories *mws__GetRepositories, _mws__GetRepositoriesResponse *mws__GetRepositoriesResponse)
{	struct soap *soap = this;
	struct __mws__GetRepositories soap_tmp___mws__GetRepositories;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/GetRepositories";
	soap->encodingStyle = NULL;
	soap_tmp___mws__GetRepositories.mws__GetRepositories = mws__GetRepositories;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mws__GetRepositories(soap, &soap_tmp___mws__GetRepositories);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mws__GetRepositories(soap, &soap_tmp___mws__GetRepositories, "-mws:GetRepositories", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mws__GetRepositories(soap, &soap_tmp___mws__GetRepositories, "-mws:GetRepositories", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mws__GetRepositoriesResponse)
		return soap_closesock(soap);
	mws__GetRepositoriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mws__GetRepositoriesResponse->soap_get(soap, "mws:GetRepositoriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::TryGetRepositoryInfo_(_mws__TryGetRepositoryInfo *mws__TryGetRepositoryInfo, _mws__TryGetRepositoryInfoResponse *mws__TryGetRepositoryInfoResponse)
{	struct soap *soap = this;
	struct __mws__TryGetRepositoryInfo_ soap_tmp___mws__TryGetRepositoryInfo_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/TryGetRepositoryInfo";
	soap->encodingStyle = NULL;
	soap_tmp___mws__TryGetRepositoryInfo_.mws__TryGetRepositoryInfo = mws__TryGetRepositoryInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mws__TryGetRepositoryInfo_(soap, &soap_tmp___mws__TryGetRepositoryInfo_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mws__TryGetRepositoryInfo_(soap, &soap_tmp___mws__TryGetRepositoryInfo_, "-mws:TryGetRepositoryInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mws__TryGetRepositoryInfo_(soap, &soap_tmp___mws__TryGetRepositoryInfo_, "-mws:TryGetRepositoryInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mws__TryGetRepositoryInfoResponse)
		return soap_closesock(soap);
	mws__TryGetRepositoryInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mws__TryGetRepositoryInfoResponse->soap_get(soap, "mws:TryGetRepositoryInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository_(_mws__PickRepository *mws__PickRepository, _mws__PickRepositoryResponse *mws__PickRepositoryResponse)
{	struct soap *soap = this;
	struct __mws__PickRepository_ soap_tmp___mws__PickRepository_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/PickRepository";
	soap->encodingStyle = NULL;
	soap_tmp___mws__PickRepository_.mws__PickRepository = mws__PickRepository;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mws__PickRepository_(soap, &soap_tmp___mws__PickRepository_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mws__PickRepository_(soap, &soap_tmp___mws__PickRepository_, "-mws:PickRepository", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mws__PickRepository_(soap, &soap_tmp___mws__PickRepository_, "-mws:PickRepository", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mws__PickRepositoryResponse)
		return soap_closesock(soap);
	mws__PickRepositoryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mws__PickRepositoryResponse->soap_get(soap, "mws:PickRepositoryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetAllRepositories_(_mws__GetAllRepositories *mws__GetAllRepositories, _mws__GetAllRepositoriesResponse *mws__GetAllRepositoriesResponse)
{	struct soap *soap = this;
	struct __mws__GetAllRepositories_ soap_tmp___mws__GetAllRepositories_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/GetAllRepositories";
	soap->encodingStyle = NULL;
	soap_tmp___mws__GetAllRepositories_.mws__GetAllRepositories = mws__GetAllRepositories;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mws__GetAllRepositories_(soap, &soap_tmp___mws__GetAllRepositories_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mws__GetAllRepositories_(soap, &soap_tmp___mws__GetAllRepositories_, "-mws:GetAllRepositories", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mws__GetAllRepositories_(soap, &soap_tmp___mws__GetAllRepositories_, "-mws:GetAllRepositories", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mws__GetAllRepositoriesResponse)
		return soap_closesock(soap);
	mws__GetAllRepositoriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mws__GetAllRepositoriesResponse->soap_get(soap, "mws:GetAllRepositoriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories_(_mws__GetRepositories *mws__GetRepositories, _mws__GetRepositoriesResponse *mws__GetRepositoriesResponse)
{	struct soap *soap = this;
	struct __mws__GetRepositories_ soap_tmp___mws__GetRepositories_;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	soap_action = "http://miktex.org/GetRepositories";
	soap->encodingStyle = NULL;
	soap_tmp___mws__GetRepositories_.mws__GetRepositories = mws__GetRepositories;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___mws__GetRepositories_(soap, &soap_tmp___mws__GetRepositories_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mws__GetRepositories_(soap, &soap_tmp___mws__GetRepositories_, "-mws:GetRepositories", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mws__GetRepositories_(soap, &soap_tmp___mws__GetRepositories_, "-mws:GetRepositories", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mws__GetRepositoriesResponse)
		return soap_closesock(soap);
	mws__GetRepositoriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mws__GetRepositoriesResponse->soap_get(soap, "mws:GetRepositoriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}