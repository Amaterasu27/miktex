/* repositoryC.cpp
   Generated by gSOAP 2.7.6e from Repository.h
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "repositoryH.h"

SOAP_SOURCE_STAMP("@(#) repositoryC.cpp ver 2.7.6e 2006-04-01 17:45:52 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = (struct SOAP_ENV__Reason*)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason));
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_mws__RepositoryStatus:
		return soap_in_mws__RepositoryStatus(soap, NULL, NULL, "mws:RepositoryStatus");
	case SOAP_TYPE_mws__Levels:
		return soap_in_mws__Levels(soap, NULL, NULL, "mws:Levels");
	case SOAP_TYPE_mws__Integrities:
		return soap_in_mws__Integrities(soap, NULL, NULL, "mws:Integrities");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__mws__GetRepositoriesResponse:
		return soap_in__mws__GetRepositoriesResponse(soap, NULL, NULL, "mws:GetRepositoriesResponse");
	case SOAP_TYPE__mws__GetRepositories:
		return soap_in__mws__GetRepositories(soap, NULL, NULL, "mws:GetRepositories");
	case SOAP_TYPE__mws__GetAllRepositoriesResponse:
		return soap_in__mws__GetAllRepositoriesResponse(soap, NULL, NULL, "mws:GetAllRepositoriesResponse");
	case SOAP_TYPE__mws__GetAllRepositories:
		return soap_in__mws__GetAllRepositories(soap, NULL, NULL, "mws:GetAllRepositories");
	case SOAP_TYPE__mws__PickRepositoryResponse:
		return soap_in__mws__PickRepositoryResponse(soap, NULL, NULL, "mws:PickRepositoryResponse");
	case SOAP_TYPE__mws__PickRepository:
		return soap_in__mws__PickRepository(soap, NULL, NULL, "mws:PickRepository");
	case SOAP_TYPE__mws__TryGetRepositoryInfoResponse:
		return soap_in__mws__TryGetRepositoryInfoResponse(soap, NULL, NULL, "mws:TryGetRepositoryInfoResponse");
	case SOAP_TYPE__mws__TryGetRepositoryInfo:
		return soap_in__mws__TryGetRepositoryInfo(soap, NULL, NULL, "mws:TryGetRepositoryInfo");
	case SOAP_TYPE_mws__ArrayOfRepositoryInfo:
		return soap_in_mws__ArrayOfRepositoryInfo(soap, NULL, NULL, "mws:ArrayOfRepositoryInfo");
	case SOAP_TYPE_mws__RepositoryInfo:
		return soap_in_mws__RepositoryInfo(soap, NULL, NULL, "mws:RepositoryInfo");
	case SOAP_TYPE_PointerTo_mws__GetRepositoriesResponse:
		return soap_in_PointerTo_mws__GetRepositoriesResponse(soap, NULL, NULL, "mws:GetRepositoriesResponse");
	case SOAP_TYPE_PointerTo_mws__GetRepositories:
		return soap_in_PointerTo_mws__GetRepositories(soap, NULL, NULL, "mws:GetRepositories");
	case SOAP_TYPE_PointerTo_mws__GetAllRepositoriesResponse:
		return soap_in_PointerTo_mws__GetAllRepositoriesResponse(soap, NULL, NULL, "mws:GetAllRepositoriesResponse");
	case SOAP_TYPE_PointerTo_mws__GetAllRepositories:
		return soap_in_PointerTo_mws__GetAllRepositories(soap, NULL, NULL, "mws:GetAllRepositories");
	case SOAP_TYPE_PointerTo_mws__PickRepositoryResponse:
		return soap_in_PointerTo_mws__PickRepositoryResponse(soap, NULL, NULL, "mws:PickRepositoryResponse");
	case SOAP_TYPE_PointerTo_mws__PickRepository:
		return soap_in_PointerTo_mws__PickRepository(soap, NULL, NULL, "mws:PickRepository");
	case SOAP_TYPE_PointerTo_mws__TryGetRepositoryInfoResponse:
		return soap_in_PointerTo_mws__TryGetRepositoryInfoResponse(soap, NULL, NULL, "mws:TryGetRepositoryInfoResponse");
	case SOAP_TYPE_PointerTo_mws__TryGetRepositoryInfo:
		return soap_in_PointerTo_mws__TryGetRepositoryInfo(soap, NULL, NULL, "mws:TryGetRepositoryInfo");
	case SOAP_TYPE_PointerTomws__ArrayOfRepositoryInfo:
		return soap_in_PointerTomws__ArrayOfRepositoryInfo(soap, NULL, NULL, "mws:ArrayOfRepositoryInfo");
	case SOAP_TYPE_PointerTomws__RepositoryInfo:
		return soap_in_PointerTomws__RepositoryInfo(soap, NULL, NULL, "mws:RepositoryInfo");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mws:RepositoryStatus"))
		{	*type = SOAP_TYPE_mws__RepositoryStatus;
			return soap_in_mws__RepositoryStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mws:Levels"))
		{	*type = SOAP_TYPE_mws__Levels;
			return soap_in_mws__Levels(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mws:Integrities"))
		{	*type = SOAP_TYPE_mws__Integrities;
			return soap_in_mws__Integrities(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mws:GetRepositoriesResponse"))
		{	*type = SOAP_TYPE__mws__GetRepositoriesResponse;
			return soap_in__mws__GetRepositoriesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mws:GetRepositories"))
		{	*type = SOAP_TYPE__mws__GetRepositories;
			return soap_in__mws__GetRepositories(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mws:GetAllRepositoriesResponse"))
		{	*type = SOAP_TYPE__mws__GetAllRepositoriesResponse;
			return soap_in__mws__GetAllRepositoriesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mws:GetAllRepositories"))
		{	*type = SOAP_TYPE__mws__GetAllRepositories;
			return soap_in__mws__GetAllRepositories(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mws:PickRepositoryResponse"))
		{	*type = SOAP_TYPE__mws__PickRepositoryResponse;
			return soap_in__mws__PickRepositoryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mws:PickRepository"))
		{	*type = SOAP_TYPE__mws__PickRepository;
			return soap_in__mws__PickRepository(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mws:TryGetRepositoryInfoResponse"))
		{	*type = SOAP_TYPE__mws__TryGetRepositoryInfoResponse;
			return soap_in__mws__TryGetRepositoryInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mws:TryGetRepositoryInfo"))
		{	*type = SOAP_TYPE__mws__TryGetRepositoryInfo;
			return soap_in__mws__TryGetRepositoryInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mws:ArrayOfRepositoryInfo"))
		{	*type = SOAP_TYPE_mws__ArrayOfRepositoryInfo;
			return soap_in_mws__ArrayOfRepositoryInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mws:RepositoryInfo"))
		{	*type = SOAP_TYPE_mws__RepositoryInfo;
			return soap_in_mws__RepositoryInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
			return soap->error = SOAP_TAG_MISMATCH;
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_mws__RepositoryStatus:
		return soap_out_mws__RepositoryStatus(soap, tag, id, (const enum mws__RepositoryStatus *)ptr, "mws:RepositoryStatus");
	case SOAP_TYPE_mws__Levels:
		return soap_out_mws__Levels(soap, tag, id, (const enum mws__Levels *)ptr, "mws:Levels");
	case SOAP_TYPE_mws__Integrities:
		return soap_out_mws__Integrities(soap, tag, id, (const enum mws__Integrities *)ptr, "mws:Integrities");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__mws__GetRepositoriesResponse:
		return ((_mws__GetRepositoriesResponse *)ptr)->soap_out(soap, "mws:GetRepositoriesResponse", id, NULL);
	case SOAP_TYPE__mws__GetRepositories:
		return ((_mws__GetRepositories *)ptr)->soap_out(soap, "mws:GetRepositories", id, NULL);
	case SOAP_TYPE__mws__GetAllRepositoriesResponse:
		return ((_mws__GetAllRepositoriesResponse *)ptr)->soap_out(soap, "mws:GetAllRepositoriesResponse", id, NULL);
	case SOAP_TYPE__mws__GetAllRepositories:
		return ((_mws__GetAllRepositories *)ptr)->soap_out(soap, "mws:GetAllRepositories", id, NULL);
	case SOAP_TYPE__mws__PickRepositoryResponse:
		return ((_mws__PickRepositoryResponse *)ptr)->soap_out(soap, "mws:PickRepositoryResponse", id, NULL);
	case SOAP_TYPE__mws__PickRepository:
		return ((_mws__PickRepository *)ptr)->soap_out(soap, "mws:PickRepository", id, NULL);
	case SOAP_TYPE__mws__TryGetRepositoryInfoResponse:
		return ((_mws__TryGetRepositoryInfoResponse *)ptr)->soap_out(soap, "mws:TryGetRepositoryInfoResponse", id, NULL);
	case SOAP_TYPE__mws__TryGetRepositoryInfo:
		return ((_mws__TryGetRepositoryInfo *)ptr)->soap_out(soap, "mws:TryGetRepositoryInfo", id, NULL);
	case SOAP_TYPE_mws__ArrayOfRepositoryInfo:
		return ((mws__ArrayOfRepositoryInfo *)ptr)->soap_out(soap, tag, id, "mws:ArrayOfRepositoryInfo");
	case SOAP_TYPE_mws__RepositoryInfo:
		return ((mws__RepositoryInfo *)ptr)->soap_out(soap, tag, id, "mws:RepositoryInfo");
	case SOAP_TYPE_PointerTo_mws__GetRepositoriesResponse:
		return soap_out_PointerTo_mws__GetRepositoriesResponse(soap, tag, id, (_mws__GetRepositoriesResponse *const*)ptr, "mws:GetRepositoriesResponse");
	case SOAP_TYPE_PointerTo_mws__GetRepositories:
		return soap_out_PointerTo_mws__GetRepositories(soap, tag, id, (_mws__GetRepositories *const*)ptr, "mws:GetRepositories");
	case SOAP_TYPE_PointerTo_mws__GetAllRepositoriesResponse:
		return soap_out_PointerTo_mws__GetAllRepositoriesResponse(soap, tag, id, (_mws__GetAllRepositoriesResponse *const*)ptr, "mws:GetAllRepositoriesResponse");
	case SOAP_TYPE_PointerTo_mws__GetAllRepositories:
		return soap_out_PointerTo_mws__GetAllRepositories(soap, tag, id, (_mws__GetAllRepositories *const*)ptr, "mws:GetAllRepositories");
	case SOAP_TYPE_PointerTo_mws__PickRepositoryResponse:
		return soap_out_PointerTo_mws__PickRepositoryResponse(soap, tag, id, (_mws__PickRepositoryResponse *const*)ptr, "mws:PickRepositoryResponse");
	case SOAP_TYPE_PointerTo_mws__PickRepository:
		return soap_out_PointerTo_mws__PickRepository(soap, tag, id, (_mws__PickRepository *const*)ptr, "mws:PickRepository");
	case SOAP_TYPE_PointerTo_mws__TryGetRepositoryInfoResponse:
		return soap_out_PointerTo_mws__TryGetRepositoryInfoResponse(soap, tag, id, (_mws__TryGetRepositoryInfoResponse *const*)ptr, "mws:TryGetRepositoryInfoResponse");
	case SOAP_TYPE_PointerTo_mws__TryGetRepositoryInfo:
		return soap_out_PointerTo_mws__TryGetRepositoryInfo(soap, tag, id, (_mws__TryGetRepositoryInfo *const*)ptr, "mws:TryGetRepositoryInfo");
	case SOAP_TYPE_PointerTomws__ArrayOfRepositoryInfo:
		return soap_out_PointerTomws__ArrayOfRepositoryInfo(soap, tag, id, (mws__ArrayOfRepositoryInfo *const*)ptr, "mws:ArrayOfRepositoryInfo");
	case SOAP_TYPE_PointerTomws__RepositoryInfo:
		return soap_out_PointerTomws__RepositoryInfo(soap, tag, id, (mws__RepositoryInfo *const*)ptr, "mws:RepositoryInfo");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "QName", id, (char**)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__mws__GetRepositoriesResponse:
		((_mws__GetRepositoriesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mws__GetRepositories:
		((_mws__GetRepositories *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mws__GetAllRepositoriesResponse:
		((_mws__GetAllRepositoriesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mws__GetAllRepositories:
		((_mws__GetAllRepositories *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mws__PickRepositoryResponse:
		((_mws__PickRepositoryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mws__PickRepository:
		((_mws__PickRepository *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mws__TryGetRepositoryInfoResponse:
		((_mws__TryGetRepositoryInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mws__TryGetRepositoryInfo:
		((_mws__TryGetRepositoryInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_mws__ArrayOfRepositoryInfo:
		((mws__ArrayOfRepositoryInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_mws__RepositoryInfo:
		((mws__RepositoryInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___mws__GetRepositories_:
		soap_serialize___mws__GetRepositories_(soap, (const struct __mws__GetRepositories_ *)ptr);
		break;
	case SOAP_TYPE___mws__GetAllRepositories_:
		soap_serialize___mws__GetAllRepositories_(soap, (const struct __mws__GetAllRepositories_ *)ptr);
		break;
	case SOAP_TYPE___mws__PickRepository_:
		soap_serialize___mws__PickRepository_(soap, (const struct __mws__PickRepository_ *)ptr);
		break;
	case SOAP_TYPE___mws__TryGetRepositoryInfo_:
		soap_serialize___mws__TryGetRepositoryInfo_(soap, (const struct __mws__TryGetRepositoryInfo_ *)ptr);
		break;
	case SOAP_TYPE___mws__GetRepositories:
		soap_serialize___mws__GetRepositories(soap, (const struct __mws__GetRepositories *)ptr);
		break;
	case SOAP_TYPE___mws__GetAllRepositories:
		soap_serialize___mws__GetAllRepositories(soap, (const struct __mws__GetAllRepositories *)ptr);
		break;
	case SOAP_TYPE___mws__PickRepository:
		soap_serialize___mws__PickRepository(soap, (const struct __mws__PickRepository *)ptr);
		break;
	case SOAP_TYPE___mws__TryGetRepositoryInfo:
		soap_serialize___mws__TryGetRepositoryInfo(soap, (const struct __mws__TryGetRepositoryInfo *)ptr);
		break;
	case SOAP_TYPE_PointerTo_mws__GetRepositoriesResponse:
		soap_serialize_PointerTo_mws__GetRepositoriesResponse(soap, (_mws__GetRepositoriesResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mws__GetRepositories:
		soap_serialize_PointerTo_mws__GetRepositories(soap, (_mws__GetRepositories *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mws__GetAllRepositoriesResponse:
		soap_serialize_PointerTo_mws__GetAllRepositoriesResponse(soap, (_mws__GetAllRepositoriesResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mws__GetAllRepositories:
		soap_serialize_PointerTo_mws__GetAllRepositories(soap, (_mws__GetAllRepositories *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mws__PickRepositoryResponse:
		soap_serialize_PointerTo_mws__PickRepositoryResponse(soap, (_mws__PickRepositoryResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mws__PickRepository:
		soap_serialize_PointerTo_mws__PickRepository(soap, (_mws__PickRepository *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mws__TryGetRepositoryInfoResponse:
		soap_serialize_PointerTo_mws__TryGetRepositoryInfoResponse(soap, (_mws__TryGetRepositoryInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mws__TryGetRepositoryInfo:
		soap_serialize_PointerTo_mws__TryGetRepositoryInfo(soap, (_mws__TryGetRepositoryInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTomws__ArrayOfRepositoryInfo:
		soap_serialize_PointerTomws__ArrayOfRepositoryInfo(soap, (mws__ArrayOfRepositoryInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTomws__RepositoryInfo:
		soap_serialize_PointerTomws__RepositoryInfo(soap, (mws__RepositoryInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mws__RepositoryInfo:
		return (void*)soap_instantiate_mws__RepositoryInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mws__ArrayOfRepositoryInfo:
		return (void*)soap_instantiate_mws__ArrayOfRepositoryInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mws__TryGetRepositoryInfo:
		return (void*)soap_instantiate__mws__TryGetRepositoryInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mws__TryGetRepositoryInfoResponse:
		return (void*)soap_instantiate__mws__TryGetRepositoryInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mws__PickRepository:
		return (void*)soap_instantiate__mws__PickRepository(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mws__PickRepositoryResponse:
		return (void*)soap_instantiate__mws__PickRepositoryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mws__GetAllRepositories:
		return (void*)soap_instantiate__mws__GetAllRepositories(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mws__GetAllRepositoriesResponse:
		return (void*)soap_instantiate__mws__GetAllRepositoriesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mws__GetRepositories:
		return (void*)soap_instantiate__mws__GetRepositories(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mws__GetRepositoriesResponse:
		return (void*)soap_instantiate__mws__GetRepositoriesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___mws__TryGetRepositoryInfo:
		return (void*)soap_instantiate___mws__TryGetRepositoryInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___mws__PickRepository:
		return (void*)soap_instantiate___mws__PickRepository(soap, -1, type, arrayType, n);
	case SOAP_TYPE___mws__GetAllRepositories:
		return (void*)soap_instantiate___mws__GetAllRepositories(soap, -1, type, arrayType, n);
	case SOAP_TYPE___mws__GetRepositories:
		return (void*)soap_instantiate___mws__GetRepositories(soap, -1, type, arrayType, n);
	case SOAP_TYPE___mws__TryGetRepositoryInfo_:
		return (void*)soap_instantiate___mws__TryGetRepositoryInfo_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___mws__PickRepository_:
		return (void*)soap_instantiate___mws__PickRepository_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___mws__GetAllRepositories_:
		return (void*)soap_instantiate___mws__GetAllRepositories_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___mws__GetRepositories_:
		return (void*)soap_instantiate___mws__GetRepositories_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTomws__RepositoryInfo:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTomws__RepositoryInfo(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_mws__RepositoryInfo:
		if (p->size < 0)
			delete (mws__RepositoryInfo*)p->ptr;
		else
			delete[] (mws__RepositoryInfo*)p->ptr;
		break;
	case SOAP_TYPE_mws__ArrayOfRepositoryInfo:
		if (p->size < 0)
			delete (mws__ArrayOfRepositoryInfo*)p->ptr;
		else
			delete[] (mws__ArrayOfRepositoryInfo*)p->ptr;
		break;
	case SOAP_TYPE__mws__TryGetRepositoryInfo:
		if (p->size < 0)
			delete (_mws__TryGetRepositoryInfo*)p->ptr;
		else
			delete[] (_mws__TryGetRepositoryInfo*)p->ptr;
		break;
	case SOAP_TYPE__mws__TryGetRepositoryInfoResponse:
		if (p->size < 0)
			delete (_mws__TryGetRepositoryInfoResponse*)p->ptr;
		else
			delete[] (_mws__TryGetRepositoryInfoResponse*)p->ptr;
		break;
	case SOAP_TYPE__mws__PickRepository:
		if (p->size < 0)
			delete (_mws__PickRepository*)p->ptr;
		else
			delete[] (_mws__PickRepository*)p->ptr;
		break;
	case SOAP_TYPE__mws__PickRepositoryResponse:
		if (p->size < 0)
			delete (_mws__PickRepositoryResponse*)p->ptr;
		else
			delete[] (_mws__PickRepositoryResponse*)p->ptr;
		break;
	case SOAP_TYPE__mws__GetAllRepositories:
		if (p->size < 0)
			delete (_mws__GetAllRepositories*)p->ptr;
		else
			delete[] (_mws__GetAllRepositories*)p->ptr;
		break;
	case SOAP_TYPE__mws__GetAllRepositoriesResponse:
		if (p->size < 0)
			delete (_mws__GetAllRepositoriesResponse*)p->ptr;
		else
			delete[] (_mws__GetAllRepositoriesResponse*)p->ptr;
		break;
	case SOAP_TYPE__mws__GetRepositories:
		if (p->size < 0)
			delete (_mws__GetRepositories*)p->ptr;
		else
			delete[] (_mws__GetRepositories*)p->ptr;
		break;
	case SOAP_TYPE__mws__GetRepositoriesResponse:
		if (p->size < 0)
			delete (_mws__GetRepositoriesResponse*)p->ptr;
		else
			delete[] (_mws__GetRepositoriesResponse*)p->ptr;
		break;
	case SOAP_TYPE___mws__TryGetRepositoryInfo:
		if (p->size < 0)
			delete (struct __mws__TryGetRepositoryInfo*)p->ptr;
		else
			delete[] (struct __mws__TryGetRepositoryInfo*)p->ptr;
		break;
	case SOAP_TYPE___mws__PickRepository:
		if (p->size < 0)
			delete (struct __mws__PickRepository*)p->ptr;
		else
			delete[] (struct __mws__PickRepository*)p->ptr;
		break;
	case SOAP_TYPE___mws__GetAllRepositories:
		if (p->size < 0)
			delete (struct __mws__GetAllRepositories*)p->ptr;
		else
			delete[] (struct __mws__GetAllRepositories*)p->ptr;
		break;
	case SOAP_TYPE___mws__GetRepositories:
		if (p->size < 0)
			delete (struct __mws__GetRepositories*)p->ptr;
		else
			delete[] (struct __mws__GetRepositories*)p->ptr;
		break;
	case SOAP_TYPE___mws__TryGetRepositoryInfo_:
		if (p->size < 0)
			delete (struct __mws__TryGetRepositoryInfo_*)p->ptr;
		else
			delete[] (struct __mws__TryGetRepositoryInfo_*)p->ptr;
		break;
	case SOAP_TYPE___mws__PickRepository_:
		if (p->size < 0)
			delete (struct __mws__PickRepository_*)p->ptr;
		else
			delete[] (struct __mws__PickRepository_*)p->ptr;
		break;
	case SOAP_TYPE___mws__GetAllRepositories_:
		if (p->size < 0)
			delete (struct __mws__GetAllRepositories_*)p->ptr;
		else
			delete[] (struct __mws__GetAllRepositories_*)p->ptr;
		break;
	case SOAP_TYPE___mws__GetRepositories_:
		if (p->size < 0)
			delete (struct __mws__GetRepositories_*)p->ptr;
		else
			delete[] (struct __mws__GetRepositories_*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTomws__RepositoryInfo:
		if (p->size < 0)
			delete (std::vector<mws__RepositoryInfo * >*)p->ptr;
		else
			delete[] (std::vector<mws__RepositoryInfo * >*)p->ptr;
		break;
	}
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTomws__RepositoryInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<mws__RepositoryInfo * >*)p)[len] = *(mws__RepositoryInfo **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	const char *s = soap_str_code(soap_codes_bool, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type);
	soap_send(soap, soap_bool2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 1)))
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mws__RepositoryStatus(struct soap *soap, enum mws__RepositoryStatus *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_mws__RepositoryStatus
	*a = SOAP_DEFAULT_mws__RepositoryStatus;
#else
	*a = (enum mws__RepositoryStatus)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mws__RepositoryStatus(struct soap *soap, const enum mws__RepositoryStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mws__RepositoryStatus);
	if (soap_out_mws__RepositoryStatus(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_mws__RepositoryStatus[] =
{	{ (long)mws__RepositoryStatus__Online, "Online" },
	{ (long)mws__RepositoryStatus__Offline, "Offline" },
	{ (long)mws__RepositoryStatus__Unknown, "Unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_mws__RepositoryStatus2s(struct soap *soap, enum mws__RepositoryStatus n)
{	const char *s = soap_str_code(soap_codes_mws__RepositoryStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mws__RepositoryStatus(struct soap *soap, const char *tag, int id, const enum mws__RepositoryStatus *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mws__RepositoryStatus), type);
	soap_send(soap, soap_mws__RepositoryStatus2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum mws__RepositoryStatus * SOAP_FMAC4 soap_get_mws__RepositoryStatus(struct soap *soap, enum mws__RepositoryStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_mws__RepositoryStatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2mws__RepositoryStatus(struct soap *soap, const char *s, enum mws__RepositoryStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_mws__RepositoryStatus, s);
	if (map)
		*a = (enum mws__RepositoryStatus)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum mws__RepositoryStatus)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum mws__RepositoryStatus * SOAP_FMAC4 soap_in_mws__RepositoryStatus(struct soap *soap, const char *tag, enum mws__RepositoryStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (enum mws__RepositoryStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mws__RepositoryStatus, sizeof(enum mws__RepositoryStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2mws__RepositoryStatus(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum mws__RepositoryStatus *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_mws__RepositoryStatus, 0, sizeof(enum mws__RepositoryStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mws__Levels(struct soap *soap, enum mws__Levels *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_mws__Levels
	*a = SOAP_DEFAULT_mws__Levels;
#else
	*a = (enum mws__Levels)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mws__Levels(struct soap *soap, const enum mws__Levels *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mws__Levels);
	if (soap_out_mws__Levels(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_mws__Levels[] =
{	{ (long)mws__Levels__Essential, "Essential" },
	{ (long)mws__Levels__Basic, "Basic" },
	{ (long)mws__Levels__Advanced, "Advanced" },
	{ (long)mws__Levels__Complete, "Complete" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_mws__Levels2s(struct soap *soap, enum mws__Levels n)
{	const char *s = soap_str_code(soap_codes_mws__Levels, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mws__Levels(struct soap *soap, const char *tag, int id, const enum mws__Levels *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mws__Levels), type);
	soap_send(soap, soap_mws__Levels2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum mws__Levels * SOAP_FMAC4 soap_get_mws__Levels(struct soap *soap, enum mws__Levels *p, const char *tag, const char *type)
{
	if ((p = soap_in_mws__Levels(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2mws__Levels(struct soap *soap, const char *s, enum mws__Levels *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_mws__Levels, s);
	if (map)
		*a = (enum mws__Levels)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum mws__Levels)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum mws__Levels * SOAP_FMAC4 soap_in_mws__Levels(struct soap *soap, const char *tag, enum mws__Levels *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (enum mws__Levels *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mws__Levels, sizeof(enum mws__Levels), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2mws__Levels(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum mws__Levels *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_mws__Levels, 0, sizeof(enum mws__Levels), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mws__Integrities(struct soap *soap, enum mws__Integrities *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_mws__Integrities
	*a = SOAP_DEFAULT_mws__Integrities;
#else
	*a = (enum mws__Integrities)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mws__Integrities(struct soap *soap, const enum mws__Integrities *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mws__Integrities);
	if (soap_out_mws__Integrities(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_mws__Integrities[] =
{	{ (long)mws__Integrities__Intact, "Intact" },
	{ (long)mws__Integrities__Corrupted, "Corrupted" },
	{ (long)mws__Integrities__Unknown, "Unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_mws__Integrities2s(struct soap *soap, enum mws__Integrities n)
{	const char *s = soap_str_code(soap_codes_mws__Integrities, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mws__Integrities(struct soap *soap, const char *tag, int id, const enum mws__Integrities *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mws__Integrities), type);
	soap_send(soap, soap_mws__Integrities2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum mws__Integrities * SOAP_FMAC4 soap_get_mws__Integrities(struct soap *soap, enum mws__Integrities *p, const char *tag, const char *type)
{
	if ((p = soap_in_mws__Integrities(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2mws__Integrities(struct soap *soap, const char *s, enum mws__Integrities *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_mws__Integrities, s);
	if (map)
		*a = (enum mws__Integrities)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum mws__Integrities)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum mws__Integrities * SOAP_FMAC4 soap_in_mws__Integrities(struct soap *soap, const char *tag, enum mws__Integrities *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (enum mws__Integrities *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mws__Integrities, sizeof(enum mws__Integrities), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2mws__Integrities(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum mws__Integrities *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_mws__Integrities, 0, sizeof(enum mws__Integrities), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _mws__GetRepositoriesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTomws__ArrayOfRepositoryInfo(soap, &((_mws__GetRepositoriesResponse*)this)->GetRepositoriesResult);
	/* transient soap skipped */
}

void _mws__GetRepositoriesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_mws__GetRepositoriesResponse*)this)->GetRepositoriesResult = NULL;
	/* transient soap skipped */
}

int _mws__GetRepositoriesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mws__GetRepositoriesResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mws__GetRepositoriesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mws__GetRepositoriesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mws__GetRepositoriesResponse(struct soap *soap, const char *tag, int id, const _mws__GetRepositoriesResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mws__GetRepositoriesResponse), type);
	soap_out_PointerTomws__ArrayOfRepositoryInfo(soap, "mws:GetRepositoriesResult", -1, &(((_mws__GetRepositoriesResponse*)a)->GetRepositoriesResult), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mws__GetRepositoriesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mws__GetRepositoriesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _mws__GetRepositoriesResponse * SOAP_FMAC4 soap_get__mws__GetRepositoriesResponse(struct soap *soap, _mws__GetRepositoriesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__mws__GetRepositoriesResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mws__GetRepositoriesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mws__GetRepositoriesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _mws__GetRepositoriesResponse * SOAP_FMAC4 soap_in__mws__GetRepositoriesResponse(struct soap *soap, const char *tag, _mws__GetRepositoriesResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_mws__GetRepositoriesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mws__GetRepositoriesResponse, sizeof(_mws__GetRepositoriesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mws__GetRepositoriesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mws__GetRepositoriesResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetRepositoriesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetRepositoriesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTomws__ArrayOfRepositoryInfo(soap, "mws:GetRepositoriesResult", &(((_mws__GetRepositoriesResponse*)a)->GetRepositoriesResult), "mws:ArrayOfRepositoryInfo"))
				{	soap_flag_GetRepositoriesResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mws__GetRepositoriesResponse *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__mws__GetRepositoriesResponse, 0, sizeof(_mws__GetRepositoriesResponse), 0, soap_copy__mws__GetRepositoriesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mws__GetRepositoriesResponse * SOAP_FMAC6 soap_new__mws__GetRepositoriesResponse(struct soap *soap, int n)
{	return soap_instantiate__mws__GetRepositoriesResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mws__GetRepositoriesResponse(struct soap *soap, _mws__GetRepositoriesResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mws__GetRepositoriesResponse * SOAP_FMAC4 soap_instantiate__mws__GetRepositoriesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mws__GetRepositoriesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mws__GetRepositoriesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mws__GetRepositoriesResponse;
		if (size)
			*size = sizeof(_mws__GetRepositoriesResponse);
		((_mws__GetRepositoriesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mws__GetRepositoriesResponse[n];
		if (size)
			*size = n * sizeof(_mws__GetRepositoriesResponse);
		for (int i = 0; i < n; i++)
			((_mws__GetRepositoriesResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mws__GetRepositoriesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mws__GetRepositoriesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mws__GetRepositoriesResponse %p -> %p\n", q, p));
	*(_mws__GetRepositoriesResponse*)p = *(_mws__GetRepositoriesResponse*)q;
}

void _mws__GetRepositories::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void _mws__GetRepositories::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &((_mws__GetRepositories*)this)->onlyOnline);
	soap_default_bool(soap, &((_mws__GetRepositories*)this)->noCorrupted);
	soap_default_int(soap, &((_mws__GetRepositories*)this)->maxDelay);
	/* transient soap skipped */
}

int _mws__GetRepositories::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mws__GetRepositories);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mws__GetRepositories::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mws__GetRepositories(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mws__GetRepositories(struct soap *soap, const char *tag, int id, const _mws__GetRepositories *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mws__GetRepositories), type);
	soap_out_bool(soap, "mws:onlyOnline", -1, &(((_mws__GetRepositories*)a)->onlyOnline), "");
	soap_out_bool(soap, "mws:noCorrupted", -1, &(((_mws__GetRepositories*)a)->noCorrupted), "");
	soap_out_int(soap, "mws:maxDelay", -1, &(((_mws__GetRepositories*)a)->maxDelay), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mws__GetRepositories::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mws__GetRepositories(soap, this, tag, type);
}

SOAP_FMAC3 _mws__GetRepositories * SOAP_FMAC4 soap_get__mws__GetRepositories(struct soap *soap, _mws__GetRepositories *p, const char *tag, const char *type)
{
	if ((p = soap_in__mws__GetRepositories(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mws__GetRepositories::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mws__GetRepositories(soap, tag, this, type);
}

SOAP_FMAC3 _mws__GetRepositories * SOAP_FMAC4 soap_in__mws__GetRepositories(struct soap *soap, const char *tag, _mws__GetRepositories *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_mws__GetRepositories *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mws__GetRepositories, sizeof(_mws__GetRepositories), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mws__GetRepositories)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mws__GetRepositories *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_onlyOnline1 = 1, soap_flag_noCorrupted1 = 1, soap_flag_maxDelay1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_onlyOnline1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "mws:onlyOnline", &(((_mws__GetRepositories*)a)->onlyOnline), "xsd:boolean"))
				{	soap_flag_onlyOnline1--;
					continue;
				}
			if (soap_flag_noCorrupted1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "mws:noCorrupted", &(((_mws__GetRepositories*)a)->noCorrupted), "xsd:boolean"))
				{	soap_flag_noCorrupted1--;
					continue;
				}
			if (soap_flag_maxDelay1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "mws:maxDelay", &(((_mws__GetRepositories*)a)->maxDelay), "xsd:int"))
				{	soap_flag_maxDelay1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_onlyOnline1 > 0 || soap_flag_noCorrupted1 > 0 || soap_flag_maxDelay1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mws__GetRepositories *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__mws__GetRepositories, 0, sizeof(_mws__GetRepositories), 0, soap_copy__mws__GetRepositories);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mws__GetRepositories * SOAP_FMAC6 soap_new__mws__GetRepositories(struct soap *soap, int n)
{	return soap_instantiate__mws__GetRepositories(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mws__GetRepositories(struct soap *soap, _mws__GetRepositories *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mws__GetRepositories * SOAP_FMAC4 soap_instantiate__mws__GetRepositories(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mws__GetRepositories(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mws__GetRepositories, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mws__GetRepositories;
		if (size)
			*size = sizeof(_mws__GetRepositories);
		((_mws__GetRepositories*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mws__GetRepositories[n];
		if (size)
			*size = n * sizeof(_mws__GetRepositories);
		for (int i = 0; i < n; i++)
			((_mws__GetRepositories*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mws__GetRepositories*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mws__GetRepositories(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mws__GetRepositories %p -> %p\n", q, p));
	*(_mws__GetRepositories*)p = *(_mws__GetRepositories*)q;
}

void _mws__GetAllRepositoriesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTomws__ArrayOfRepositoryInfo(soap, &((_mws__GetAllRepositoriesResponse*)this)->GetAllRepositoriesResult);
	/* transient soap skipped */
}

void _mws__GetAllRepositoriesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_mws__GetAllRepositoriesResponse*)this)->GetAllRepositoriesResult = NULL;
	/* transient soap skipped */
}

int _mws__GetAllRepositoriesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mws__GetAllRepositoriesResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mws__GetAllRepositoriesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mws__GetAllRepositoriesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mws__GetAllRepositoriesResponse(struct soap *soap, const char *tag, int id, const _mws__GetAllRepositoriesResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mws__GetAllRepositoriesResponse), type);
	soap_out_PointerTomws__ArrayOfRepositoryInfo(soap, "mws:GetAllRepositoriesResult", -1, &(((_mws__GetAllRepositoriesResponse*)a)->GetAllRepositoriesResult), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mws__GetAllRepositoriesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mws__GetAllRepositoriesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _mws__GetAllRepositoriesResponse * SOAP_FMAC4 soap_get__mws__GetAllRepositoriesResponse(struct soap *soap, _mws__GetAllRepositoriesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__mws__GetAllRepositoriesResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mws__GetAllRepositoriesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mws__GetAllRepositoriesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _mws__GetAllRepositoriesResponse * SOAP_FMAC4 soap_in__mws__GetAllRepositoriesResponse(struct soap *soap, const char *tag, _mws__GetAllRepositoriesResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_mws__GetAllRepositoriesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mws__GetAllRepositoriesResponse, sizeof(_mws__GetAllRepositoriesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mws__GetAllRepositoriesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mws__GetAllRepositoriesResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetAllRepositoriesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAllRepositoriesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTomws__ArrayOfRepositoryInfo(soap, "mws:GetAllRepositoriesResult", &(((_mws__GetAllRepositoriesResponse*)a)->GetAllRepositoriesResult), "mws:ArrayOfRepositoryInfo"))
				{	soap_flag_GetAllRepositoriesResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mws__GetAllRepositoriesResponse *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__mws__GetAllRepositoriesResponse, 0, sizeof(_mws__GetAllRepositoriesResponse), 0, soap_copy__mws__GetAllRepositoriesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mws__GetAllRepositoriesResponse * SOAP_FMAC6 soap_new__mws__GetAllRepositoriesResponse(struct soap *soap, int n)
{	return soap_instantiate__mws__GetAllRepositoriesResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mws__GetAllRepositoriesResponse(struct soap *soap, _mws__GetAllRepositoriesResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mws__GetAllRepositoriesResponse * SOAP_FMAC4 soap_instantiate__mws__GetAllRepositoriesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mws__GetAllRepositoriesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mws__GetAllRepositoriesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mws__GetAllRepositoriesResponse;
		if (size)
			*size = sizeof(_mws__GetAllRepositoriesResponse);
		((_mws__GetAllRepositoriesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mws__GetAllRepositoriesResponse[n];
		if (size)
			*size = n * sizeof(_mws__GetAllRepositoriesResponse);
		for (int i = 0; i < n; i++)
			((_mws__GetAllRepositoriesResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mws__GetAllRepositoriesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mws__GetAllRepositoriesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mws__GetAllRepositoriesResponse %p -> %p\n", q, p));
	*(_mws__GetAllRepositoriesResponse*)p = *(_mws__GetAllRepositoriesResponse*)q;
}

void _mws__GetAllRepositories::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void _mws__GetAllRepositories::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

int _mws__GetAllRepositories::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mws__GetAllRepositories);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mws__GetAllRepositories::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mws__GetAllRepositories(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mws__GetAllRepositories(struct soap *soap, const char *tag, int id, const _mws__GetAllRepositories *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mws__GetAllRepositories), type);
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mws__GetAllRepositories::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mws__GetAllRepositories(soap, this, tag, type);
}

SOAP_FMAC3 _mws__GetAllRepositories * SOAP_FMAC4 soap_get__mws__GetAllRepositories(struct soap *soap, _mws__GetAllRepositories *p, const char *tag, const char *type)
{
	if ((p = soap_in__mws__GetAllRepositories(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mws__GetAllRepositories::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mws__GetAllRepositories(soap, tag, this, type);
}

SOAP_FMAC3 _mws__GetAllRepositories * SOAP_FMAC4 soap_in__mws__GetAllRepositories(struct soap *soap, const char *tag, _mws__GetAllRepositories *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_mws__GetAllRepositories *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mws__GetAllRepositories, sizeof(_mws__GetAllRepositories), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mws__GetAllRepositories)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mws__GetAllRepositories *)a->soap_in(soap, tag, type);
		}
	};
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mws__GetAllRepositories *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__mws__GetAllRepositories, 0, sizeof(_mws__GetAllRepositories), 0, soap_copy__mws__GetAllRepositories);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mws__GetAllRepositories * SOAP_FMAC6 soap_new__mws__GetAllRepositories(struct soap *soap, int n)
{	return soap_instantiate__mws__GetAllRepositories(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mws__GetAllRepositories(struct soap *soap, _mws__GetAllRepositories *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mws__GetAllRepositories * SOAP_FMAC4 soap_instantiate__mws__GetAllRepositories(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mws__GetAllRepositories(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mws__GetAllRepositories, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mws__GetAllRepositories;
		if (size)
			*size = sizeof(_mws__GetAllRepositories);
		((_mws__GetAllRepositories*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mws__GetAllRepositories[n];
		if (size)
			*size = n * sizeof(_mws__GetAllRepositories);
		for (int i = 0; i < n; i++)
			((_mws__GetAllRepositories*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mws__GetAllRepositories*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mws__GetAllRepositories(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mws__GetAllRepositories %p -> %p\n", q, p));
	*(_mws__GetAllRepositories*)p = *(_mws__GetAllRepositories*)q;
}

void _mws__PickRepositoryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTomws__RepositoryInfo(soap, &((_mws__PickRepositoryResponse*)this)->PickRepositoryResult);
	/* transient soap skipped */
}

void _mws__PickRepositoryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_mws__PickRepositoryResponse*)this)->PickRepositoryResult = NULL;
	/* transient soap skipped */
}

int _mws__PickRepositoryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mws__PickRepositoryResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mws__PickRepositoryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mws__PickRepositoryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mws__PickRepositoryResponse(struct soap *soap, const char *tag, int id, const _mws__PickRepositoryResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mws__PickRepositoryResponse), type);
	soap_out_PointerTomws__RepositoryInfo(soap, "mws:PickRepositoryResult", -1, &(((_mws__PickRepositoryResponse*)a)->PickRepositoryResult), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mws__PickRepositoryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mws__PickRepositoryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _mws__PickRepositoryResponse * SOAP_FMAC4 soap_get__mws__PickRepositoryResponse(struct soap *soap, _mws__PickRepositoryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__mws__PickRepositoryResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mws__PickRepositoryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mws__PickRepositoryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _mws__PickRepositoryResponse * SOAP_FMAC4 soap_in__mws__PickRepositoryResponse(struct soap *soap, const char *tag, _mws__PickRepositoryResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_mws__PickRepositoryResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mws__PickRepositoryResponse, sizeof(_mws__PickRepositoryResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mws__PickRepositoryResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mws__PickRepositoryResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_PickRepositoryResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PickRepositoryResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTomws__RepositoryInfo(soap, "mws:PickRepositoryResult", &(((_mws__PickRepositoryResponse*)a)->PickRepositoryResult), "mws:RepositoryInfo"))
				{	soap_flag_PickRepositoryResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mws__PickRepositoryResponse *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__mws__PickRepositoryResponse, 0, sizeof(_mws__PickRepositoryResponse), 0, soap_copy__mws__PickRepositoryResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mws__PickRepositoryResponse * SOAP_FMAC6 soap_new__mws__PickRepositoryResponse(struct soap *soap, int n)
{	return soap_instantiate__mws__PickRepositoryResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mws__PickRepositoryResponse(struct soap *soap, _mws__PickRepositoryResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mws__PickRepositoryResponse * SOAP_FMAC4 soap_instantiate__mws__PickRepositoryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mws__PickRepositoryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mws__PickRepositoryResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mws__PickRepositoryResponse;
		if (size)
			*size = sizeof(_mws__PickRepositoryResponse);
		((_mws__PickRepositoryResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mws__PickRepositoryResponse[n];
		if (size)
			*size = n * sizeof(_mws__PickRepositoryResponse);
		for (int i = 0; i < n; i++)
			((_mws__PickRepositoryResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mws__PickRepositoryResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mws__PickRepositoryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mws__PickRepositoryResponse %p -> %p\n", q, p));
	*(_mws__PickRepositoryResponse*)p = *(_mws__PickRepositoryResponse*)q;
}

void _mws__PickRepository::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

void _mws__PickRepository::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

int _mws__PickRepository::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mws__PickRepository);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mws__PickRepository::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mws__PickRepository(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mws__PickRepository(struct soap *soap, const char *tag, int id, const _mws__PickRepository *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mws__PickRepository), type);
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mws__PickRepository::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mws__PickRepository(soap, this, tag, type);
}

SOAP_FMAC3 _mws__PickRepository * SOAP_FMAC4 soap_get__mws__PickRepository(struct soap *soap, _mws__PickRepository *p, const char *tag, const char *type)
{
	if ((p = soap_in__mws__PickRepository(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mws__PickRepository::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mws__PickRepository(soap, tag, this, type);
}

SOAP_FMAC3 _mws__PickRepository * SOAP_FMAC4 soap_in__mws__PickRepository(struct soap *soap, const char *tag, _mws__PickRepository *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_mws__PickRepository *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mws__PickRepository, sizeof(_mws__PickRepository), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mws__PickRepository)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mws__PickRepository *)a->soap_in(soap, tag, type);
		}
	};
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mws__PickRepository *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__mws__PickRepository, 0, sizeof(_mws__PickRepository), 0, soap_copy__mws__PickRepository);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mws__PickRepository * SOAP_FMAC6 soap_new__mws__PickRepository(struct soap *soap, int n)
{	return soap_instantiate__mws__PickRepository(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mws__PickRepository(struct soap *soap, _mws__PickRepository *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mws__PickRepository * SOAP_FMAC4 soap_instantiate__mws__PickRepository(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mws__PickRepository(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mws__PickRepository, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mws__PickRepository;
		if (size)
			*size = sizeof(_mws__PickRepository);
		((_mws__PickRepository*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mws__PickRepository[n];
		if (size)
			*size = n * sizeof(_mws__PickRepository);
		for (int i = 0; i < n; i++)
			((_mws__PickRepository*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mws__PickRepository*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mws__PickRepository(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mws__PickRepository %p -> %p\n", q, p));
	*(_mws__PickRepository*)p = *(_mws__PickRepository*)q;
}

void _mws__TryGetRepositoryInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTomws__RepositoryInfo(soap, &((_mws__TryGetRepositoryInfoResponse*)this)->repositoryInfo);
	/* transient soap skipped */
}

void _mws__TryGetRepositoryInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &((_mws__TryGetRepositoryInfoResponse*)this)->TryGetRepositoryInfoResult);
	((_mws__TryGetRepositoryInfoResponse*)this)->repositoryInfo = NULL;
	/* transient soap skipped */
}

int _mws__TryGetRepositoryInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mws__TryGetRepositoryInfoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mws__TryGetRepositoryInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mws__TryGetRepositoryInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mws__TryGetRepositoryInfoResponse(struct soap *soap, const char *tag, int id, const _mws__TryGetRepositoryInfoResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mws__TryGetRepositoryInfoResponse), type);
	soap_out_bool(soap, "mws:TryGetRepositoryInfoResult", -1, &(((_mws__TryGetRepositoryInfoResponse*)a)->TryGetRepositoryInfoResult), "");
	soap_out_PointerTomws__RepositoryInfo(soap, "mws:repositoryInfo", -1, &(((_mws__TryGetRepositoryInfoResponse*)a)->repositoryInfo), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mws__TryGetRepositoryInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mws__TryGetRepositoryInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _mws__TryGetRepositoryInfoResponse * SOAP_FMAC4 soap_get__mws__TryGetRepositoryInfoResponse(struct soap *soap, _mws__TryGetRepositoryInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__mws__TryGetRepositoryInfoResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mws__TryGetRepositoryInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mws__TryGetRepositoryInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _mws__TryGetRepositoryInfoResponse * SOAP_FMAC4 soap_in__mws__TryGetRepositoryInfoResponse(struct soap *soap, const char *tag, _mws__TryGetRepositoryInfoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_mws__TryGetRepositoryInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mws__TryGetRepositoryInfoResponse, sizeof(_mws__TryGetRepositoryInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mws__TryGetRepositoryInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mws__TryGetRepositoryInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_TryGetRepositoryInfoResult1 = 1, soap_flag_repositoryInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TryGetRepositoryInfoResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "mws:TryGetRepositoryInfoResult", &(((_mws__TryGetRepositoryInfoResponse*)a)->TryGetRepositoryInfoResult), "xsd:boolean"))
				{	soap_flag_TryGetRepositoryInfoResult1--;
					continue;
				}
			if (soap_flag_repositoryInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTomws__RepositoryInfo(soap, "mws:repositoryInfo", &(((_mws__TryGetRepositoryInfoResponse*)a)->repositoryInfo), "mws:RepositoryInfo"))
				{	soap_flag_repositoryInfo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_TryGetRepositoryInfoResult1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mws__TryGetRepositoryInfoResponse *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__mws__TryGetRepositoryInfoResponse, 0, sizeof(_mws__TryGetRepositoryInfoResponse), 0, soap_copy__mws__TryGetRepositoryInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mws__TryGetRepositoryInfoResponse * SOAP_FMAC6 soap_new__mws__TryGetRepositoryInfoResponse(struct soap *soap, int n)
{	return soap_instantiate__mws__TryGetRepositoryInfoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mws__TryGetRepositoryInfoResponse(struct soap *soap, _mws__TryGetRepositoryInfoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mws__TryGetRepositoryInfoResponse * SOAP_FMAC4 soap_instantiate__mws__TryGetRepositoryInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mws__TryGetRepositoryInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mws__TryGetRepositoryInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mws__TryGetRepositoryInfoResponse;
		if (size)
			*size = sizeof(_mws__TryGetRepositoryInfoResponse);
		((_mws__TryGetRepositoryInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mws__TryGetRepositoryInfoResponse[n];
		if (size)
			*size = n * sizeof(_mws__TryGetRepositoryInfoResponse);
		for (int i = 0; i < n; i++)
			((_mws__TryGetRepositoryInfoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mws__TryGetRepositoryInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mws__TryGetRepositoryInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mws__TryGetRepositoryInfoResponse %p -> %p\n", q, p));
	*(_mws__TryGetRepositoryInfoResponse*)p = *(_mws__TryGetRepositoryInfoResponse*)q;
}

void _mws__TryGetRepositoryInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &((_mws__TryGetRepositoryInfo*)this)->url);
	/* transient soap skipped */
}

void _mws__TryGetRepositoryInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_mws__TryGetRepositoryInfo*)this)->url = NULL;
	/* transient soap skipped */
}

int _mws__TryGetRepositoryInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mws__TryGetRepositoryInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mws__TryGetRepositoryInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mws__TryGetRepositoryInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mws__TryGetRepositoryInfo(struct soap *soap, const char *tag, int id, const _mws__TryGetRepositoryInfo *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mws__TryGetRepositoryInfo), type);
	soap_out_PointerTostd__string(soap, "mws:url", -1, &(((_mws__TryGetRepositoryInfo*)a)->url), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mws__TryGetRepositoryInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mws__TryGetRepositoryInfo(soap, this, tag, type);
}

SOAP_FMAC3 _mws__TryGetRepositoryInfo * SOAP_FMAC4 soap_get__mws__TryGetRepositoryInfo(struct soap *soap, _mws__TryGetRepositoryInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__mws__TryGetRepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mws__TryGetRepositoryInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mws__TryGetRepositoryInfo(soap, tag, this, type);
}

SOAP_FMAC3 _mws__TryGetRepositoryInfo * SOAP_FMAC4 soap_in__mws__TryGetRepositoryInfo(struct soap *soap, const char *tag, _mws__TryGetRepositoryInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (_mws__TryGetRepositoryInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mws__TryGetRepositoryInfo, sizeof(_mws__TryGetRepositoryInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mws__TryGetRepositoryInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mws__TryGetRepositoryInfo *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_url1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_url1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "mws:url", &(((_mws__TryGetRepositoryInfo*)a)->url), "xsd:string"))
				{	soap_flag_url1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mws__TryGetRepositoryInfo *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE__mws__TryGetRepositoryInfo, 0, sizeof(_mws__TryGetRepositoryInfo), 0, soap_copy__mws__TryGetRepositoryInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mws__TryGetRepositoryInfo * SOAP_FMAC6 soap_new__mws__TryGetRepositoryInfo(struct soap *soap, int n)
{	return soap_instantiate__mws__TryGetRepositoryInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mws__TryGetRepositoryInfo(struct soap *soap, _mws__TryGetRepositoryInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mws__TryGetRepositoryInfo * SOAP_FMAC4 soap_instantiate__mws__TryGetRepositoryInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mws__TryGetRepositoryInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mws__TryGetRepositoryInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mws__TryGetRepositoryInfo;
		if (size)
			*size = sizeof(_mws__TryGetRepositoryInfo);
		((_mws__TryGetRepositoryInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mws__TryGetRepositoryInfo[n];
		if (size)
			*size = n * sizeof(_mws__TryGetRepositoryInfo);
		for (int i = 0; i < n; i++)
			((_mws__TryGetRepositoryInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mws__TryGetRepositoryInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mws__TryGetRepositoryInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mws__TryGetRepositoryInfo %p -> %p\n", q, p));
	*(_mws__TryGetRepositoryInfo*)p = *(_mws__TryGetRepositoryInfo*)q;
}

void mws__ArrayOfRepositoryInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTomws__RepositoryInfo(soap, &((mws__ArrayOfRepositoryInfo*)this)->RepositoryInfo);
	/* transient soap skipped */
}

void mws__ArrayOfRepositoryInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTomws__RepositoryInfo(soap, &((mws__ArrayOfRepositoryInfo*)this)->RepositoryInfo);
	/* transient soap skipped */
}

int mws__ArrayOfRepositoryInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_mws__ArrayOfRepositoryInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int mws__ArrayOfRepositoryInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_mws__ArrayOfRepositoryInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mws__ArrayOfRepositoryInfo(struct soap *soap, const char *tag, int id, const mws__ArrayOfRepositoryInfo *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mws__ArrayOfRepositoryInfo), type);
	soap_out_std__vectorTemplateOfPointerTomws__RepositoryInfo(soap, "mws:RepositoryInfo", -1, &(((mws__ArrayOfRepositoryInfo*)a)->RepositoryInfo), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *mws__ArrayOfRepositoryInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_mws__ArrayOfRepositoryInfo(soap, this, tag, type);
}

SOAP_FMAC3 mws__ArrayOfRepositoryInfo * SOAP_FMAC4 soap_get_mws__ArrayOfRepositoryInfo(struct soap *soap, mws__ArrayOfRepositoryInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_mws__ArrayOfRepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *mws__ArrayOfRepositoryInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_mws__ArrayOfRepositoryInfo(soap, tag, this, type);
}

SOAP_FMAC3 mws__ArrayOfRepositoryInfo * SOAP_FMAC4 soap_in_mws__ArrayOfRepositoryInfo(struct soap *soap, const char *tag, mws__ArrayOfRepositoryInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (mws__ArrayOfRepositoryInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mws__ArrayOfRepositoryInfo, sizeof(mws__ArrayOfRepositoryInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_mws__ArrayOfRepositoryInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (mws__ArrayOfRepositoryInfo *)a->soap_in(soap, tag, type);
		}
	};
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTomws__RepositoryInfo(soap, "mws:RepositoryInfo", &(((mws__ArrayOfRepositoryInfo*)a)->RepositoryInfo), "mws:RepositoryInfo"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (mws__ArrayOfRepositoryInfo *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_mws__ArrayOfRepositoryInfo, 0, sizeof(mws__ArrayOfRepositoryInfo), 0, soap_copy_mws__ArrayOfRepositoryInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 mws__ArrayOfRepositoryInfo * SOAP_FMAC6 soap_new_mws__ArrayOfRepositoryInfo(struct soap *soap, int n)
{	return soap_instantiate_mws__ArrayOfRepositoryInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_mws__ArrayOfRepositoryInfo(struct soap *soap, mws__ArrayOfRepositoryInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 mws__ArrayOfRepositoryInfo * SOAP_FMAC4 soap_instantiate_mws__ArrayOfRepositoryInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mws__ArrayOfRepositoryInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mws__ArrayOfRepositoryInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new mws__ArrayOfRepositoryInfo;
		if (size)
			*size = sizeof(mws__ArrayOfRepositoryInfo);
		((mws__ArrayOfRepositoryInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new mws__ArrayOfRepositoryInfo[n];
		if (size)
			*size = n * sizeof(mws__ArrayOfRepositoryInfo);
		for (int i = 0; i < n; i++)
			((mws__ArrayOfRepositoryInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (mws__ArrayOfRepositoryInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mws__ArrayOfRepositoryInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying mws__ArrayOfRepositoryInfo %p -> %p\n", q, p));
	*(mws__ArrayOfRepositoryInfo*)p = *(mws__ArrayOfRepositoryInfo*)q;
}

void mws__RepositoryInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &((mws__RepositoryInfo*)this)->Country);
	soap_serialize_PointerTostd__string(soap, &((mws__RepositoryInfo*)this)->Description);
	soap_serialize_PointerTostd__string(soap, &((mws__RepositoryInfo*)this)->Url);
	/* transient soap skipped */
}

void mws__RepositoryInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	((mws__RepositoryInfo*)this)->Country = NULL;
	soap_default_int(soap, &((mws__RepositoryInfo*)this)->Date);
	soap_default_int(soap, &((mws__RepositoryInfo*)this)->Delay);
	((mws__RepositoryInfo*)this)->Description = NULL;
	soap_default_mws__Integrities(soap, &((mws__RepositoryInfo*)this)->Integrity);
	soap_default_mws__Levels(soap, &((mws__RepositoryInfo*)this)->Level);
	soap_default_mws__RepositoryStatus(soap, &((mws__RepositoryInfo*)this)->Status);
	((mws__RepositoryInfo*)this)->Url = NULL;
	soap_default_int(soap, &((mws__RepositoryInfo*)this)->Version);
	/* transient soap skipped */
}

int mws__RepositoryInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_mws__RepositoryInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int mws__RepositoryInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_mws__RepositoryInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mws__RepositoryInfo(struct soap *soap, const char *tag, int id, const mws__RepositoryInfo *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mws__RepositoryInfo), type);
	soap_out_PointerTostd__string(soap, "mws:Country", -1, &(((mws__RepositoryInfo*)a)->Country), "");
	soap_out_int(soap, "mws:Date", -1, &(((mws__RepositoryInfo*)a)->Date), "");
	soap_out_int(soap, "mws:Delay", -1, &(((mws__RepositoryInfo*)a)->Delay), "");
	soap_out_PointerTostd__string(soap, "mws:Description", -1, &(((mws__RepositoryInfo*)a)->Description), "");
	soap_out_mws__Integrities(soap, "mws:Integrity", -1, &(((mws__RepositoryInfo*)a)->Integrity), "");
	soap_out_mws__Levels(soap, "mws:Level", -1, &(((mws__RepositoryInfo*)a)->Level), "");
	soap_out_mws__RepositoryStatus(soap, "mws:Status", -1, &(((mws__RepositoryInfo*)a)->Status), "");
	soap_out_PointerTostd__string(soap, "mws:Url", -1, &(((mws__RepositoryInfo*)a)->Url), "");
	soap_out_int(soap, "mws:Version", -1, &(((mws__RepositoryInfo*)a)->Version), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *mws__RepositoryInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_mws__RepositoryInfo(soap, this, tag, type);
}

SOAP_FMAC3 mws__RepositoryInfo * SOAP_FMAC4 soap_get_mws__RepositoryInfo(struct soap *soap, mws__RepositoryInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_mws__RepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *mws__RepositoryInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_mws__RepositoryInfo(soap, tag, this, type);
}

SOAP_FMAC3 mws__RepositoryInfo * SOAP_FMAC4 soap_in_mws__RepositoryInfo(struct soap *soap, const char *tag, mws__RepositoryInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (mws__RepositoryInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mws__RepositoryInfo, sizeof(mws__RepositoryInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_mws__RepositoryInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (mws__RepositoryInfo *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_Country1 = 1, soap_flag_Date1 = 1, soap_flag_Delay1 = 1, soap_flag_Description1 = 1, soap_flag_Integrity1 = 1, soap_flag_Level1 = 1, soap_flag_Status1 = 1, soap_flag_Url1 = 1, soap_flag_Version1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Country1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "mws:Country", &(((mws__RepositoryInfo*)a)->Country), "xsd:string"))
				{	soap_flag_Country1--;
					continue;
				}
			if (soap_flag_Date1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "mws:Date", &(((mws__RepositoryInfo*)a)->Date), "xsd:int"))
				{	soap_flag_Date1--;
					continue;
				}
			if (soap_flag_Delay1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "mws:Delay", &(((mws__RepositoryInfo*)a)->Delay), "xsd:int"))
				{	soap_flag_Delay1--;
					continue;
				}
			if (soap_flag_Description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "mws:Description", &(((mws__RepositoryInfo*)a)->Description), "xsd:string"))
				{	soap_flag_Description1--;
					continue;
				}
			if (soap_flag_Integrity1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mws__Integrities(soap, "mws:Integrity", &(((mws__RepositoryInfo*)a)->Integrity), "mws:Integrities"))
				{	soap_flag_Integrity1--;
					continue;
				}
			if (soap_flag_Level1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mws__Levels(soap, "mws:Level", &(((mws__RepositoryInfo*)a)->Level), "mws:Levels"))
				{	soap_flag_Level1--;
					continue;
				}
			if (soap_flag_Status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mws__RepositoryStatus(soap, "mws:Status", &(((mws__RepositoryInfo*)a)->Status), "mws:RepositoryStatus"))
				{	soap_flag_Status1--;
					continue;
				}
			if (soap_flag_Url1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "mws:Url", &(((mws__RepositoryInfo*)a)->Url), "xsd:string"))
				{	soap_flag_Url1--;
					continue;
				}
			if (soap_flag_Version1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "mws:Version", &(((mws__RepositoryInfo*)a)->Version), "xsd:int"))
				{	soap_flag_Version1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Date1 > 0 || soap_flag_Delay1 > 0 || soap_flag_Integrity1 > 0 || soap_flag_Level1 > 0 || soap_flag_Status1 > 0 || soap_flag_Version1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (mws__RepositoryInfo *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_mws__RepositoryInfo, 0, sizeof(mws__RepositoryInfo), 0, soap_copy_mws__RepositoryInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 mws__RepositoryInfo * SOAP_FMAC6 soap_new_mws__RepositoryInfo(struct soap *soap, int n)
{	return soap_instantiate_mws__RepositoryInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_mws__RepositoryInfo(struct soap *soap, mws__RepositoryInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 mws__RepositoryInfo * SOAP_FMAC4 soap_instantiate_mws__RepositoryInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mws__RepositoryInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mws__RepositoryInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new mws__RepositoryInfo;
		if (size)
			*size = sizeof(mws__RepositoryInfo);
		((mws__RepositoryInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new mws__RepositoryInfo[n];
		if (size)
			*size = n * sizeof(mws__RepositoryInfo);
		for (int i = 0; i < n; i++)
			((mws__RepositoryInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (mws__RepositoryInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mws__RepositoryInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying mws__RepositoryInfo %p -> %p\n", q, p));
	*(mws__RepositoryInfo*)p = *(mws__RepositoryInfo*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type);
	soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type);
	soap_putelement(soap, a->fault, "fault", -1, a->__type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient dummy skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient dummy skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	/* transient dummy skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient dummy skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___mws__GetRepositories_(struct soap *soap, const struct __mws__GetRepositories_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mws__GetRepositories(soap, &a->mws__GetRepositories);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___mws__GetRepositories_(struct soap *soap, struct __mws__GetRepositories_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mws__GetRepositories = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___mws__GetRepositories_(struct soap *soap, const struct __mws__GetRepositories_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___mws__GetRepositories_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___mws__GetRepositories_(struct soap *soap, const char *tag, int id, const struct __mws__GetRepositories_ *a, const char *type)
{
	soap_out_PointerTo_mws__GetRepositories(soap, "mws:GetRepositories", -1, &a->mws__GetRepositories, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __mws__GetRepositories_ * SOAP_FMAC4 soap_get___mws__GetRepositories_(struct soap *soap, struct __mws__GetRepositories_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___mws__GetRepositories_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __mws__GetRepositories_ * SOAP_FMAC4 soap_in___mws__GetRepositories_(struct soap *soap, const char *tag, struct __mws__GetRepositories_ *a, const char *type)
{
	short soap_flag_mws__GetRepositories = 1;
	a = (struct __mws__GetRepositories_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___mws__GetRepositories_, sizeof(struct __mws__GetRepositories_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___mws__GetRepositories_(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mws__GetRepositories && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mws__GetRepositories(soap, "mws:GetRepositories", &a->mws__GetRepositories, ""))
				{	soap_flag_mws__GetRepositories--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __mws__GetRepositories_ * SOAP_FMAC6 soap_new___mws__GetRepositories_(struct soap *soap, int n)
{	return soap_instantiate___mws__GetRepositories_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___mws__GetRepositories_(struct soap *soap, struct __mws__GetRepositories_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __mws__GetRepositories_ * SOAP_FMAC4 soap_instantiate___mws__GetRepositories_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___mws__GetRepositories_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___mws__GetRepositories_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __mws__GetRepositories_;
		if (size)
			*size = sizeof(struct __mws__GetRepositories_);
	}
	else
	{	cp->ptr = (void*)new struct __mws__GetRepositories_[n];
		if (size)
			*size = n * sizeof(struct __mws__GetRepositories_);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __mws__GetRepositories_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___mws__GetRepositories_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __mws__GetRepositories_ %p -> %p\n", q, p));
	*(struct __mws__GetRepositories_*)p = *(struct __mws__GetRepositories_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___mws__GetAllRepositories_(struct soap *soap, const struct __mws__GetAllRepositories_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mws__GetAllRepositories(soap, &a->mws__GetAllRepositories);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___mws__GetAllRepositories_(struct soap *soap, struct __mws__GetAllRepositories_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mws__GetAllRepositories = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___mws__GetAllRepositories_(struct soap *soap, const struct __mws__GetAllRepositories_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___mws__GetAllRepositories_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___mws__GetAllRepositories_(struct soap *soap, const char *tag, int id, const struct __mws__GetAllRepositories_ *a, const char *type)
{
	soap_out_PointerTo_mws__GetAllRepositories(soap, "mws:GetAllRepositories", -1, &a->mws__GetAllRepositories, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __mws__GetAllRepositories_ * SOAP_FMAC4 soap_get___mws__GetAllRepositories_(struct soap *soap, struct __mws__GetAllRepositories_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___mws__GetAllRepositories_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __mws__GetAllRepositories_ * SOAP_FMAC4 soap_in___mws__GetAllRepositories_(struct soap *soap, const char *tag, struct __mws__GetAllRepositories_ *a, const char *type)
{
	short soap_flag_mws__GetAllRepositories = 1;
	a = (struct __mws__GetAllRepositories_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___mws__GetAllRepositories_, sizeof(struct __mws__GetAllRepositories_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___mws__GetAllRepositories_(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mws__GetAllRepositories && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mws__GetAllRepositories(soap, "mws:GetAllRepositories", &a->mws__GetAllRepositories, ""))
				{	soap_flag_mws__GetAllRepositories--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __mws__GetAllRepositories_ * SOAP_FMAC6 soap_new___mws__GetAllRepositories_(struct soap *soap, int n)
{	return soap_instantiate___mws__GetAllRepositories_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___mws__GetAllRepositories_(struct soap *soap, struct __mws__GetAllRepositories_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __mws__GetAllRepositories_ * SOAP_FMAC4 soap_instantiate___mws__GetAllRepositories_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___mws__GetAllRepositories_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___mws__GetAllRepositories_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __mws__GetAllRepositories_;
		if (size)
			*size = sizeof(struct __mws__GetAllRepositories_);
	}
	else
	{	cp->ptr = (void*)new struct __mws__GetAllRepositories_[n];
		if (size)
			*size = n * sizeof(struct __mws__GetAllRepositories_);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __mws__GetAllRepositories_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___mws__GetAllRepositories_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __mws__GetAllRepositories_ %p -> %p\n", q, p));
	*(struct __mws__GetAllRepositories_*)p = *(struct __mws__GetAllRepositories_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___mws__PickRepository_(struct soap *soap, const struct __mws__PickRepository_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mws__PickRepository(soap, &a->mws__PickRepository);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___mws__PickRepository_(struct soap *soap, struct __mws__PickRepository_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mws__PickRepository = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___mws__PickRepository_(struct soap *soap, const struct __mws__PickRepository_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___mws__PickRepository_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___mws__PickRepository_(struct soap *soap, const char *tag, int id, const struct __mws__PickRepository_ *a, const char *type)
{
	soap_out_PointerTo_mws__PickRepository(soap, "mws:PickRepository", -1, &a->mws__PickRepository, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __mws__PickRepository_ * SOAP_FMAC4 soap_get___mws__PickRepository_(struct soap *soap, struct __mws__PickRepository_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___mws__PickRepository_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __mws__PickRepository_ * SOAP_FMAC4 soap_in___mws__PickRepository_(struct soap *soap, const char *tag, struct __mws__PickRepository_ *a, const char *type)
{
	short soap_flag_mws__PickRepository = 1;
	a = (struct __mws__PickRepository_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___mws__PickRepository_, sizeof(struct __mws__PickRepository_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___mws__PickRepository_(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mws__PickRepository && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mws__PickRepository(soap, "mws:PickRepository", &a->mws__PickRepository, ""))
				{	soap_flag_mws__PickRepository--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __mws__PickRepository_ * SOAP_FMAC6 soap_new___mws__PickRepository_(struct soap *soap, int n)
{	return soap_instantiate___mws__PickRepository_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___mws__PickRepository_(struct soap *soap, struct __mws__PickRepository_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __mws__PickRepository_ * SOAP_FMAC4 soap_instantiate___mws__PickRepository_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___mws__PickRepository_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___mws__PickRepository_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __mws__PickRepository_;
		if (size)
			*size = sizeof(struct __mws__PickRepository_);
	}
	else
	{	cp->ptr = (void*)new struct __mws__PickRepository_[n];
		if (size)
			*size = n * sizeof(struct __mws__PickRepository_);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __mws__PickRepository_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___mws__PickRepository_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __mws__PickRepository_ %p -> %p\n", q, p));
	*(struct __mws__PickRepository_*)p = *(struct __mws__PickRepository_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___mws__TryGetRepositoryInfo_(struct soap *soap, const struct __mws__TryGetRepositoryInfo_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mws__TryGetRepositoryInfo(soap, &a->mws__TryGetRepositoryInfo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___mws__TryGetRepositoryInfo_(struct soap *soap, struct __mws__TryGetRepositoryInfo_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mws__TryGetRepositoryInfo = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___mws__TryGetRepositoryInfo_(struct soap *soap, const struct __mws__TryGetRepositoryInfo_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___mws__TryGetRepositoryInfo_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___mws__TryGetRepositoryInfo_(struct soap *soap, const char *tag, int id, const struct __mws__TryGetRepositoryInfo_ *a, const char *type)
{
	soap_out_PointerTo_mws__TryGetRepositoryInfo(soap, "mws:TryGetRepositoryInfo", -1, &a->mws__TryGetRepositoryInfo, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __mws__TryGetRepositoryInfo_ * SOAP_FMAC4 soap_get___mws__TryGetRepositoryInfo_(struct soap *soap, struct __mws__TryGetRepositoryInfo_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___mws__TryGetRepositoryInfo_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __mws__TryGetRepositoryInfo_ * SOAP_FMAC4 soap_in___mws__TryGetRepositoryInfo_(struct soap *soap, const char *tag, struct __mws__TryGetRepositoryInfo_ *a, const char *type)
{
	short soap_flag_mws__TryGetRepositoryInfo = 1;
	a = (struct __mws__TryGetRepositoryInfo_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___mws__TryGetRepositoryInfo_, sizeof(struct __mws__TryGetRepositoryInfo_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___mws__TryGetRepositoryInfo_(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mws__TryGetRepositoryInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mws__TryGetRepositoryInfo(soap, "mws:TryGetRepositoryInfo", &a->mws__TryGetRepositoryInfo, ""))
				{	soap_flag_mws__TryGetRepositoryInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __mws__TryGetRepositoryInfo_ * SOAP_FMAC6 soap_new___mws__TryGetRepositoryInfo_(struct soap *soap, int n)
{	return soap_instantiate___mws__TryGetRepositoryInfo_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___mws__TryGetRepositoryInfo_(struct soap *soap, struct __mws__TryGetRepositoryInfo_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __mws__TryGetRepositoryInfo_ * SOAP_FMAC4 soap_instantiate___mws__TryGetRepositoryInfo_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___mws__TryGetRepositoryInfo_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___mws__TryGetRepositoryInfo_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __mws__TryGetRepositoryInfo_;
		if (size)
			*size = sizeof(struct __mws__TryGetRepositoryInfo_);
	}
	else
	{	cp->ptr = (void*)new struct __mws__TryGetRepositoryInfo_[n];
		if (size)
			*size = n * sizeof(struct __mws__TryGetRepositoryInfo_);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __mws__TryGetRepositoryInfo_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___mws__TryGetRepositoryInfo_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __mws__TryGetRepositoryInfo_ %p -> %p\n", q, p));
	*(struct __mws__TryGetRepositoryInfo_*)p = *(struct __mws__TryGetRepositoryInfo_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___mws__GetRepositories(struct soap *soap, const struct __mws__GetRepositories *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mws__GetRepositories(soap, &a->mws__GetRepositories);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___mws__GetRepositories(struct soap *soap, struct __mws__GetRepositories *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mws__GetRepositories = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___mws__GetRepositories(struct soap *soap, const struct __mws__GetRepositories *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___mws__GetRepositories(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___mws__GetRepositories(struct soap *soap, const char *tag, int id, const struct __mws__GetRepositories *a, const char *type)
{
	soap_out_PointerTo_mws__GetRepositories(soap, "mws:GetRepositories", -1, &a->mws__GetRepositories, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __mws__GetRepositories * SOAP_FMAC4 soap_get___mws__GetRepositories(struct soap *soap, struct __mws__GetRepositories *p, const char *tag, const char *type)
{
	if ((p = soap_in___mws__GetRepositories(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __mws__GetRepositories * SOAP_FMAC4 soap_in___mws__GetRepositories(struct soap *soap, const char *tag, struct __mws__GetRepositories *a, const char *type)
{
	short soap_flag_mws__GetRepositories = 1;
	a = (struct __mws__GetRepositories *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___mws__GetRepositories, sizeof(struct __mws__GetRepositories), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___mws__GetRepositories(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mws__GetRepositories && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mws__GetRepositories(soap, "mws:GetRepositories", &a->mws__GetRepositories, ""))
				{	soap_flag_mws__GetRepositories--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __mws__GetRepositories * SOAP_FMAC6 soap_new___mws__GetRepositories(struct soap *soap, int n)
{	return soap_instantiate___mws__GetRepositories(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___mws__GetRepositories(struct soap *soap, struct __mws__GetRepositories *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __mws__GetRepositories * SOAP_FMAC4 soap_instantiate___mws__GetRepositories(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___mws__GetRepositories(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___mws__GetRepositories, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __mws__GetRepositories;
		if (size)
			*size = sizeof(struct __mws__GetRepositories);
	}
	else
	{	cp->ptr = (void*)new struct __mws__GetRepositories[n];
		if (size)
			*size = n * sizeof(struct __mws__GetRepositories);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __mws__GetRepositories*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___mws__GetRepositories(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __mws__GetRepositories %p -> %p\n", q, p));
	*(struct __mws__GetRepositories*)p = *(struct __mws__GetRepositories*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___mws__GetAllRepositories(struct soap *soap, const struct __mws__GetAllRepositories *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mws__GetAllRepositories(soap, &a->mws__GetAllRepositories);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___mws__GetAllRepositories(struct soap *soap, struct __mws__GetAllRepositories *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mws__GetAllRepositories = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___mws__GetAllRepositories(struct soap *soap, const struct __mws__GetAllRepositories *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___mws__GetAllRepositories(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___mws__GetAllRepositories(struct soap *soap, const char *tag, int id, const struct __mws__GetAllRepositories *a, const char *type)
{
	soap_out_PointerTo_mws__GetAllRepositories(soap, "mws:GetAllRepositories", -1, &a->mws__GetAllRepositories, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __mws__GetAllRepositories * SOAP_FMAC4 soap_get___mws__GetAllRepositories(struct soap *soap, struct __mws__GetAllRepositories *p, const char *tag, const char *type)
{
	if ((p = soap_in___mws__GetAllRepositories(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __mws__GetAllRepositories * SOAP_FMAC4 soap_in___mws__GetAllRepositories(struct soap *soap, const char *tag, struct __mws__GetAllRepositories *a, const char *type)
{
	short soap_flag_mws__GetAllRepositories = 1;
	a = (struct __mws__GetAllRepositories *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___mws__GetAllRepositories, sizeof(struct __mws__GetAllRepositories), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___mws__GetAllRepositories(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mws__GetAllRepositories && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mws__GetAllRepositories(soap, "mws:GetAllRepositories", &a->mws__GetAllRepositories, ""))
				{	soap_flag_mws__GetAllRepositories--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __mws__GetAllRepositories * SOAP_FMAC6 soap_new___mws__GetAllRepositories(struct soap *soap, int n)
{	return soap_instantiate___mws__GetAllRepositories(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___mws__GetAllRepositories(struct soap *soap, struct __mws__GetAllRepositories *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __mws__GetAllRepositories * SOAP_FMAC4 soap_instantiate___mws__GetAllRepositories(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___mws__GetAllRepositories(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___mws__GetAllRepositories, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __mws__GetAllRepositories;
		if (size)
			*size = sizeof(struct __mws__GetAllRepositories);
	}
	else
	{	cp->ptr = (void*)new struct __mws__GetAllRepositories[n];
		if (size)
			*size = n * sizeof(struct __mws__GetAllRepositories);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __mws__GetAllRepositories*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___mws__GetAllRepositories(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __mws__GetAllRepositories %p -> %p\n", q, p));
	*(struct __mws__GetAllRepositories*)p = *(struct __mws__GetAllRepositories*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___mws__PickRepository(struct soap *soap, const struct __mws__PickRepository *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mws__PickRepository(soap, &a->mws__PickRepository);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___mws__PickRepository(struct soap *soap, struct __mws__PickRepository *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mws__PickRepository = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___mws__PickRepository(struct soap *soap, const struct __mws__PickRepository *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___mws__PickRepository(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___mws__PickRepository(struct soap *soap, const char *tag, int id, const struct __mws__PickRepository *a, const char *type)
{
	soap_out_PointerTo_mws__PickRepository(soap, "mws:PickRepository", -1, &a->mws__PickRepository, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __mws__PickRepository * SOAP_FMAC4 soap_get___mws__PickRepository(struct soap *soap, struct __mws__PickRepository *p, const char *tag, const char *type)
{
	if ((p = soap_in___mws__PickRepository(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __mws__PickRepository * SOAP_FMAC4 soap_in___mws__PickRepository(struct soap *soap, const char *tag, struct __mws__PickRepository *a, const char *type)
{
	short soap_flag_mws__PickRepository = 1;
	a = (struct __mws__PickRepository *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___mws__PickRepository, sizeof(struct __mws__PickRepository), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___mws__PickRepository(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mws__PickRepository && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mws__PickRepository(soap, "mws:PickRepository", &a->mws__PickRepository, ""))
				{	soap_flag_mws__PickRepository--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __mws__PickRepository * SOAP_FMAC6 soap_new___mws__PickRepository(struct soap *soap, int n)
{	return soap_instantiate___mws__PickRepository(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___mws__PickRepository(struct soap *soap, struct __mws__PickRepository *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __mws__PickRepository * SOAP_FMAC4 soap_instantiate___mws__PickRepository(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___mws__PickRepository(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___mws__PickRepository, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __mws__PickRepository;
		if (size)
			*size = sizeof(struct __mws__PickRepository);
	}
	else
	{	cp->ptr = (void*)new struct __mws__PickRepository[n];
		if (size)
			*size = n * sizeof(struct __mws__PickRepository);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __mws__PickRepository*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___mws__PickRepository(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __mws__PickRepository %p -> %p\n", q, p));
	*(struct __mws__PickRepository*)p = *(struct __mws__PickRepository*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___mws__TryGetRepositoryInfo(struct soap *soap, const struct __mws__TryGetRepositoryInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mws__TryGetRepositoryInfo(soap, &a->mws__TryGetRepositoryInfo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___mws__TryGetRepositoryInfo(struct soap *soap, struct __mws__TryGetRepositoryInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mws__TryGetRepositoryInfo = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___mws__TryGetRepositoryInfo(struct soap *soap, const struct __mws__TryGetRepositoryInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___mws__TryGetRepositoryInfo(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___mws__TryGetRepositoryInfo(struct soap *soap, const char *tag, int id, const struct __mws__TryGetRepositoryInfo *a, const char *type)
{
	soap_out_PointerTo_mws__TryGetRepositoryInfo(soap, "mws:TryGetRepositoryInfo", -1, &a->mws__TryGetRepositoryInfo, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __mws__TryGetRepositoryInfo * SOAP_FMAC4 soap_get___mws__TryGetRepositoryInfo(struct soap *soap, struct __mws__TryGetRepositoryInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___mws__TryGetRepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __mws__TryGetRepositoryInfo * SOAP_FMAC4 soap_in___mws__TryGetRepositoryInfo(struct soap *soap, const char *tag, struct __mws__TryGetRepositoryInfo *a, const char *type)
{
	short soap_flag_mws__TryGetRepositoryInfo = 1;
	a = (struct __mws__TryGetRepositoryInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___mws__TryGetRepositoryInfo, sizeof(struct __mws__TryGetRepositoryInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___mws__TryGetRepositoryInfo(soap, a);
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mws__TryGetRepositoryInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mws__TryGetRepositoryInfo(soap, "mws:TryGetRepositoryInfo", &a->mws__TryGetRepositoryInfo, ""))
				{	soap_flag_mws__TryGetRepositoryInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __mws__TryGetRepositoryInfo * SOAP_FMAC6 soap_new___mws__TryGetRepositoryInfo(struct soap *soap, int n)
{	return soap_instantiate___mws__TryGetRepositoryInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___mws__TryGetRepositoryInfo(struct soap *soap, struct __mws__TryGetRepositoryInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __mws__TryGetRepositoryInfo * SOAP_FMAC4 soap_instantiate___mws__TryGetRepositoryInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___mws__TryGetRepositoryInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___mws__TryGetRepositoryInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __mws__TryGetRepositoryInfo;
		if (size)
			*size = sizeof(struct __mws__TryGetRepositoryInfo);
	}
	else
	{	cp->ptr = (void*)new struct __mws__TryGetRepositoryInfo[n];
		if (size)
			*size = n * sizeof(struct __mws__TryGetRepositoryInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __mws__TryGetRepositoryInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___mws__TryGetRepositoryInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __mws__TryGetRepositoryInfo %p -> %p\n", q, p));
	*(struct __mws__TryGetRepositoryInfo*)p = *(struct __mws__TryGetRepositoryInfo*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mws__GetRepositoriesResponse(struct soap *soap, _mws__GetRepositoriesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mws__GetRepositoriesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mws__GetRepositoriesResponse(struct soap *soap, _mws__GetRepositoriesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mws__GetRepositoriesResponse);
	if (soap_out_PointerTo_mws__GetRepositoriesResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mws__GetRepositoriesResponse(struct soap *soap, const char *tag, int id, _mws__GetRepositoriesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mws__GetRepositoriesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mws__GetRepositoriesResponse ** SOAP_FMAC4 soap_get_PointerTo_mws__GetRepositoriesResponse(struct soap *soap, _mws__GetRepositoriesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mws__GetRepositoriesResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mws__GetRepositoriesResponse ** SOAP_FMAC4 soap_in_PointerTo_mws__GetRepositoriesResponse(struct soap *soap, const char *tag, _mws__GetRepositoriesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_mws__GetRepositoriesResponse **)soap_malloc(soap, sizeof(_mws__GetRepositoriesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mws__GetRepositoriesResponse *)soap_instantiate__mws__GetRepositoriesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mws__GetRepositoriesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mws__GetRepositoriesResponse, sizeof(_mws__GetRepositoriesResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mws__GetRepositories(struct soap *soap, _mws__GetRepositories *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mws__GetRepositories))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mws__GetRepositories(struct soap *soap, _mws__GetRepositories *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mws__GetRepositories);
	if (soap_out_PointerTo_mws__GetRepositories(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mws__GetRepositories(struct soap *soap, const char *tag, int id, _mws__GetRepositories *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mws__GetRepositories);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mws__GetRepositories ** SOAP_FMAC4 soap_get_PointerTo_mws__GetRepositories(struct soap *soap, _mws__GetRepositories **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mws__GetRepositories(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mws__GetRepositories ** SOAP_FMAC4 soap_in_PointerTo_mws__GetRepositories(struct soap *soap, const char *tag, _mws__GetRepositories **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_mws__GetRepositories **)soap_malloc(soap, sizeof(_mws__GetRepositories *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mws__GetRepositories *)soap_instantiate__mws__GetRepositories(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mws__GetRepositories **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mws__GetRepositories, sizeof(_mws__GetRepositories), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mws__GetAllRepositoriesResponse(struct soap *soap, _mws__GetAllRepositoriesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mws__GetAllRepositoriesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mws__GetAllRepositoriesResponse(struct soap *soap, _mws__GetAllRepositoriesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mws__GetAllRepositoriesResponse);
	if (soap_out_PointerTo_mws__GetAllRepositoriesResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mws__GetAllRepositoriesResponse(struct soap *soap, const char *tag, int id, _mws__GetAllRepositoriesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mws__GetAllRepositoriesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mws__GetAllRepositoriesResponse ** SOAP_FMAC4 soap_get_PointerTo_mws__GetAllRepositoriesResponse(struct soap *soap, _mws__GetAllRepositoriesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mws__GetAllRepositoriesResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mws__GetAllRepositoriesResponse ** SOAP_FMAC4 soap_in_PointerTo_mws__GetAllRepositoriesResponse(struct soap *soap, const char *tag, _mws__GetAllRepositoriesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_mws__GetAllRepositoriesResponse **)soap_malloc(soap, sizeof(_mws__GetAllRepositoriesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mws__GetAllRepositoriesResponse *)soap_instantiate__mws__GetAllRepositoriesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mws__GetAllRepositoriesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mws__GetAllRepositoriesResponse, sizeof(_mws__GetAllRepositoriesResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mws__GetAllRepositories(struct soap *soap, _mws__GetAllRepositories *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mws__GetAllRepositories))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mws__GetAllRepositories(struct soap *soap, _mws__GetAllRepositories *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mws__GetAllRepositories);
	if (soap_out_PointerTo_mws__GetAllRepositories(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mws__GetAllRepositories(struct soap *soap, const char *tag, int id, _mws__GetAllRepositories *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mws__GetAllRepositories);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mws__GetAllRepositories ** SOAP_FMAC4 soap_get_PointerTo_mws__GetAllRepositories(struct soap *soap, _mws__GetAllRepositories **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mws__GetAllRepositories(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mws__GetAllRepositories ** SOAP_FMAC4 soap_in_PointerTo_mws__GetAllRepositories(struct soap *soap, const char *tag, _mws__GetAllRepositories **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_mws__GetAllRepositories **)soap_malloc(soap, sizeof(_mws__GetAllRepositories *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mws__GetAllRepositories *)soap_instantiate__mws__GetAllRepositories(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mws__GetAllRepositories **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mws__GetAllRepositories, sizeof(_mws__GetAllRepositories), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mws__PickRepositoryResponse(struct soap *soap, _mws__PickRepositoryResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mws__PickRepositoryResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mws__PickRepositoryResponse(struct soap *soap, _mws__PickRepositoryResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mws__PickRepositoryResponse);
	if (soap_out_PointerTo_mws__PickRepositoryResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mws__PickRepositoryResponse(struct soap *soap, const char *tag, int id, _mws__PickRepositoryResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mws__PickRepositoryResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mws__PickRepositoryResponse ** SOAP_FMAC4 soap_get_PointerTo_mws__PickRepositoryResponse(struct soap *soap, _mws__PickRepositoryResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mws__PickRepositoryResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mws__PickRepositoryResponse ** SOAP_FMAC4 soap_in_PointerTo_mws__PickRepositoryResponse(struct soap *soap, const char *tag, _mws__PickRepositoryResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_mws__PickRepositoryResponse **)soap_malloc(soap, sizeof(_mws__PickRepositoryResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mws__PickRepositoryResponse *)soap_instantiate__mws__PickRepositoryResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mws__PickRepositoryResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mws__PickRepositoryResponse, sizeof(_mws__PickRepositoryResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mws__PickRepository(struct soap *soap, _mws__PickRepository *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mws__PickRepository))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mws__PickRepository(struct soap *soap, _mws__PickRepository *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mws__PickRepository);
	if (soap_out_PointerTo_mws__PickRepository(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mws__PickRepository(struct soap *soap, const char *tag, int id, _mws__PickRepository *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mws__PickRepository);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mws__PickRepository ** SOAP_FMAC4 soap_get_PointerTo_mws__PickRepository(struct soap *soap, _mws__PickRepository **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mws__PickRepository(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mws__PickRepository ** SOAP_FMAC4 soap_in_PointerTo_mws__PickRepository(struct soap *soap, const char *tag, _mws__PickRepository **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_mws__PickRepository **)soap_malloc(soap, sizeof(_mws__PickRepository *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mws__PickRepository *)soap_instantiate__mws__PickRepository(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mws__PickRepository **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mws__PickRepository, sizeof(_mws__PickRepository), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mws__TryGetRepositoryInfoResponse(struct soap *soap, _mws__TryGetRepositoryInfoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mws__TryGetRepositoryInfoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mws__TryGetRepositoryInfoResponse(struct soap *soap, _mws__TryGetRepositoryInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mws__TryGetRepositoryInfoResponse);
	if (soap_out_PointerTo_mws__TryGetRepositoryInfoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mws__TryGetRepositoryInfoResponse(struct soap *soap, const char *tag, int id, _mws__TryGetRepositoryInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mws__TryGetRepositoryInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mws__TryGetRepositoryInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_mws__TryGetRepositoryInfoResponse(struct soap *soap, _mws__TryGetRepositoryInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mws__TryGetRepositoryInfoResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mws__TryGetRepositoryInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_mws__TryGetRepositoryInfoResponse(struct soap *soap, const char *tag, _mws__TryGetRepositoryInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_mws__TryGetRepositoryInfoResponse **)soap_malloc(soap, sizeof(_mws__TryGetRepositoryInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mws__TryGetRepositoryInfoResponse *)soap_instantiate__mws__TryGetRepositoryInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mws__TryGetRepositoryInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mws__TryGetRepositoryInfoResponse, sizeof(_mws__TryGetRepositoryInfoResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mws__TryGetRepositoryInfo(struct soap *soap, _mws__TryGetRepositoryInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mws__TryGetRepositoryInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mws__TryGetRepositoryInfo(struct soap *soap, _mws__TryGetRepositoryInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mws__TryGetRepositoryInfo);
	if (soap_out_PointerTo_mws__TryGetRepositoryInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mws__TryGetRepositoryInfo(struct soap *soap, const char *tag, int id, _mws__TryGetRepositoryInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mws__TryGetRepositoryInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mws__TryGetRepositoryInfo ** SOAP_FMAC4 soap_get_PointerTo_mws__TryGetRepositoryInfo(struct soap *soap, _mws__TryGetRepositoryInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mws__TryGetRepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mws__TryGetRepositoryInfo ** SOAP_FMAC4 soap_in_PointerTo_mws__TryGetRepositoryInfo(struct soap *soap, const char *tag, _mws__TryGetRepositoryInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (_mws__TryGetRepositoryInfo **)soap_malloc(soap, sizeof(_mws__TryGetRepositoryInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mws__TryGetRepositoryInfo *)soap_instantiate__mws__TryGetRepositoryInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mws__TryGetRepositoryInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mws__TryGetRepositoryInfo, sizeof(_mws__TryGetRepositoryInfo), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomws__ArrayOfRepositoryInfo(struct soap *soap, mws__ArrayOfRepositoryInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_mws__ArrayOfRepositoryInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomws__ArrayOfRepositoryInfo(struct soap *soap, mws__ArrayOfRepositoryInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTomws__ArrayOfRepositoryInfo);
	if (soap_out_PointerTomws__ArrayOfRepositoryInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomws__ArrayOfRepositoryInfo(struct soap *soap, const char *tag, int id, mws__ArrayOfRepositoryInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_mws__ArrayOfRepositoryInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 mws__ArrayOfRepositoryInfo ** SOAP_FMAC4 soap_get_PointerTomws__ArrayOfRepositoryInfo(struct soap *soap, mws__ArrayOfRepositoryInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTomws__ArrayOfRepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 mws__ArrayOfRepositoryInfo ** SOAP_FMAC4 soap_in_PointerTomws__ArrayOfRepositoryInfo(struct soap *soap, const char *tag, mws__ArrayOfRepositoryInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (mws__ArrayOfRepositoryInfo **)soap_malloc(soap, sizeof(mws__ArrayOfRepositoryInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (mws__ArrayOfRepositoryInfo *)soap_instantiate_mws__ArrayOfRepositoryInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (mws__ArrayOfRepositoryInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_mws__ArrayOfRepositoryInfo, sizeof(mws__ArrayOfRepositoryInfo), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomws__RepositoryInfo(struct soap *soap, mws__RepositoryInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_mws__RepositoryInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomws__RepositoryInfo(struct soap *soap, mws__RepositoryInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTomws__RepositoryInfo);
	if (soap_out_PointerTomws__RepositoryInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomws__RepositoryInfo(struct soap *soap, const char *tag, int id, mws__RepositoryInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_mws__RepositoryInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 mws__RepositoryInfo ** SOAP_FMAC4 soap_get_PointerTomws__RepositoryInfo(struct soap *soap, mws__RepositoryInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTomws__RepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 mws__RepositoryInfo ** SOAP_FMAC4 soap_in_PointerTomws__RepositoryInfo(struct soap *soap, const char *tag, mws__RepositoryInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (mws__RepositoryInfo **)soap_malloc(soap, sizeof(mws__RepositoryInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (mws__RepositoryInfo *)soap_instantiate_mws__RepositoryInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (mws__RepositoryInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_mws__RepositoryInfo, sizeof(mws__RepositoryInfo), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTomws__RepositoryInfo(struct soap *soap, const std::vector<mws__RepositoryInfo * >*a)
{
	for (std::vector<mws__RepositoryInfo * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTomws__RepositoryInfo(soap, &(*i));
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTomws__RepositoryInfo(struct soap *soap, std::vector<mws__RepositoryInfo * >*p)
{
	p->clear();
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTomws__RepositoryInfo(struct soap *soap, const char *tag, int id, const std::vector<mws__RepositoryInfo * >*a, const char *type)
{
	for (std::vector<mws__RepositoryInfo * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTomws__RepositoryInfo(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<mws__RepositoryInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTomws__RepositoryInfo(struct soap *soap, const char *tag, std::vector<mws__RepositoryInfo * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTomws__RepositoryInfo(soap, -1)))
		return NULL;
	mws__RepositoryInfo *n;
	mws__RepositoryInfo **p;
	do
	{	soap_revert(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_mws__RepositoryInfo, SOAP_TYPE_std__vectorTemplateOfPointerTomws__RepositoryInfo, sizeof(mws__RepositoryInfo), 1))
				break;
			if (!(p = soap_in_PointerTomws__RepositoryInfo(soap, tag, NULL, "mws:RepositoryInfo")))
				break;
		}
		else
		{	n = NULL;
			if (!soap_in_PointerTomws__RepositoryInfo(soap, tag, &n, "mws:RepositoryInfo"))
				break;
		}
		a->push_back(n);
	}
	while (!soap_element_begin_in(soap, tag, 1));
	if (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG)
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<mws__RepositoryInfo * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTomws__RepositoryInfo(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTomws__RepositoryInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTomws__RepositoryInfo(struct soap *soap, std::vector<mws__RepositoryInfo * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<mws__RepositoryInfo * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTomws__RepositoryInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTomws__RepositoryInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTomws__RepositoryInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<mws__RepositoryInfo * >;
		if (size)
			*size = sizeof(std::vector<mws__RepositoryInfo * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<mws__RepositoryInfo * >[n];
		if (size)
			*size = n * sizeof(std::vector<mws__RepositoryInfo * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<mws__RepositoryInfo * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTomws__RepositoryInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<mws__RepositoryInfo * > %p -> %p\n", q, p));
	*(std::vector<mws__RepositoryInfo * >*)p = *(std::vector<mws__RepositoryInfo * >*)q;
}

/* End of repositoryC.cpp */
