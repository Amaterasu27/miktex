/* repositoryC.cpp
   Generated by gSOAP 2.7.9d from C:/work3/miktex-2.6/Libraries/MiKTeX/WebServiceClients/Repository/Repository.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "repositoryH.h"

SOAP_SOURCE_STAMP("@(#) repositoryC.cpp ver 2.7.9d 2007-04-01 17:57:26 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_mtrep__RepositoryStatus:
		return soap_in_mtrep__RepositoryStatus(soap, NULL, NULL, "mtrep:RepositoryStatus");
	case SOAP_TYPE_mtrep__Levels:
		return soap_in_mtrep__Levels(soap, NULL, NULL, "mtrep:Levels");
	case SOAP_TYPE_mtrep__Integrities:
		return soap_in_mtrep__Integrities(soap, NULL, NULL, "mtrep:Integrities");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_mtrep__ArrayOfRepositoryInfo:
		return soap_in_mtrep__ArrayOfRepositoryInfo(soap, NULL, NULL, "mtrep:ArrayOfRepositoryInfo");
	case SOAP_TYPE_mtrep__RepositoryInfo:
		return soap_in_mtrep__RepositoryInfo(soap, NULL, NULL, "mtrep:RepositoryInfo");
	case SOAP_TYPE_PointerTo_ns1__GetListCreationTimeResponse:
		return soap_in_PointerTo_ns1__GetListCreationTimeResponse(soap, NULL, NULL, "ns1:GetListCreationTimeResponse");
	case SOAP_TYPE_PointerTo_ns1__GetListCreationTime:
		return soap_in_PointerTo_ns1__GetListCreationTime(soap, NULL, NULL, "ns1:GetListCreationTime");
	case SOAP_TYPE_PointerTo_mtrep__GetRepositoriesResponse:
		return soap_in_PointerTo_mtrep__GetRepositoriesResponse(soap, NULL, NULL, "mtrep:GetRepositoriesResponse");
	case SOAP_TYPE_PointerTo_mtrep__GetRepositories:
		return soap_in_PointerTo_mtrep__GetRepositories(soap, NULL, NULL, "mtrep:GetRepositories");
	case SOAP_TYPE_PointerTo_mtrep__GetAllRepositoriesResponse:
		return soap_in_PointerTo_mtrep__GetAllRepositoriesResponse(soap, NULL, NULL, "mtrep:GetAllRepositoriesResponse");
	case SOAP_TYPE_PointerTo_mtrep__GetAllRepositories:
		return soap_in_PointerTo_mtrep__GetAllRepositories(soap, NULL, NULL, "mtrep:GetAllRepositories");
	case SOAP_TYPE_PointerTo_mtrep__PickRepositoryResponse:
		return soap_in_PointerTo_mtrep__PickRepositoryResponse(soap, NULL, NULL, "mtrep:PickRepositoryResponse");
	case SOAP_TYPE_PointerTo_mtrep__PickRepository:
		return soap_in_PointerTo_mtrep__PickRepository(soap, NULL, NULL, "mtrep:PickRepository");
	case SOAP_TYPE_PointerTo_mtrep__TryGetRepositoryInfoResponse:
		return soap_in_PointerTo_mtrep__TryGetRepositoryInfoResponse(soap, NULL, NULL, "mtrep:TryGetRepositoryInfoResponse");
	case SOAP_TYPE_PointerTo_mtrep__TryGetRepositoryInfo:
		return soap_in_PointerTo_mtrep__TryGetRepositoryInfo(soap, NULL, NULL, "mtrep:TryGetRepositoryInfo");
	case SOAP_TYPE_PointerTomtrep__ArrayOfRepositoryInfo:
		return soap_in_PointerTomtrep__ArrayOfRepositoryInfo(soap, NULL, NULL, "mtrep:ArrayOfRepositoryInfo");
	case SOAP_TYPE_PointerTomtrep__RepositoryInfo:
		return soap_in_PointerTomtrep__RepositoryInfo(soap, NULL, NULL, "mtrep:RepositoryInfo");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mtrep:RepositoryStatus"))
		{	*type = SOAP_TYPE_mtrep__RepositoryStatus;
			return soap_in_mtrep__RepositoryStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mtrep:Levels"))
		{	*type = SOAP_TYPE_mtrep__Levels;
			return soap_in_mtrep__Levels(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mtrep:Integrities"))
		{	*type = SOAP_TYPE_mtrep__Integrities;
			return soap_in_mtrep__Integrities(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mtrep:ArrayOfRepositoryInfo"))
		{	*type = SOAP_TYPE_mtrep__ArrayOfRepositoryInfo;
			return soap_in_mtrep__ArrayOfRepositoryInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mtrep:RepositoryInfo"))
		{	*type = SOAP_TYPE_mtrep__RepositoryInfo;
			return soap_in_mtrep__RepositoryInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:GetListCreationTimeResponse"))
		{	*type = SOAP_TYPE__ns1__GetListCreationTimeResponse;
			return soap_in__ns1__GetListCreationTimeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetListCreationTime"))
		{	*type = SOAP_TYPE__ns1__GetListCreationTime;
			return soap_in__ns1__GetListCreationTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mtrep:GetRepositoriesResponse"))
		{	*type = SOAP_TYPE__mtrep__GetRepositoriesResponse;
			return soap_in__mtrep__GetRepositoriesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mtrep:GetRepositories"))
		{	*type = SOAP_TYPE__mtrep__GetRepositories;
			return soap_in__mtrep__GetRepositories(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mtrep:GetAllRepositoriesResponse"))
		{	*type = SOAP_TYPE__mtrep__GetAllRepositoriesResponse;
			return soap_in__mtrep__GetAllRepositoriesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mtrep:GetAllRepositories"))
		{	*type = SOAP_TYPE__mtrep__GetAllRepositories;
			return soap_in__mtrep__GetAllRepositories(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mtrep:PickRepositoryResponse"))
		{	*type = SOAP_TYPE__mtrep__PickRepositoryResponse;
			return soap_in__mtrep__PickRepositoryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mtrep:PickRepository"))
		{	*type = SOAP_TYPE__mtrep__PickRepository;
			return soap_in__mtrep__PickRepository(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mtrep:TryGetRepositoryInfoResponse"))
		{	*type = SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse;
			return soap_in__mtrep__TryGetRepositoryInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mtrep:TryGetRepositoryInfo"))
		{	*type = SOAP_TYPE__mtrep__TryGetRepositoryInfo;
			return soap_in__mtrep__TryGetRepositoryInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_mtrep__RepositoryStatus:
		return soap_out_mtrep__RepositoryStatus(soap, tag, id, (const enum mtrep__RepositoryStatus *)ptr, "mtrep:RepositoryStatus");
	case SOAP_TYPE_mtrep__Levels:
		return soap_out_mtrep__Levels(soap, tag, id, (const enum mtrep__Levels *)ptr, "mtrep:Levels");
	case SOAP_TYPE_mtrep__Integrities:
		return soap_out_mtrep__Integrities(soap, tag, id, (const enum mtrep__Integrities *)ptr, "mtrep:Integrities");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__GetListCreationTimeResponse:
		return ((_ns1__GetListCreationTimeResponse *)ptr)->soap_out(soap, "ns1:GetListCreationTimeResponse", id, NULL);
	case SOAP_TYPE__ns1__GetListCreationTime:
		return ((_ns1__GetListCreationTime *)ptr)->soap_out(soap, "ns1:GetListCreationTime", id, NULL);
	case SOAP_TYPE__mtrep__GetRepositoriesResponse:
		return ((_mtrep__GetRepositoriesResponse *)ptr)->soap_out(soap, "mtrep:GetRepositoriesResponse", id, NULL);
	case SOAP_TYPE__mtrep__GetRepositories:
		return ((_mtrep__GetRepositories *)ptr)->soap_out(soap, "mtrep:GetRepositories", id, NULL);
	case SOAP_TYPE__mtrep__GetAllRepositoriesResponse:
		return ((_mtrep__GetAllRepositoriesResponse *)ptr)->soap_out(soap, "mtrep:GetAllRepositoriesResponse", id, NULL);
	case SOAP_TYPE__mtrep__GetAllRepositories:
		return ((_mtrep__GetAllRepositories *)ptr)->soap_out(soap, "mtrep:GetAllRepositories", id, NULL);
	case SOAP_TYPE__mtrep__PickRepositoryResponse:
		return ((_mtrep__PickRepositoryResponse *)ptr)->soap_out(soap, "mtrep:PickRepositoryResponse", id, NULL);
	case SOAP_TYPE__mtrep__PickRepository:
		return ((_mtrep__PickRepository *)ptr)->soap_out(soap, "mtrep:PickRepository", id, NULL);
	case SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse:
		return ((_mtrep__TryGetRepositoryInfoResponse *)ptr)->soap_out(soap, "mtrep:TryGetRepositoryInfoResponse", id, NULL);
	case SOAP_TYPE__mtrep__TryGetRepositoryInfo:
		return ((_mtrep__TryGetRepositoryInfo *)ptr)->soap_out(soap, "mtrep:TryGetRepositoryInfo", id, NULL);
	case SOAP_TYPE_mtrep__ArrayOfRepositoryInfo:
		return ((mtrep__ArrayOfRepositoryInfo *)ptr)->soap_out(soap, tag, id, "mtrep:ArrayOfRepositoryInfo");
	case SOAP_TYPE_mtrep__RepositoryInfo:
		return ((mtrep__RepositoryInfo *)ptr)->soap_out(soap, tag, id, "mtrep:RepositoryInfo");
	case SOAP_TYPE_PointerTo_ns1__GetListCreationTimeResponse:
		return soap_out_PointerTo_ns1__GetListCreationTimeResponse(soap, tag, id, (_ns1__GetListCreationTimeResponse *const*)ptr, "ns1:GetListCreationTimeResponse");
	case SOAP_TYPE_PointerTo_ns1__GetListCreationTime:
		return soap_out_PointerTo_ns1__GetListCreationTime(soap, tag, id, (_ns1__GetListCreationTime *const*)ptr, "ns1:GetListCreationTime");
	case SOAP_TYPE_PointerTo_mtrep__GetRepositoriesResponse:
		return soap_out_PointerTo_mtrep__GetRepositoriesResponse(soap, tag, id, (_mtrep__GetRepositoriesResponse *const*)ptr, "mtrep:GetRepositoriesResponse");
	case SOAP_TYPE_PointerTo_mtrep__GetRepositories:
		return soap_out_PointerTo_mtrep__GetRepositories(soap, tag, id, (_mtrep__GetRepositories *const*)ptr, "mtrep:GetRepositories");
	case SOAP_TYPE_PointerTo_mtrep__GetAllRepositoriesResponse:
		return soap_out_PointerTo_mtrep__GetAllRepositoriesResponse(soap, tag, id, (_mtrep__GetAllRepositoriesResponse *const*)ptr, "mtrep:GetAllRepositoriesResponse");
	case SOAP_TYPE_PointerTo_mtrep__GetAllRepositories:
		return soap_out_PointerTo_mtrep__GetAllRepositories(soap, tag, id, (_mtrep__GetAllRepositories *const*)ptr, "mtrep:GetAllRepositories");
	case SOAP_TYPE_PointerTo_mtrep__PickRepositoryResponse:
		return soap_out_PointerTo_mtrep__PickRepositoryResponse(soap, tag, id, (_mtrep__PickRepositoryResponse *const*)ptr, "mtrep:PickRepositoryResponse");
	case SOAP_TYPE_PointerTo_mtrep__PickRepository:
		return soap_out_PointerTo_mtrep__PickRepository(soap, tag, id, (_mtrep__PickRepository *const*)ptr, "mtrep:PickRepository");
	case SOAP_TYPE_PointerTo_mtrep__TryGetRepositoryInfoResponse:
		return soap_out_PointerTo_mtrep__TryGetRepositoryInfoResponse(soap, tag, id, (_mtrep__TryGetRepositoryInfoResponse *const*)ptr, "mtrep:TryGetRepositoryInfoResponse");
	case SOAP_TYPE_PointerTo_mtrep__TryGetRepositoryInfo:
		return soap_out_PointerTo_mtrep__TryGetRepositoryInfo(soap, tag, id, (_mtrep__TryGetRepositoryInfo *const*)ptr, "mtrep:TryGetRepositoryInfo");
	case SOAP_TYPE_PointerTomtrep__ArrayOfRepositoryInfo:
		return soap_out_PointerTomtrep__ArrayOfRepositoryInfo(soap, tag, id, (mtrep__ArrayOfRepositoryInfo *const*)ptr, "mtrep:ArrayOfRepositoryInfo");
	case SOAP_TYPE_PointerTomtrep__RepositoryInfo:
		return soap_out_PointerTomtrep__RepositoryInfo(soap, tag, id, (mtrep__RepositoryInfo *const*)ptr, "mtrep:RepositoryInfo");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char**)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__GetListCreationTimeResponse:
		((_ns1__GetListCreationTimeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetListCreationTime:
		((_ns1__GetListCreationTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mtrep__GetRepositoriesResponse:
		((_mtrep__GetRepositoriesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mtrep__GetRepositories:
		((_mtrep__GetRepositories *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mtrep__GetAllRepositoriesResponse:
		((_mtrep__GetAllRepositoriesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mtrep__GetAllRepositories:
		((_mtrep__GetAllRepositories *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mtrep__PickRepositoryResponse:
		((_mtrep__PickRepositoryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mtrep__PickRepository:
		((_mtrep__PickRepository *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse:
		((_mtrep__TryGetRepositoryInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__mtrep__TryGetRepositoryInfo:
		((_mtrep__TryGetRepositoryInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_mtrep__ArrayOfRepositoryInfo:
		((mtrep__ArrayOfRepositoryInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_mtrep__RepositoryInfo:
		((mtrep__RepositoryInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__GetListCreationTime_:
		soap_serialize___ns1__GetListCreationTime_(soap, (const struct __ns1__GetListCreationTime_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetRepositories_:
		soap_serialize___ns1__GetRepositories_(soap, (const struct __ns1__GetRepositories_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetAllRepositories_:
		soap_serialize___ns1__GetAllRepositories_(soap, (const struct __ns1__GetAllRepositories_ *)ptr);
		break;
	case SOAP_TYPE___ns1__PickRepository_:
		soap_serialize___ns1__PickRepository_(soap, (const struct __ns1__PickRepository_ *)ptr);
		break;
	case SOAP_TYPE___ns1__TryGetRepositoryInfo_:
		soap_serialize___ns1__TryGetRepositoryInfo_(soap, (const struct __ns1__TryGetRepositoryInfo_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetListCreationTime:
		soap_serialize___ns1__GetListCreationTime(soap, (const struct __ns1__GetListCreationTime *)ptr);
		break;
	case SOAP_TYPE___ns1__GetRepositories:
		soap_serialize___ns1__GetRepositories(soap, (const struct __ns1__GetRepositories *)ptr);
		break;
	case SOAP_TYPE___ns1__GetAllRepositories:
		soap_serialize___ns1__GetAllRepositories(soap, (const struct __ns1__GetAllRepositories *)ptr);
		break;
	case SOAP_TYPE___ns1__PickRepository:
		soap_serialize___ns1__PickRepository(soap, (const struct __ns1__PickRepository *)ptr);
		break;
	case SOAP_TYPE___ns1__TryGetRepositoryInfo:
		soap_serialize___ns1__TryGetRepositoryInfo(soap, (const struct __ns1__TryGetRepositoryInfo *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetListCreationTimeResponse:
		soap_serialize_PointerTo_ns1__GetListCreationTimeResponse(soap, (_ns1__GetListCreationTimeResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetListCreationTime:
		soap_serialize_PointerTo_ns1__GetListCreationTime(soap, (_ns1__GetListCreationTime *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mtrep__GetRepositoriesResponse:
		soap_serialize_PointerTo_mtrep__GetRepositoriesResponse(soap, (_mtrep__GetRepositoriesResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mtrep__GetRepositories:
		soap_serialize_PointerTo_mtrep__GetRepositories(soap, (_mtrep__GetRepositories *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mtrep__GetAllRepositoriesResponse:
		soap_serialize_PointerTo_mtrep__GetAllRepositoriesResponse(soap, (_mtrep__GetAllRepositoriesResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mtrep__GetAllRepositories:
		soap_serialize_PointerTo_mtrep__GetAllRepositories(soap, (_mtrep__GetAllRepositories *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mtrep__PickRepositoryResponse:
		soap_serialize_PointerTo_mtrep__PickRepositoryResponse(soap, (_mtrep__PickRepositoryResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mtrep__PickRepository:
		soap_serialize_PointerTo_mtrep__PickRepository(soap, (_mtrep__PickRepository *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mtrep__TryGetRepositoryInfoResponse:
		soap_serialize_PointerTo_mtrep__TryGetRepositoryInfoResponse(soap, (_mtrep__TryGetRepositoryInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_mtrep__TryGetRepositoryInfo:
		soap_serialize_PointerTo_mtrep__TryGetRepositoryInfo(soap, (_mtrep__TryGetRepositoryInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTomtrep__ArrayOfRepositoryInfo:
		soap_serialize_PointerTomtrep__ArrayOfRepositoryInfo(soap, (mtrep__ArrayOfRepositoryInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTomtrep__RepositoryInfo:
		soap_serialize_PointerTomtrep__RepositoryInfo(soap, (mtrep__RepositoryInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mtrep__RepositoryInfo:
		return (void*)soap_instantiate_mtrep__RepositoryInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mtrep__ArrayOfRepositoryInfo:
		return (void*)soap_instantiate_mtrep__ArrayOfRepositoryInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mtrep__TryGetRepositoryInfo:
		return (void*)soap_instantiate__mtrep__TryGetRepositoryInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse:
		return (void*)soap_instantiate__mtrep__TryGetRepositoryInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mtrep__PickRepository:
		return (void*)soap_instantiate__mtrep__PickRepository(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mtrep__PickRepositoryResponse:
		return (void*)soap_instantiate__mtrep__PickRepositoryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mtrep__GetAllRepositories:
		return (void*)soap_instantiate__mtrep__GetAllRepositories(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mtrep__GetAllRepositoriesResponse:
		return (void*)soap_instantiate__mtrep__GetAllRepositoriesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mtrep__GetRepositories:
		return (void*)soap_instantiate__mtrep__GetRepositories(soap, -1, type, arrayType, n);
	case SOAP_TYPE__mtrep__GetRepositoriesResponse:
		return (void*)soap_instantiate__mtrep__GetRepositoriesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetListCreationTime:
		return (void*)soap_instantiate__ns1__GetListCreationTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetListCreationTimeResponse:
		return (void*)soap_instantiate__ns1__GetListCreationTimeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__TryGetRepositoryInfo:
		return (void*)soap_instantiate___ns1__TryGetRepositoryInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__PickRepository:
		return (void*)soap_instantiate___ns1__PickRepository(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetAllRepositories:
		return (void*)soap_instantiate___ns1__GetAllRepositories(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetRepositories:
		return (void*)soap_instantiate___ns1__GetRepositories(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetListCreationTime:
		return (void*)soap_instantiate___ns1__GetListCreationTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__TryGetRepositoryInfo_:
		return (void*)soap_instantiate___ns1__TryGetRepositoryInfo_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__PickRepository_:
		return (void*)soap_instantiate___ns1__PickRepository_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetAllRepositories_:
		return (void*)soap_instantiate___ns1__GetAllRepositories_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetRepositories_:
		return (void*)soap_instantiate___ns1__GetRepositories_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetListCreationTime_:
		return (void*)soap_instantiate___ns1__GetListCreationTime_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTomtrep__RepositoryInfo:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_mtrep__RepositoryInfo:
		if (p->size < 0)
			delete (mtrep__RepositoryInfo*)p->ptr;
		else
			delete[] (mtrep__RepositoryInfo*)p->ptr;
		break;
	case SOAP_TYPE_mtrep__ArrayOfRepositoryInfo:
		if (p->size < 0)
			delete (mtrep__ArrayOfRepositoryInfo*)p->ptr;
		else
			delete[] (mtrep__ArrayOfRepositoryInfo*)p->ptr;
		break;
	case SOAP_TYPE__mtrep__TryGetRepositoryInfo:
		if (p->size < 0)
			delete (_mtrep__TryGetRepositoryInfo*)p->ptr;
		else
			delete[] (_mtrep__TryGetRepositoryInfo*)p->ptr;
		break;
	case SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse:
		if (p->size < 0)
			delete (_mtrep__TryGetRepositoryInfoResponse*)p->ptr;
		else
			delete[] (_mtrep__TryGetRepositoryInfoResponse*)p->ptr;
		break;
	case SOAP_TYPE__mtrep__PickRepository:
		if (p->size < 0)
			delete (_mtrep__PickRepository*)p->ptr;
		else
			delete[] (_mtrep__PickRepository*)p->ptr;
		break;
	case SOAP_TYPE__mtrep__PickRepositoryResponse:
		if (p->size < 0)
			delete (_mtrep__PickRepositoryResponse*)p->ptr;
		else
			delete[] (_mtrep__PickRepositoryResponse*)p->ptr;
		break;
	case SOAP_TYPE__mtrep__GetAllRepositories:
		if (p->size < 0)
			delete (_mtrep__GetAllRepositories*)p->ptr;
		else
			delete[] (_mtrep__GetAllRepositories*)p->ptr;
		break;
	case SOAP_TYPE__mtrep__GetAllRepositoriesResponse:
		if (p->size < 0)
			delete (_mtrep__GetAllRepositoriesResponse*)p->ptr;
		else
			delete[] (_mtrep__GetAllRepositoriesResponse*)p->ptr;
		break;
	case SOAP_TYPE__mtrep__GetRepositories:
		if (p->size < 0)
			delete (_mtrep__GetRepositories*)p->ptr;
		else
			delete[] (_mtrep__GetRepositories*)p->ptr;
		break;
	case SOAP_TYPE__mtrep__GetRepositoriesResponse:
		if (p->size < 0)
			delete (_mtrep__GetRepositoriesResponse*)p->ptr;
		else
			delete[] (_mtrep__GetRepositoriesResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetListCreationTime:
		if (p->size < 0)
			delete (_ns1__GetListCreationTime*)p->ptr;
		else
			delete[] (_ns1__GetListCreationTime*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetListCreationTimeResponse:
		if (p->size < 0)
			delete (_ns1__GetListCreationTimeResponse*)p->ptr;
		else
			delete[] (_ns1__GetListCreationTimeResponse*)p->ptr;
		break;
	case SOAP_TYPE___ns1__TryGetRepositoryInfo:
		if (p->size < 0)
			delete (struct __ns1__TryGetRepositoryInfo*)p->ptr;
		else
			delete[] (struct __ns1__TryGetRepositoryInfo*)p->ptr;
		break;
	case SOAP_TYPE___ns1__PickRepository:
		if (p->size < 0)
			delete (struct __ns1__PickRepository*)p->ptr;
		else
			delete[] (struct __ns1__PickRepository*)p->ptr;
		break;
	case SOAP_TYPE___ns1__GetAllRepositories:
		if (p->size < 0)
			delete (struct __ns1__GetAllRepositories*)p->ptr;
		else
			delete[] (struct __ns1__GetAllRepositories*)p->ptr;
		break;
	case SOAP_TYPE___ns1__GetRepositories:
		if (p->size < 0)
			delete (struct __ns1__GetRepositories*)p->ptr;
		else
			delete[] (struct __ns1__GetRepositories*)p->ptr;
		break;
	case SOAP_TYPE___ns1__GetListCreationTime:
		if (p->size < 0)
			delete (struct __ns1__GetListCreationTime*)p->ptr;
		else
			delete[] (struct __ns1__GetListCreationTime*)p->ptr;
		break;
	case SOAP_TYPE___ns1__TryGetRepositoryInfo_:
		if (p->size < 0)
			delete (struct __ns1__TryGetRepositoryInfo_*)p->ptr;
		else
			delete[] (struct __ns1__TryGetRepositoryInfo_*)p->ptr;
		break;
	case SOAP_TYPE___ns1__PickRepository_:
		if (p->size < 0)
			delete (struct __ns1__PickRepository_*)p->ptr;
		else
			delete[] (struct __ns1__PickRepository_*)p->ptr;
		break;
	case SOAP_TYPE___ns1__GetAllRepositories_:
		if (p->size < 0)
			delete (struct __ns1__GetAllRepositories_*)p->ptr;
		else
			delete[] (struct __ns1__GetAllRepositories_*)p->ptr;
		break;
	case SOAP_TYPE___ns1__GetRepositories_:
		if (p->size < 0)
			delete (struct __ns1__GetRepositories_*)p->ptr;
		else
			delete[] (struct __ns1__GetRepositories_*)p->ptr;
		break;
	case SOAP_TYPE___ns1__GetListCreationTime_:
		if (p->size < 0)
			delete (struct __ns1__GetListCreationTime_*)p->ptr;
		else
			delete[] (struct __ns1__GetListCreationTime_*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTomtrep__RepositoryInfo:
		if (p->size < 0)
			delete (std::vector<mtrep__RepositoryInfo * >*)p->ptr;
		else
			delete[] (std::vector<mtrep__RepositoryInfo * >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTomtrep__RepositoryInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<mtrep__RepositoryInfo * >*)p)[len] = *(mtrep__RepositoryInfo **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type);
	soap_send(soap, soap_bool2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mtrep__RepositoryStatus(struct soap *soap, enum mtrep__RepositoryStatus *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_mtrep__RepositoryStatus
	*a = SOAP_DEFAULT_mtrep__RepositoryStatus;
#else
	*a = (enum mtrep__RepositoryStatus)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mtrep__RepositoryStatus(struct soap *soap, const enum mtrep__RepositoryStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mtrep__RepositoryStatus);
	if (soap_out_mtrep__RepositoryStatus(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_mtrep__RepositoryStatus[] =
{	{ (long)mtrep__RepositoryStatus__Online, "Online" },
	{ (long)mtrep__RepositoryStatus__Offline, "Offline" },
	{ (long)mtrep__RepositoryStatus__Unknown, "Unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_mtrep__RepositoryStatus2s(struct soap *soap, enum mtrep__RepositoryStatus n)
{	const char *s = soap_code_str(soap_codes_mtrep__RepositoryStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mtrep__RepositoryStatus(struct soap *soap, const char *tag, int id, const enum mtrep__RepositoryStatus *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mtrep__RepositoryStatus), type);
	soap_send(soap, soap_mtrep__RepositoryStatus2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum mtrep__RepositoryStatus * SOAP_FMAC4 soap_get_mtrep__RepositoryStatus(struct soap *soap, enum mtrep__RepositoryStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_mtrep__RepositoryStatus(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2mtrep__RepositoryStatus(struct soap *soap, const char *s, enum mtrep__RepositoryStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_mtrep__RepositoryStatus, s);
	if (map)
		*a = (enum mtrep__RepositoryStatus)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum mtrep__RepositoryStatus)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum mtrep__RepositoryStatus * SOAP_FMAC4 soap_in_mtrep__RepositoryStatus(struct soap *soap, const char *tag, enum mtrep__RepositoryStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum mtrep__RepositoryStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mtrep__RepositoryStatus, sizeof(enum mtrep__RepositoryStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2mtrep__RepositoryStatus(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum mtrep__RepositoryStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mtrep__RepositoryStatus, 0, sizeof(enum mtrep__RepositoryStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mtrep__Levels(struct soap *soap, enum mtrep__Levels *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_mtrep__Levels
	*a = SOAP_DEFAULT_mtrep__Levels;
#else
	*a = (enum mtrep__Levels)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mtrep__Levels(struct soap *soap, const enum mtrep__Levels *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mtrep__Levels);
	if (soap_out_mtrep__Levels(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_mtrep__Levels[] =
{	{ (long)mtrep__Levels__Essential, "Essential" },
	{ (long)mtrep__Levels__Basic, "Basic" },
	{ (long)mtrep__Levels__Advanced, "Advanced" },
	{ (long)mtrep__Levels__Complete, "Complete" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_mtrep__Levels2s(struct soap *soap, enum mtrep__Levels n)
{	const char *s = soap_code_str(soap_codes_mtrep__Levels, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mtrep__Levels(struct soap *soap, const char *tag, int id, const enum mtrep__Levels *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mtrep__Levels), type);
	soap_send(soap, soap_mtrep__Levels2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum mtrep__Levels * SOAP_FMAC4 soap_get_mtrep__Levels(struct soap *soap, enum mtrep__Levels *p, const char *tag, const char *type)
{
	if ((p = soap_in_mtrep__Levels(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2mtrep__Levels(struct soap *soap, const char *s, enum mtrep__Levels *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_mtrep__Levels, s);
	if (map)
		*a = (enum mtrep__Levels)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum mtrep__Levels)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum mtrep__Levels * SOAP_FMAC4 soap_in_mtrep__Levels(struct soap *soap, const char *tag, enum mtrep__Levels *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum mtrep__Levels *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mtrep__Levels, sizeof(enum mtrep__Levels), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2mtrep__Levels(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum mtrep__Levels *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mtrep__Levels, 0, sizeof(enum mtrep__Levels), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mtrep__Integrities(struct soap *soap, enum mtrep__Integrities *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_mtrep__Integrities
	*a = SOAP_DEFAULT_mtrep__Integrities;
#else
	*a = (enum mtrep__Integrities)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mtrep__Integrities(struct soap *soap, const enum mtrep__Integrities *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mtrep__Integrities);
	if (soap_out_mtrep__Integrities(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_mtrep__Integrities[] =
{	{ (long)mtrep__Integrities__Intact, "Intact" },
	{ (long)mtrep__Integrities__Corrupted, "Corrupted" },
	{ (long)mtrep__Integrities__Unknown, "Unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_mtrep__Integrities2s(struct soap *soap, enum mtrep__Integrities n)
{	const char *s = soap_code_str(soap_codes_mtrep__Integrities, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mtrep__Integrities(struct soap *soap, const char *tag, int id, const enum mtrep__Integrities *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mtrep__Integrities), type);
	soap_send(soap, soap_mtrep__Integrities2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum mtrep__Integrities * SOAP_FMAC4 soap_get_mtrep__Integrities(struct soap *soap, enum mtrep__Integrities *p, const char *tag, const char *type)
{
	if ((p = soap_in_mtrep__Integrities(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2mtrep__Integrities(struct soap *soap, const char *s, enum mtrep__Integrities *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_mtrep__Integrities, s);
	if (map)
		*a = (enum mtrep__Integrities)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum mtrep__Integrities)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum mtrep__Integrities * SOAP_FMAC4 soap_in_mtrep__Integrities(struct soap *soap, const char *tag, enum mtrep__Integrities *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum mtrep__Integrities *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mtrep__Integrities, sizeof(enum mtrep__Integrities), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2mtrep__Integrities(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum mtrep__Integrities *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mtrep__Integrities, 0, sizeof(enum mtrep__Integrities), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}
#ifdef __cplusplus
}
#endif

void _ns1__GetListCreationTimeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &((_ns1__GetListCreationTimeResponse*)this)->GetListCreationTimeResult);
	/* transient soap skipped */
}

void _ns1__GetListCreationTimeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetListCreationTimeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetListCreationTimeResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetListCreationTimeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetListCreationTimeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetListCreationTimeResponse(struct soap *soap, const char *tag, int id, const _ns1__GetListCreationTimeResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetListCreationTimeResponse), type);
	soap_element_result(soap, "ns1:GetListCreationTimeResult");
	soap_out_int(soap, "ns1:GetListCreationTimeResult", -1, &(((_ns1__GetListCreationTimeResponse*)a)->GetListCreationTimeResult), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__GetListCreationTimeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetListCreationTimeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetListCreationTimeResponse * SOAP_FMAC4 soap_get__ns1__GetListCreationTimeResponse(struct soap *soap, _ns1__GetListCreationTimeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetListCreationTimeResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__GetListCreationTimeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetListCreationTimeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetListCreationTimeResponse * SOAP_FMAC4 soap_in__ns1__GetListCreationTimeResponse(struct soap *soap, const char *tag, _ns1__GetListCreationTimeResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetListCreationTimeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetListCreationTimeResponse, sizeof(_ns1__GetListCreationTimeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetListCreationTimeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetListCreationTimeResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetListCreationTimeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetListCreationTimeResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:GetListCreationTimeResult", &(((_ns1__GetListCreationTimeResponse*)a)->GetListCreationTimeResult), "xsd:int"))
				{	soap_flag_GetListCreationTimeResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetListCreationTimeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetListCreationTimeResult1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetListCreationTimeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetListCreationTimeResponse, 0, sizeof(_ns1__GetListCreationTimeResponse), 0, soap_copy__ns1__GetListCreationTimeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetListCreationTimeResponse * SOAP_FMAC6 soap_new__ns1__GetListCreationTimeResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetListCreationTimeResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetListCreationTimeResponse(struct soap *soap, _ns1__GetListCreationTimeResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetListCreationTimeResponse * SOAP_FMAC4 soap_instantiate__ns1__GetListCreationTimeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetListCreationTimeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetListCreationTimeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetListCreationTimeResponse;
		if (size)
			*size = sizeof(_ns1__GetListCreationTimeResponse);
		((_ns1__GetListCreationTimeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetListCreationTimeResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetListCreationTimeResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetListCreationTimeResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetListCreationTimeResponse*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetListCreationTimeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetListCreationTimeResponse %p -> %p\n", q, p));
	*(_ns1__GetListCreationTimeResponse*)p = *(_ns1__GetListCreationTimeResponse*)q;
}
#ifdef __cplusplus
}
#endif

void _ns1__GetListCreationTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetListCreationTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetListCreationTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetListCreationTime);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetListCreationTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetListCreationTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetListCreationTime(struct soap *soap, const char *tag, int id, const _ns1__GetListCreationTime *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetListCreationTime), type);
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_ns1__GetListCreationTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetListCreationTime(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetListCreationTime * SOAP_FMAC4 soap_get__ns1__GetListCreationTime(struct soap *soap, _ns1__GetListCreationTime *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetListCreationTime(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_ns1__GetListCreationTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetListCreationTime(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetListCreationTime * SOAP_FMAC4 soap_in__ns1__GetListCreationTime(struct soap *soap, const char *tag, _ns1__GetListCreationTime *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetListCreationTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetListCreationTime, sizeof(_ns1__GetListCreationTime), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetListCreationTime)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetListCreationTime *)a->soap_in(soap, tag, type);
		}
	};
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetListCreationTime *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetListCreationTime, 0, sizeof(_ns1__GetListCreationTime), 0, soap_copy__ns1__GetListCreationTime);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetListCreationTime * SOAP_FMAC6 soap_new__ns1__GetListCreationTime(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetListCreationTime(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetListCreationTime(struct soap *soap, _ns1__GetListCreationTime *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetListCreationTime * SOAP_FMAC4 soap_instantiate__ns1__GetListCreationTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetListCreationTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetListCreationTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetListCreationTime;
		if (size)
			*size = sizeof(_ns1__GetListCreationTime);
		((_ns1__GetListCreationTime*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetListCreationTime[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetListCreationTime);
		for (int i = 0; i < n; i++)
			((_ns1__GetListCreationTime*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetListCreationTime*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetListCreationTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetListCreationTime %p -> %p\n", q, p));
	*(_ns1__GetListCreationTime*)p = *(_ns1__GetListCreationTime*)q;
}
#ifdef __cplusplus
}
#endif

void _mtrep__GetRepositoriesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_mtrep__GetRepositoriesResponse*)this)->GetRepositoriesResult = NULL;
	/* transient soap skipped */
}

void _mtrep__GetRepositoriesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTomtrep__ArrayOfRepositoryInfo(soap, &((_mtrep__GetRepositoriesResponse*)this)->GetRepositoriesResult);
	/* transient soap skipped */
}

int _mtrep__GetRepositoriesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mtrep__GetRepositoriesResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mtrep__GetRepositoriesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mtrep__GetRepositoriesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mtrep__GetRepositoriesResponse(struct soap *soap, const char *tag, int id, const _mtrep__GetRepositoriesResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mtrep__GetRepositoriesResponse), type);
	if (a->GetRepositoriesResult)
		soap_element_result(soap, "mtrep:GetRepositoriesResult");
	soap_out_PointerTomtrep__ArrayOfRepositoryInfo(soap, "mtrep:GetRepositoriesResult", -1, &(((_mtrep__GetRepositoriesResponse*)a)->GetRepositoriesResult), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mtrep__GetRepositoriesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mtrep__GetRepositoriesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _mtrep__GetRepositoriesResponse * SOAP_FMAC4 soap_get__mtrep__GetRepositoriesResponse(struct soap *soap, _mtrep__GetRepositoriesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__mtrep__GetRepositoriesResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mtrep__GetRepositoriesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mtrep__GetRepositoriesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _mtrep__GetRepositoriesResponse * SOAP_FMAC4 soap_in__mtrep__GetRepositoriesResponse(struct soap *soap, const char *tag, _mtrep__GetRepositoriesResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_mtrep__GetRepositoriesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mtrep__GetRepositoriesResponse, sizeof(_mtrep__GetRepositoriesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mtrep__GetRepositoriesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mtrep__GetRepositoriesResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetRepositoriesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetRepositoriesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTomtrep__ArrayOfRepositoryInfo(soap, "mtrep:GetRepositoriesResult", &(((_mtrep__GetRepositoriesResponse*)a)->GetRepositoriesResult), "mtrep:ArrayOfRepositoryInfo"))
				{	soap_flag_GetRepositoriesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "mtrep:GetRepositoriesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mtrep__GetRepositoriesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__mtrep__GetRepositoriesResponse, 0, sizeof(_mtrep__GetRepositoriesResponse), 0, soap_copy__mtrep__GetRepositoriesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mtrep__GetRepositoriesResponse * SOAP_FMAC6 soap_new__mtrep__GetRepositoriesResponse(struct soap *soap, int n)
{	return soap_instantiate__mtrep__GetRepositoriesResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mtrep__GetRepositoriesResponse(struct soap *soap, _mtrep__GetRepositoriesResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mtrep__GetRepositoriesResponse * SOAP_FMAC4 soap_instantiate__mtrep__GetRepositoriesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mtrep__GetRepositoriesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mtrep__GetRepositoriesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mtrep__GetRepositoriesResponse;
		if (size)
			*size = sizeof(_mtrep__GetRepositoriesResponse);
		((_mtrep__GetRepositoriesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mtrep__GetRepositoriesResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_mtrep__GetRepositoriesResponse);
		for (int i = 0; i < n; i++)
			((_mtrep__GetRepositoriesResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mtrep__GetRepositoriesResponse*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mtrep__GetRepositoriesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mtrep__GetRepositoriesResponse %p -> %p\n", q, p));
	*(_mtrep__GetRepositoriesResponse*)p = *(_mtrep__GetRepositoriesResponse*)q;
}
#ifdef __cplusplus
}
#endif

void _mtrep__GetRepositories::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &((_mtrep__GetRepositories*)this)->onlyOnline);
	soap_default_bool(soap, &((_mtrep__GetRepositories*)this)->noCorrupted);
	soap_default_int(soap, &((_mtrep__GetRepositories*)this)->maxDelay);
	/* transient soap skipped */
}

void _mtrep__GetRepositories::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _mtrep__GetRepositories::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mtrep__GetRepositories);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mtrep__GetRepositories::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mtrep__GetRepositories(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mtrep__GetRepositories(struct soap *soap, const char *tag, int id, const _mtrep__GetRepositories *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mtrep__GetRepositories), type);
	soap_out_bool(soap, "mtrep:onlyOnline", -1, &(((_mtrep__GetRepositories*)a)->onlyOnline), "");
	soap_out_bool(soap, "mtrep:noCorrupted", -1, &(((_mtrep__GetRepositories*)a)->noCorrupted), "");
	soap_out_int(soap, "mtrep:maxDelay", -1, &(((_mtrep__GetRepositories*)a)->maxDelay), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mtrep__GetRepositories::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mtrep__GetRepositories(soap, this, tag, type);
}

SOAP_FMAC3 _mtrep__GetRepositories * SOAP_FMAC4 soap_get__mtrep__GetRepositories(struct soap *soap, _mtrep__GetRepositories *p, const char *tag, const char *type)
{
	if ((p = soap_in__mtrep__GetRepositories(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mtrep__GetRepositories::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mtrep__GetRepositories(soap, tag, this, type);
}

SOAP_FMAC3 _mtrep__GetRepositories * SOAP_FMAC4 soap_in__mtrep__GetRepositories(struct soap *soap, const char *tag, _mtrep__GetRepositories *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_mtrep__GetRepositories *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mtrep__GetRepositories, sizeof(_mtrep__GetRepositories), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mtrep__GetRepositories)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mtrep__GetRepositories *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_onlyOnline1 = 1, soap_flag_noCorrupted1 = 1, soap_flag_maxDelay1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_onlyOnline1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "mtrep:onlyOnline", &(((_mtrep__GetRepositories*)a)->onlyOnline), "xsd:boolean"))
				{	soap_flag_onlyOnline1--;
					continue;
				}
			if (soap_flag_noCorrupted1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "mtrep:noCorrupted", &(((_mtrep__GetRepositories*)a)->noCorrupted), "xsd:boolean"))
				{	soap_flag_noCorrupted1--;
					continue;
				}
			if (soap_flag_maxDelay1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "mtrep:maxDelay", &(((_mtrep__GetRepositories*)a)->maxDelay), "xsd:int"))
				{	soap_flag_maxDelay1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_onlyOnline1 > 0 || soap_flag_noCorrupted1 > 0 || soap_flag_maxDelay1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mtrep__GetRepositories *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__mtrep__GetRepositories, 0, sizeof(_mtrep__GetRepositories), 0, soap_copy__mtrep__GetRepositories);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mtrep__GetRepositories * SOAP_FMAC6 soap_new__mtrep__GetRepositories(struct soap *soap, int n)
{	return soap_instantiate__mtrep__GetRepositories(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mtrep__GetRepositories(struct soap *soap, _mtrep__GetRepositories *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mtrep__GetRepositories * SOAP_FMAC4 soap_instantiate__mtrep__GetRepositories(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mtrep__GetRepositories(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mtrep__GetRepositories, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mtrep__GetRepositories;
		if (size)
			*size = sizeof(_mtrep__GetRepositories);
		((_mtrep__GetRepositories*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mtrep__GetRepositories[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_mtrep__GetRepositories);
		for (int i = 0; i < n; i++)
			((_mtrep__GetRepositories*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mtrep__GetRepositories*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mtrep__GetRepositories(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mtrep__GetRepositories %p -> %p\n", q, p));
	*(_mtrep__GetRepositories*)p = *(_mtrep__GetRepositories*)q;
}
#ifdef __cplusplus
}
#endif

void _mtrep__GetAllRepositoriesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_mtrep__GetAllRepositoriesResponse*)this)->GetAllRepositoriesResult = NULL;
	/* transient soap skipped */
}

void _mtrep__GetAllRepositoriesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTomtrep__ArrayOfRepositoryInfo(soap, &((_mtrep__GetAllRepositoriesResponse*)this)->GetAllRepositoriesResult);
	/* transient soap skipped */
}

int _mtrep__GetAllRepositoriesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mtrep__GetAllRepositoriesResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mtrep__GetAllRepositoriesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mtrep__GetAllRepositoriesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mtrep__GetAllRepositoriesResponse(struct soap *soap, const char *tag, int id, const _mtrep__GetAllRepositoriesResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mtrep__GetAllRepositoriesResponse), type);
	if (a->GetAllRepositoriesResult)
		soap_element_result(soap, "mtrep:GetAllRepositoriesResult");
	soap_out_PointerTomtrep__ArrayOfRepositoryInfo(soap, "mtrep:GetAllRepositoriesResult", -1, &(((_mtrep__GetAllRepositoriesResponse*)a)->GetAllRepositoriesResult), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mtrep__GetAllRepositoriesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mtrep__GetAllRepositoriesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _mtrep__GetAllRepositoriesResponse * SOAP_FMAC4 soap_get__mtrep__GetAllRepositoriesResponse(struct soap *soap, _mtrep__GetAllRepositoriesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__mtrep__GetAllRepositoriesResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mtrep__GetAllRepositoriesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mtrep__GetAllRepositoriesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _mtrep__GetAllRepositoriesResponse * SOAP_FMAC4 soap_in__mtrep__GetAllRepositoriesResponse(struct soap *soap, const char *tag, _mtrep__GetAllRepositoriesResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_mtrep__GetAllRepositoriesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mtrep__GetAllRepositoriesResponse, sizeof(_mtrep__GetAllRepositoriesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mtrep__GetAllRepositoriesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mtrep__GetAllRepositoriesResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetAllRepositoriesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAllRepositoriesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTomtrep__ArrayOfRepositoryInfo(soap, "mtrep:GetAllRepositoriesResult", &(((_mtrep__GetAllRepositoriesResponse*)a)->GetAllRepositoriesResult), "mtrep:ArrayOfRepositoryInfo"))
				{	soap_flag_GetAllRepositoriesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "mtrep:GetAllRepositoriesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mtrep__GetAllRepositoriesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__mtrep__GetAllRepositoriesResponse, 0, sizeof(_mtrep__GetAllRepositoriesResponse), 0, soap_copy__mtrep__GetAllRepositoriesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mtrep__GetAllRepositoriesResponse * SOAP_FMAC6 soap_new__mtrep__GetAllRepositoriesResponse(struct soap *soap, int n)
{	return soap_instantiate__mtrep__GetAllRepositoriesResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mtrep__GetAllRepositoriesResponse(struct soap *soap, _mtrep__GetAllRepositoriesResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mtrep__GetAllRepositoriesResponse * SOAP_FMAC4 soap_instantiate__mtrep__GetAllRepositoriesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mtrep__GetAllRepositoriesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mtrep__GetAllRepositoriesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mtrep__GetAllRepositoriesResponse;
		if (size)
			*size = sizeof(_mtrep__GetAllRepositoriesResponse);
		((_mtrep__GetAllRepositoriesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mtrep__GetAllRepositoriesResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_mtrep__GetAllRepositoriesResponse);
		for (int i = 0; i < n; i++)
			((_mtrep__GetAllRepositoriesResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mtrep__GetAllRepositoriesResponse*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mtrep__GetAllRepositoriesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mtrep__GetAllRepositoriesResponse %p -> %p\n", q, p));
	*(_mtrep__GetAllRepositoriesResponse*)p = *(_mtrep__GetAllRepositoriesResponse*)q;
}
#ifdef __cplusplus
}
#endif

void _mtrep__GetAllRepositories::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _mtrep__GetAllRepositories::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _mtrep__GetAllRepositories::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mtrep__GetAllRepositories);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mtrep__GetAllRepositories::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mtrep__GetAllRepositories(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mtrep__GetAllRepositories(struct soap *soap, const char *tag, int id, const _mtrep__GetAllRepositories *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mtrep__GetAllRepositories), type);
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mtrep__GetAllRepositories::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mtrep__GetAllRepositories(soap, this, tag, type);
}

SOAP_FMAC3 _mtrep__GetAllRepositories * SOAP_FMAC4 soap_get__mtrep__GetAllRepositories(struct soap *soap, _mtrep__GetAllRepositories *p, const char *tag, const char *type)
{
	if ((p = soap_in__mtrep__GetAllRepositories(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mtrep__GetAllRepositories::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mtrep__GetAllRepositories(soap, tag, this, type);
}

SOAP_FMAC3 _mtrep__GetAllRepositories * SOAP_FMAC4 soap_in__mtrep__GetAllRepositories(struct soap *soap, const char *tag, _mtrep__GetAllRepositories *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_mtrep__GetAllRepositories *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mtrep__GetAllRepositories, sizeof(_mtrep__GetAllRepositories), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mtrep__GetAllRepositories)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mtrep__GetAllRepositories *)a->soap_in(soap, tag, type);
		}
	};
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mtrep__GetAllRepositories *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__mtrep__GetAllRepositories, 0, sizeof(_mtrep__GetAllRepositories), 0, soap_copy__mtrep__GetAllRepositories);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mtrep__GetAllRepositories * SOAP_FMAC6 soap_new__mtrep__GetAllRepositories(struct soap *soap, int n)
{	return soap_instantiate__mtrep__GetAllRepositories(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mtrep__GetAllRepositories(struct soap *soap, _mtrep__GetAllRepositories *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mtrep__GetAllRepositories * SOAP_FMAC4 soap_instantiate__mtrep__GetAllRepositories(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mtrep__GetAllRepositories(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mtrep__GetAllRepositories, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mtrep__GetAllRepositories;
		if (size)
			*size = sizeof(_mtrep__GetAllRepositories);
		((_mtrep__GetAllRepositories*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mtrep__GetAllRepositories[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_mtrep__GetAllRepositories);
		for (int i = 0; i < n; i++)
			((_mtrep__GetAllRepositories*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mtrep__GetAllRepositories*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mtrep__GetAllRepositories(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mtrep__GetAllRepositories %p -> %p\n", q, p));
	*(_mtrep__GetAllRepositories*)p = *(_mtrep__GetAllRepositories*)q;
}
#ifdef __cplusplus
}
#endif

void _mtrep__PickRepositoryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_mtrep__PickRepositoryResponse*)this)->PickRepositoryResult = NULL;
	/* transient soap skipped */
}

void _mtrep__PickRepositoryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTomtrep__RepositoryInfo(soap, &((_mtrep__PickRepositoryResponse*)this)->PickRepositoryResult);
	/* transient soap skipped */
}

int _mtrep__PickRepositoryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mtrep__PickRepositoryResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mtrep__PickRepositoryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mtrep__PickRepositoryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mtrep__PickRepositoryResponse(struct soap *soap, const char *tag, int id, const _mtrep__PickRepositoryResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mtrep__PickRepositoryResponse), type);
	if (a->PickRepositoryResult)
		soap_element_result(soap, "mtrep:PickRepositoryResult");
	soap_out_PointerTomtrep__RepositoryInfo(soap, "mtrep:PickRepositoryResult", -1, &(((_mtrep__PickRepositoryResponse*)a)->PickRepositoryResult), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mtrep__PickRepositoryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mtrep__PickRepositoryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _mtrep__PickRepositoryResponse * SOAP_FMAC4 soap_get__mtrep__PickRepositoryResponse(struct soap *soap, _mtrep__PickRepositoryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__mtrep__PickRepositoryResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mtrep__PickRepositoryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mtrep__PickRepositoryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _mtrep__PickRepositoryResponse * SOAP_FMAC4 soap_in__mtrep__PickRepositoryResponse(struct soap *soap, const char *tag, _mtrep__PickRepositoryResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_mtrep__PickRepositoryResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mtrep__PickRepositoryResponse, sizeof(_mtrep__PickRepositoryResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mtrep__PickRepositoryResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mtrep__PickRepositoryResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_PickRepositoryResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PickRepositoryResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTomtrep__RepositoryInfo(soap, "mtrep:PickRepositoryResult", &(((_mtrep__PickRepositoryResponse*)a)->PickRepositoryResult), "mtrep:RepositoryInfo"))
				{	soap_flag_PickRepositoryResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "mtrep:PickRepositoryResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mtrep__PickRepositoryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__mtrep__PickRepositoryResponse, 0, sizeof(_mtrep__PickRepositoryResponse), 0, soap_copy__mtrep__PickRepositoryResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mtrep__PickRepositoryResponse * SOAP_FMAC6 soap_new__mtrep__PickRepositoryResponse(struct soap *soap, int n)
{	return soap_instantiate__mtrep__PickRepositoryResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mtrep__PickRepositoryResponse(struct soap *soap, _mtrep__PickRepositoryResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mtrep__PickRepositoryResponse * SOAP_FMAC4 soap_instantiate__mtrep__PickRepositoryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mtrep__PickRepositoryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mtrep__PickRepositoryResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mtrep__PickRepositoryResponse;
		if (size)
			*size = sizeof(_mtrep__PickRepositoryResponse);
		((_mtrep__PickRepositoryResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mtrep__PickRepositoryResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_mtrep__PickRepositoryResponse);
		for (int i = 0; i < n; i++)
			((_mtrep__PickRepositoryResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mtrep__PickRepositoryResponse*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mtrep__PickRepositoryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mtrep__PickRepositoryResponse %p -> %p\n", q, p));
	*(_mtrep__PickRepositoryResponse*)p = *(_mtrep__PickRepositoryResponse*)q;
}
#ifdef __cplusplus
}
#endif

void _mtrep__PickRepository::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _mtrep__PickRepository::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _mtrep__PickRepository::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mtrep__PickRepository);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mtrep__PickRepository::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mtrep__PickRepository(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mtrep__PickRepository(struct soap *soap, const char *tag, int id, const _mtrep__PickRepository *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mtrep__PickRepository), type);
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mtrep__PickRepository::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mtrep__PickRepository(soap, this, tag, type);
}

SOAP_FMAC3 _mtrep__PickRepository * SOAP_FMAC4 soap_get__mtrep__PickRepository(struct soap *soap, _mtrep__PickRepository *p, const char *tag, const char *type)
{
	if ((p = soap_in__mtrep__PickRepository(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mtrep__PickRepository::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mtrep__PickRepository(soap, tag, this, type);
}

SOAP_FMAC3 _mtrep__PickRepository * SOAP_FMAC4 soap_in__mtrep__PickRepository(struct soap *soap, const char *tag, _mtrep__PickRepository *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_mtrep__PickRepository *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mtrep__PickRepository, sizeof(_mtrep__PickRepository), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mtrep__PickRepository)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mtrep__PickRepository *)a->soap_in(soap, tag, type);
		}
	};
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mtrep__PickRepository *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__mtrep__PickRepository, 0, sizeof(_mtrep__PickRepository), 0, soap_copy__mtrep__PickRepository);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mtrep__PickRepository * SOAP_FMAC6 soap_new__mtrep__PickRepository(struct soap *soap, int n)
{	return soap_instantiate__mtrep__PickRepository(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mtrep__PickRepository(struct soap *soap, _mtrep__PickRepository *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mtrep__PickRepository * SOAP_FMAC4 soap_instantiate__mtrep__PickRepository(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mtrep__PickRepository(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mtrep__PickRepository, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mtrep__PickRepository;
		if (size)
			*size = sizeof(_mtrep__PickRepository);
		((_mtrep__PickRepository*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mtrep__PickRepository[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_mtrep__PickRepository);
		for (int i = 0; i < n; i++)
			((_mtrep__PickRepository*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mtrep__PickRepository*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mtrep__PickRepository(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mtrep__PickRepository %p -> %p\n", q, p));
	*(_mtrep__PickRepository*)p = *(_mtrep__PickRepository*)q;
}
#ifdef __cplusplus
}
#endif

void _mtrep__TryGetRepositoryInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &((_mtrep__TryGetRepositoryInfoResponse*)this)->TryGetRepositoryInfoResult);
	((_mtrep__TryGetRepositoryInfoResponse*)this)->repositoryInfo = NULL;
	/* transient soap skipped */
}

void _mtrep__TryGetRepositoryInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTomtrep__RepositoryInfo(soap, &((_mtrep__TryGetRepositoryInfoResponse*)this)->repositoryInfo);
	/* transient soap skipped */
}

int _mtrep__TryGetRepositoryInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mtrep__TryGetRepositoryInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mtrep__TryGetRepositoryInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mtrep__TryGetRepositoryInfoResponse(struct soap *soap, const char *tag, int id, const _mtrep__TryGetRepositoryInfoResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse), type);
	soap_element_result(soap, "mtrep:TryGetRepositoryInfoResult");
	soap_out_bool(soap, "mtrep:TryGetRepositoryInfoResult", -1, &(((_mtrep__TryGetRepositoryInfoResponse*)a)->TryGetRepositoryInfoResult), "");
	soap_out_PointerTomtrep__RepositoryInfo(soap, "mtrep:repositoryInfo", -1, &(((_mtrep__TryGetRepositoryInfoResponse*)a)->repositoryInfo), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mtrep__TryGetRepositoryInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mtrep__TryGetRepositoryInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _mtrep__TryGetRepositoryInfoResponse * SOAP_FMAC4 soap_get__mtrep__TryGetRepositoryInfoResponse(struct soap *soap, _mtrep__TryGetRepositoryInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__mtrep__TryGetRepositoryInfoResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mtrep__TryGetRepositoryInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mtrep__TryGetRepositoryInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _mtrep__TryGetRepositoryInfoResponse * SOAP_FMAC4 soap_in__mtrep__TryGetRepositoryInfoResponse(struct soap *soap, const char *tag, _mtrep__TryGetRepositoryInfoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_mtrep__TryGetRepositoryInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse, sizeof(_mtrep__TryGetRepositoryInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mtrep__TryGetRepositoryInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_TryGetRepositoryInfoResult1 = 1, soap_flag_repositoryInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TryGetRepositoryInfoResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "mtrep:TryGetRepositoryInfoResult", &(((_mtrep__TryGetRepositoryInfoResponse*)a)->TryGetRepositoryInfoResult), "xsd:boolean"))
				{	soap_flag_TryGetRepositoryInfoResult1--;
					continue;
				}
			if (soap_flag_repositoryInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTomtrep__RepositoryInfo(soap, "mtrep:repositoryInfo", &(((_mtrep__TryGetRepositoryInfoResponse*)a)->repositoryInfo), "mtrep:RepositoryInfo"))
				{	soap_flag_repositoryInfo1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "mtrep:TryGetRepositoryInfoResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_TryGetRepositoryInfoResult1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mtrep__TryGetRepositoryInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse, 0, sizeof(_mtrep__TryGetRepositoryInfoResponse), 0, soap_copy__mtrep__TryGetRepositoryInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mtrep__TryGetRepositoryInfoResponse * SOAP_FMAC6 soap_new__mtrep__TryGetRepositoryInfoResponse(struct soap *soap, int n)
{	return soap_instantiate__mtrep__TryGetRepositoryInfoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mtrep__TryGetRepositoryInfoResponse(struct soap *soap, _mtrep__TryGetRepositoryInfoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mtrep__TryGetRepositoryInfoResponse * SOAP_FMAC4 soap_instantiate__mtrep__TryGetRepositoryInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mtrep__TryGetRepositoryInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mtrep__TryGetRepositoryInfoResponse;
		if (size)
			*size = sizeof(_mtrep__TryGetRepositoryInfoResponse);
		((_mtrep__TryGetRepositoryInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mtrep__TryGetRepositoryInfoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_mtrep__TryGetRepositoryInfoResponse);
		for (int i = 0; i < n; i++)
			((_mtrep__TryGetRepositoryInfoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mtrep__TryGetRepositoryInfoResponse*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mtrep__TryGetRepositoryInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mtrep__TryGetRepositoryInfoResponse %p -> %p\n", q, p));
	*(_mtrep__TryGetRepositoryInfoResponse*)p = *(_mtrep__TryGetRepositoryInfoResponse*)q;
}
#ifdef __cplusplus
}
#endif

void _mtrep__TryGetRepositoryInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	((_mtrep__TryGetRepositoryInfo*)this)->url = NULL;
	/* transient soap skipped */
}

void _mtrep__TryGetRepositoryInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &((_mtrep__TryGetRepositoryInfo*)this)->url);
	/* transient soap skipped */
}

int _mtrep__TryGetRepositoryInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__mtrep__TryGetRepositoryInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _mtrep__TryGetRepositoryInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__mtrep__TryGetRepositoryInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mtrep__TryGetRepositoryInfo(struct soap *soap, const char *tag, int id, const _mtrep__TryGetRepositoryInfo *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__mtrep__TryGetRepositoryInfo), type);
	soap_out_PointerTostd__string(soap, "mtrep:url", -1, &(((_mtrep__TryGetRepositoryInfo*)a)->url), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *_mtrep__TryGetRepositoryInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__mtrep__TryGetRepositoryInfo(soap, this, tag, type);
}

SOAP_FMAC3 _mtrep__TryGetRepositoryInfo * SOAP_FMAC4 soap_get__mtrep__TryGetRepositoryInfo(struct soap *soap, _mtrep__TryGetRepositoryInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__mtrep__TryGetRepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *_mtrep__TryGetRepositoryInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__mtrep__TryGetRepositoryInfo(soap, tag, this, type);
}

SOAP_FMAC3 _mtrep__TryGetRepositoryInfo * SOAP_FMAC4 soap_in__mtrep__TryGetRepositoryInfo(struct soap *soap, const char *tag, _mtrep__TryGetRepositoryInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_mtrep__TryGetRepositoryInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__mtrep__TryGetRepositoryInfo, sizeof(_mtrep__TryGetRepositoryInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__mtrep__TryGetRepositoryInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_mtrep__TryGetRepositoryInfo *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_url1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_url1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "mtrep:url", &(((_mtrep__TryGetRepositoryInfo*)a)->url), "xsd:string"))
				{	soap_flag_url1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_mtrep__TryGetRepositoryInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__mtrep__TryGetRepositoryInfo, 0, sizeof(_mtrep__TryGetRepositoryInfo), 0, soap_copy__mtrep__TryGetRepositoryInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _mtrep__TryGetRepositoryInfo * SOAP_FMAC6 soap_new__mtrep__TryGetRepositoryInfo(struct soap *soap, int n)
{	return soap_instantiate__mtrep__TryGetRepositoryInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__mtrep__TryGetRepositoryInfo(struct soap *soap, _mtrep__TryGetRepositoryInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _mtrep__TryGetRepositoryInfo * SOAP_FMAC4 soap_instantiate__mtrep__TryGetRepositoryInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__mtrep__TryGetRepositoryInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__mtrep__TryGetRepositoryInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _mtrep__TryGetRepositoryInfo;
		if (size)
			*size = sizeof(_mtrep__TryGetRepositoryInfo);
		((_mtrep__TryGetRepositoryInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _mtrep__TryGetRepositoryInfo[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_mtrep__TryGetRepositoryInfo);
		for (int i = 0; i < n; i++)
			((_mtrep__TryGetRepositoryInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_mtrep__TryGetRepositoryInfo*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mtrep__TryGetRepositoryInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _mtrep__TryGetRepositoryInfo %p -> %p\n", q, p));
	*(_mtrep__TryGetRepositoryInfo*)p = *(_mtrep__TryGetRepositoryInfo*)q;
}
#ifdef __cplusplus
}
#endif

void mtrep__ArrayOfRepositoryInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(soap, &((mtrep__ArrayOfRepositoryInfo*)this)->RepositoryInfo);
	/* transient soap skipped */
}

void mtrep__ArrayOfRepositoryInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(soap, &((mtrep__ArrayOfRepositoryInfo*)this)->RepositoryInfo);
	/* transient soap skipped */
}

int mtrep__ArrayOfRepositoryInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_mtrep__ArrayOfRepositoryInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int mtrep__ArrayOfRepositoryInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_mtrep__ArrayOfRepositoryInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mtrep__ArrayOfRepositoryInfo(struct soap *soap, const char *tag, int id, const mtrep__ArrayOfRepositoryInfo *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mtrep__ArrayOfRepositoryInfo), type);
	soap_out_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(soap, "mtrep:RepositoryInfo", -1, &(((mtrep__ArrayOfRepositoryInfo*)a)->RepositoryInfo), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *mtrep__ArrayOfRepositoryInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_mtrep__ArrayOfRepositoryInfo(soap, this, tag, type);
}

SOAP_FMAC3 mtrep__ArrayOfRepositoryInfo * SOAP_FMAC4 soap_get_mtrep__ArrayOfRepositoryInfo(struct soap *soap, mtrep__ArrayOfRepositoryInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_mtrep__ArrayOfRepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *mtrep__ArrayOfRepositoryInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_mtrep__ArrayOfRepositoryInfo(soap, tag, this, type);
}

SOAP_FMAC3 mtrep__ArrayOfRepositoryInfo * SOAP_FMAC4 soap_in_mtrep__ArrayOfRepositoryInfo(struct soap *soap, const char *tag, mtrep__ArrayOfRepositoryInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (mtrep__ArrayOfRepositoryInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mtrep__ArrayOfRepositoryInfo, sizeof(mtrep__ArrayOfRepositoryInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_mtrep__ArrayOfRepositoryInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (mtrep__ArrayOfRepositoryInfo *)a->soap_in(soap, tag, type);
		}
	};
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(soap, "mtrep:RepositoryInfo", &(((mtrep__ArrayOfRepositoryInfo*)a)->RepositoryInfo), "mtrep:RepositoryInfo"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (mtrep__ArrayOfRepositoryInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mtrep__ArrayOfRepositoryInfo, 0, sizeof(mtrep__ArrayOfRepositoryInfo), 0, soap_copy_mtrep__ArrayOfRepositoryInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 mtrep__ArrayOfRepositoryInfo * SOAP_FMAC6 soap_new_mtrep__ArrayOfRepositoryInfo(struct soap *soap, int n)
{	return soap_instantiate_mtrep__ArrayOfRepositoryInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_mtrep__ArrayOfRepositoryInfo(struct soap *soap, mtrep__ArrayOfRepositoryInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 mtrep__ArrayOfRepositoryInfo * SOAP_FMAC4 soap_instantiate_mtrep__ArrayOfRepositoryInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mtrep__ArrayOfRepositoryInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mtrep__ArrayOfRepositoryInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new mtrep__ArrayOfRepositoryInfo;
		if (size)
			*size = sizeof(mtrep__ArrayOfRepositoryInfo);
		((mtrep__ArrayOfRepositoryInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new mtrep__ArrayOfRepositoryInfo[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(mtrep__ArrayOfRepositoryInfo);
		for (int i = 0; i < n; i++)
			((mtrep__ArrayOfRepositoryInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (mtrep__ArrayOfRepositoryInfo*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mtrep__ArrayOfRepositoryInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying mtrep__ArrayOfRepositoryInfo %p -> %p\n", q, p));
	*(mtrep__ArrayOfRepositoryInfo*)p = *(mtrep__ArrayOfRepositoryInfo*)q;
}
#ifdef __cplusplus
}
#endif

void mtrep__RepositoryInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	((mtrep__RepositoryInfo*)this)->Country = NULL;
	soap_default_int(soap, &((mtrep__RepositoryInfo*)this)->Date);
	soap_default_int(soap, &((mtrep__RepositoryInfo*)this)->Delay);
	((mtrep__RepositoryInfo*)this)->Description = NULL;
	soap_default_mtrep__Integrities(soap, &((mtrep__RepositoryInfo*)this)->Integrity);
	soap_default_mtrep__Levels(soap, &((mtrep__RepositoryInfo*)this)->Level);
	soap_default_mtrep__RepositoryStatus(soap, &((mtrep__RepositoryInfo*)this)->Status);
	((mtrep__RepositoryInfo*)this)->Url = NULL;
	soap_default_int(soap, &((mtrep__RepositoryInfo*)this)->Version);
	/* transient soap skipped */
}

void mtrep__RepositoryInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &((mtrep__RepositoryInfo*)this)->Country);
	soap_serialize_PointerTostd__string(soap, &((mtrep__RepositoryInfo*)this)->Description);
	soap_serialize_PointerTostd__string(soap, &((mtrep__RepositoryInfo*)this)->Url);
	/* transient soap skipped */
}

int mtrep__RepositoryInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_mtrep__RepositoryInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int mtrep__RepositoryInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_mtrep__RepositoryInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mtrep__RepositoryInfo(struct soap *soap, const char *tag, int id, const mtrep__RepositoryInfo *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mtrep__RepositoryInfo), type);
	soap_out_PointerTostd__string(soap, "mtrep:Country", -1, &(((mtrep__RepositoryInfo*)a)->Country), "");
	soap_out_int(soap, "mtrep:Date", -1, &(((mtrep__RepositoryInfo*)a)->Date), "");
	soap_out_int(soap, "mtrep:Delay", -1, &(((mtrep__RepositoryInfo*)a)->Delay), "");
	soap_out_PointerTostd__string(soap, "mtrep:Description", -1, &(((mtrep__RepositoryInfo*)a)->Description), "");
	soap_out_mtrep__Integrities(soap, "mtrep:Integrity", -1, &(((mtrep__RepositoryInfo*)a)->Integrity), "");
	soap_out_mtrep__Levels(soap, "mtrep:Level", -1, &(((mtrep__RepositoryInfo*)a)->Level), "");
	soap_out_mtrep__RepositoryStatus(soap, "mtrep:Status", -1, &(((mtrep__RepositoryInfo*)a)->Status), "");
	soap_out_PointerTostd__string(soap, "mtrep:Url", -1, &(((mtrep__RepositoryInfo*)a)->Url), "");
	soap_out_int(soap, "mtrep:Version", -1, &(((mtrep__RepositoryInfo*)a)->Version), "");
	/* transient soap skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *mtrep__RepositoryInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_mtrep__RepositoryInfo(soap, this, tag, type);
}

SOAP_FMAC3 mtrep__RepositoryInfo * SOAP_FMAC4 soap_get_mtrep__RepositoryInfo(struct soap *soap, mtrep__RepositoryInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_mtrep__RepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *mtrep__RepositoryInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_mtrep__RepositoryInfo(soap, tag, this, type);
}

SOAP_FMAC3 mtrep__RepositoryInfo * SOAP_FMAC4 soap_in_mtrep__RepositoryInfo(struct soap *soap, const char *tag, mtrep__RepositoryInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (mtrep__RepositoryInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mtrep__RepositoryInfo, sizeof(mtrep__RepositoryInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_mtrep__RepositoryInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (mtrep__RepositoryInfo *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_Country1 = 1, soap_flag_Date1 = 1, soap_flag_Delay1 = 1, soap_flag_Description1 = 1, soap_flag_Integrity1 = 1, soap_flag_Level1 = 1, soap_flag_Status1 = 1, soap_flag_Url1 = 1, soap_flag_Version1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Country1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "mtrep:Country", &(((mtrep__RepositoryInfo*)a)->Country), "xsd:string"))
				{	soap_flag_Country1--;
					continue;
				}
			if (soap_flag_Date1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "mtrep:Date", &(((mtrep__RepositoryInfo*)a)->Date), "xsd:int"))
				{	soap_flag_Date1--;
					continue;
				}
			if (soap_flag_Delay1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "mtrep:Delay", &(((mtrep__RepositoryInfo*)a)->Delay), "xsd:int"))
				{	soap_flag_Delay1--;
					continue;
				}
			if (soap_flag_Description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "mtrep:Description", &(((mtrep__RepositoryInfo*)a)->Description), "xsd:string"))
				{	soap_flag_Description1--;
					continue;
				}
			if (soap_flag_Integrity1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mtrep__Integrities(soap, "mtrep:Integrity", &(((mtrep__RepositoryInfo*)a)->Integrity), "mtrep:Integrities"))
				{	soap_flag_Integrity1--;
					continue;
				}
			if (soap_flag_Level1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mtrep__Levels(soap, "mtrep:Level", &(((mtrep__RepositoryInfo*)a)->Level), "mtrep:Levels"))
				{	soap_flag_Level1--;
					continue;
				}
			if (soap_flag_Status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mtrep__RepositoryStatus(soap, "mtrep:Status", &(((mtrep__RepositoryInfo*)a)->Status), "mtrep:RepositoryStatus"))
				{	soap_flag_Status1--;
					continue;
				}
			if (soap_flag_Url1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "mtrep:Url", &(((mtrep__RepositoryInfo*)a)->Url), "xsd:string"))
				{	soap_flag_Url1--;
					continue;
				}
			if (soap_flag_Version1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "mtrep:Version", &(((mtrep__RepositoryInfo*)a)->Version), "xsd:int"))
				{	soap_flag_Version1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Date1 > 0 || soap_flag_Delay1 > 0 || soap_flag_Integrity1 > 0 || soap_flag_Level1 > 0 || soap_flag_Status1 > 0 || soap_flag_Version1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (mtrep__RepositoryInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mtrep__RepositoryInfo, 0, sizeof(mtrep__RepositoryInfo), 0, soap_copy_mtrep__RepositoryInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 mtrep__RepositoryInfo * SOAP_FMAC6 soap_new_mtrep__RepositoryInfo(struct soap *soap, int n)
{	return soap_instantiate_mtrep__RepositoryInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_mtrep__RepositoryInfo(struct soap *soap, mtrep__RepositoryInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 mtrep__RepositoryInfo * SOAP_FMAC4 soap_instantiate_mtrep__RepositoryInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mtrep__RepositoryInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mtrep__RepositoryInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new mtrep__RepositoryInfo;
		if (size)
			*size = sizeof(mtrep__RepositoryInfo);
		((mtrep__RepositoryInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new mtrep__RepositoryInfo[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(mtrep__RepositoryInfo);
		for (int i = 0; i < n; i++)
			((mtrep__RepositoryInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (mtrep__RepositoryInfo*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mtrep__RepositoryInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying mtrep__RepositoryInfo %p -> %p\n", q, p));
	*(mtrep__RepositoryInfo*)p = *(mtrep__RepositoryInfo*)q;
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}
#ifdef __cplusplus
}
#endif

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type);
	soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}
#ifdef __cplusplus
}
#endif

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type);
	soap_putelement(soap, a->fault, "fault", -1, a->__type);
	soap_outliteral(soap, "-any", &a->__any, NULL);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}
#ifdef __cplusplus
}
#endif

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}
#ifdef __cplusplus
}
#endif

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient dummy skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient dummy skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	/* transient dummy skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient dummy skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}
#ifdef __cplusplus
}
#endif

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetListCreationTime_(struct soap *soap, struct __ns1__GetListCreationTime_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetListCreationTime = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetListCreationTime_(struct soap *soap, const struct __ns1__GetListCreationTime_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetListCreationTime(soap, &a->ns1__GetListCreationTime);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetListCreationTime_(struct soap *soap, const struct __ns1__GetListCreationTime_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetListCreationTime_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetListCreationTime_(struct soap *soap, const char *tag, int id, const struct __ns1__GetListCreationTime_ *a, const char *type)
{
	soap_out_PointerTo_ns1__GetListCreationTime(soap, "ns1:GetListCreationTime", -1, &a->ns1__GetListCreationTime, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetListCreationTime_ * SOAP_FMAC4 soap_get___ns1__GetListCreationTime_(struct soap *soap, struct __ns1__GetListCreationTime_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetListCreationTime_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetListCreationTime_ * SOAP_FMAC4 soap_in___ns1__GetListCreationTime_(struct soap *soap, const char *tag, struct __ns1__GetListCreationTime_ *a, const char *type)
{
	short soap_flag_ns1__GetListCreationTime = 1;
	int soap_flag;
	a = (struct __ns1__GetListCreationTime_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetListCreationTime_, sizeof(struct __ns1__GetListCreationTime_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetListCreationTime_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetListCreationTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetListCreationTime(soap, "ns1:GetListCreationTime", &a->ns1__GetListCreationTime, ""))
				{	soap_flag_ns1__GetListCreationTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
			if (soap_flag)
				{
					soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__GetListCreationTime_ * SOAP_FMAC6 soap_new___ns1__GetListCreationTime_(struct soap *soap, int n)
{	return soap_instantiate___ns1__GetListCreationTime_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__GetListCreationTime_(struct soap *soap, struct __ns1__GetListCreationTime_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__GetListCreationTime_ * SOAP_FMAC4 soap_instantiate___ns1__GetListCreationTime_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetListCreationTime_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetListCreationTime_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__GetListCreationTime_;
		if (size)
			*size = sizeof(struct __ns1__GetListCreationTime_);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__GetListCreationTime_[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetListCreationTime_);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetListCreationTime_*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetListCreationTime_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetListCreationTime_ %p -> %p\n", q, p));
	*(struct __ns1__GetListCreationTime_*)p = *(struct __ns1__GetListCreationTime_*)q;
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRepositories_(struct soap *soap, struct __ns1__GetRepositories_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mtrep__GetRepositories = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRepositories_(struct soap *soap, const struct __ns1__GetRepositories_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mtrep__GetRepositories(soap, &a->mtrep__GetRepositories);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRepositories_(struct soap *soap, const struct __ns1__GetRepositories_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetRepositories_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRepositories_(struct soap *soap, const char *tag, int id, const struct __ns1__GetRepositories_ *a, const char *type)
{
	soap_out_PointerTo_mtrep__GetRepositories(soap, "mtrep:GetRepositories", -1, &a->mtrep__GetRepositories, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetRepositories_ * SOAP_FMAC4 soap_get___ns1__GetRepositories_(struct soap *soap, struct __ns1__GetRepositories_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetRepositories_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetRepositories_ * SOAP_FMAC4 soap_in___ns1__GetRepositories_(struct soap *soap, const char *tag, struct __ns1__GetRepositories_ *a, const char *type)
{
	short soap_flag_mtrep__GetRepositories = 1;
	int soap_flag;
	a = (struct __ns1__GetRepositories_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetRepositories_, sizeof(struct __ns1__GetRepositories_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetRepositories_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mtrep__GetRepositories && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mtrep__GetRepositories(soap, "mtrep:GetRepositories", &a->mtrep__GetRepositories, ""))
				{	soap_flag_mtrep__GetRepositories--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
			if (soap_flag)
				{
					soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__GetRepositories_ * SOAP_FMAC6 soap_new___ns1__GetRepositories_(struct soap *soap, int n)
{	return soap_instantiate___ns1__GetRepositories_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__GetRepositories_(struct soap *soap, struct __ns1__GetRepositories_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__GetRepositories_ * SOAP_FMAC4 soap_instantiate___ns1__GetRepositories_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetRepositories_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetRepositories_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__GetRepositories_;
		if (size)
			*size = sizeof(struct __ns1__GetRepositories_);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__GetRepositories_[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetRepositories_);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetRepositories_*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetRepositories_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetRepositories_ %p -> %p\n", q, p));
	*(struct __ns1__GetRepositories_*)p = *(struct __ns1__GetRepositories_*)q;
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAllRepositories_(struct soap *soap, struct __ns1__GetAllRepositories_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mtrep__GetAllRepositories = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAllRepositories_(struct soap *soap, const struct __ns1__GetAllRepositories_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mtrep__GetAllRepositories(soap, &a->mtrep__GetAllRepositories);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAllRepositories_(struct soap *soap, const struct __ns1__GetAllRepositories_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetAllRepositories_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAllRepositories_(struct soap *soap, const char *tag, int id, const struct __ns1__GetAllRepositories_ *a, const char *type)
{
	soap_out_PointerTo_mtrep__GetAllRepositories(soap, "mtrep:GetAllRepositories", -1, &a->mtrep__GetAllRepositories, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetAllRepositories_ * SOAP_FMAC4 soap_get___ns1__GetAllRepositories_(struct soap *soap, struct __ns1__GetAllRepositories_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetAllRepositories_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetAllRepositories_ * SOAP_FMAC4 soap_in___ns1__GetAllRepositories_(struct soap *soap, const char *tag, struct __ns1__GetAllRepositories_ *a, const char *type)
{
	short soap_flag_mtrep__GetAllRepositories = 1;
	int soap_flag;
	a = (struct __ns1__GetAllRepositories_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetAllRepositories_, sizeof(struct __ns1__GetAllRepositories_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetAllRepositories_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mtrep__GetAllRepositories && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mtrep__GetAllRepositories(soap, "mtrep:GetAllRepositories", &a->mtrep__GetAllRepositories, ""))
				{	soap_flag_mtrep__GetAllRepositories--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
			if (soap_flag)
				{
					soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__GetAllRepositories_ * SOAP_FMAC6 soap_new___ns1__GetAllRepositories_(struct soap *soap, int n)
{	return soap_instantiate___ns1__GetAllRepositories_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__GetAllRepositories_(struct soap *soap, struct __ns1__GetAllRepositories_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__GetAllRepositories_ * SOAP_FMAC4 soap_instantiate___ns1__GetAllRepositories_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetAllRepositories_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetAllRepositories_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__GetAllRepositories_;
		if (size)
			*size = sizeof(struct __ns1__GetAllRepositories_);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__GetAllRepositories_[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetAllRepositories_);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetAllRepositories_*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAllRepositories_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetAllRepositories_ %p -> %p\n", q, p));
	*(struct __ns1__GetAllRepositories_*)p = *(struct __ns1__GetAllRepositories_*)q;
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PickRepository_(struct soap *soap, struct __ns1__PickRepository_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mtrep__PickRepository = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PickRepository_(struct soap *soap, const struct __ns1__PickRepository_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mtrep__PickRepository(soap, &a->mtrep__PickRepository);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PickRepository_(struct soap *soap, const struct __ns1__PickRepository_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__PickRepository_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PickRepository_(struct soap *soap, const char *tag, int id, const struct __ns1__PickRepository_ *a, const char *type)
{
	soap_out_PointerTo_mtrep__PickRepository(soap, "mtrep:PickRepository", -1, &a->mtrep__PickRepository, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__PickRepository_ * SOAP_FMAC4 soap_get___ns1__PickRepository_(struct soap *soap, struct __ns1__PickRepository_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__PickRepository_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__PickRepository_ * SOAP_FMAC4 soap_in___ns1__PickRepository_(struct soap *soap, const char *tag, struct __ns1__PickRepository_ *a, const char *type)
{
	short soap_flag_mtrep__PickRepository = 1;
	int soap_flag;
	a = (struct __ns1__PickRepository_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__PickRepository_, sizeof(struct __ns1__PickRepository_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__PickRepository_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mtrep__PickRepository && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mtrep__PickRepository(soap, "mtrep:PickRepository", &a->mtrep__PickRepository, ""))
				{	soap_flag_mtrep__PickRepository--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
			if (soap_flag)
				{
					soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__PickRepository_ * SOAP_FMAC6 soap_new___ns1__PickRepository_(struct soap *soap, int n)
{	return soap_instantiate___ns1__PickRepository_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__PickRepository_(struct soap *soap, struct __ns1__PickRepository_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__PickRepository_ * SOAP_FMAC4 soap_instantiate___ns1__PickRepository_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__PickRepository_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__PickRepository_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__PickRepository_;
		if (size)
			*size = sizeof(struct __ns1__PickRepository_);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__PickRepository_[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__PickRepository_);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__PickRepository_*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__PickRepository_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__PickRepository_ %p -> %p\n", q, p));
	*(struct __ns1__PickRepository_*)p = *(struct __ns1__PickRepository_*)q;
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TryGetRepositoryInfo_(struct soap *soap, struct __ns1__TryGetRepositoryInfo_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mtrep__TryGetRepositoryInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TryGetRepositoryInfo_(struct soap *soap, const struct __ns1__TryGetRepositoryInfo_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mtrep__TryGetRepositoryInfo(soap, &a->mtrep__TryGetRepositoryInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TryGetRepositoryInfo_(struct soap *soap, const struct __ns1__TryGetRepositoryInfo_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__TryGetRepositoryInfo_(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TryGetRepositoryInfo_(struct soap *soap, const char *tag, int id, const struct __ns1__TryGetRepositoryInfo_ *a, const char *type)
{
	soap_out_PointerTo_mtrep__TryGetRepositoryInfo(soap, "mtrep:TryGetRepositoryInfo", -1, &a->mtrep__TryGetRepositoryInfo, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__TryGetRepositoryInfo_ * SOAP_FMAC4 soap_get___ns1__TryGetRepositoryInfo_(struct soap *soap, struct __ns1__TryGetRepositoryInfo_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__TryGetRepositoryInfo_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__TryGetRepositoryInfo_ * SOAP_FMAC4 soap_in___ns1__TryGetRepositoryInfo_(struct soap *soap, const char *tag, struct __ns1__TryGetRepositoryInfo_ *a, const char *type)
{
	short soap_flag_mtrep__TryGetRepositoryInfo = 1;
	int soap_flag;
	a = (struct __ns1__TryGetRepositoryInfo_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__TryGetRepositoryInfo_, sizeof(struct __ns1__TryGetRepositoryInfo_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__TryGetRepositoryInfo_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mtrep__TryGetRepositoryInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mtrep__TryGetRepositoryInfo(soap, "mtrep:TryGetRepositoryInfo", &a->mtrep__TryGetRepositoryInfo, ""))
				{	soap_flag_mtrep__TryGetRepositoryInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
			if (soap_flag)
				{
					soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__TryGetRepositoryInfo_ * SOAP_FMAC6 soap_new___ns1__TryGetRepositoryInfo_(struct soap *soap, int n)
{	return soap_instantiate___ns1__TryGetRepositoryInfo_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__TryGetRepositoryInfo_(struct soap *soap, struct __ns1__TryGetRepositoryInfo_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__TryGetRepositoryInfo_ * SOAP_FMAC4 soap_instantiate___ns1__TryGetRepositoryInfo_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__TryGetRepositoryInfo_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__TryGetRepositoryInfo_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__TryGetRepositoryInfo_;
		if (size)
			*size = sizeof(struct __ns1__TryGetRepositoryInfo_);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__TryGetRepositoryInfo_[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__TryGetRepositoryInfo_);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__TryGetRepositoryInfo_*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__TryGetRepositoryInfo_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__TryGetRepositoryInfo_ %p -> %p\n", q, p));
	*(struct __ns1__TryGetRepositoryInfo_*)p = *(struct __ns1__TryGetRepositoryInfo_*)q;
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetListCreationTime(struct soap *soap, struct __ns1__GetListCreationTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetListCreationTime = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetListCreationTime(struct soap *soap, const struct __ns1__GetListCreationTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetListCreationTime(soap, &a->ns1__GetListCreationTime);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetListCreationTime(struct soap *soap, const struct __ns1__GetListCreationTime *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetListCreationTime(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetListCreationTime(struct soap *soap, const char *tag, int id, const struct __ns1__GetListCreationTime *a, const char *type)
{
	soap_out_PointerTo_ns1__GetListCreationTime(soap, "ns1:GetListCreationTime", -1, &a->ns1__GetListCreationTime, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetListCreationTime * SOAP_FMAC4 soap_get___ns1__GetListCreationTime(struct soap *soap, struct __ns1__GetListCreationTime *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetListCreationTime(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetListCreationTime * SOAP_FMAC4 soap_in___ns1__GetListCreationTime(struct soap *soap, const char *tag, struct __ns1__GetListCreationTime *a, const char *type)
{
	short soap_flag_ns1__GetListCreationTime = 1;
	int soap_flag;
	a = (struct __ns1__GetListCreationTime *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetListCreationTime, sizeof(struct __ns1__GetListCreationTime), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetListCreationTime(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetListCreationTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetListCreationTime(soap, "ns1:GetListCreationTime", &a->ns1__GetListCreationTime, ""))
				{	soap_flag_ns1__GetListCreationTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
			if (soap_flag)
				{
					soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__GetListCreationTime * SOAP_FMAC6 soap_new___ns1__GetListCreationTime(struct soap *soap, int n)
{	return soap_instantiate___ns1__GetListCreationTime(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__GetListCreationTime(struct soap *soap, struct __ns1__GetListCreationTime *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__GetListCreationTime * SOAP_FMAC4 soap_instantiate___ns1__GetListCreationTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetListCreationTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetListCreationTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__GetListCreationTime;
		if (size)
			*size = sizeof(struct __ns1__GetListCreationTime);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__GetListCreationTime[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetListCreationTime);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetListCreationTime*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetListCreationTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetListCreationTime %p -> %p\n", q, p));
	*(struct __ns1__GetListCreationTime*)p = *(struct __ns1__GetListCreationTime*)q;
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRepositories(struct soap *soap, struct __ns1__GetRepositories *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mtrep__GetRepositories = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRepositories(struct soap *soap, const struct __ns1__GetRepositories *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mtrep__GetRepositories(soap, &a->mtrep__GetRepositories);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRepositories(struct soap *soap, const struct __ns1__GetRepositories *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetRepositories(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRepositories(struct soap *soap, const char *tag, int id, const struct __ns1__GetRepositories *a, const char *type)
{
	soap_out_PointerTo_mtrep__GetRepositories(soap, "mtrep:GetRepositories", -1, &a->mtrep__GetRepositories, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetRepositories * SOAP_FMAC4 soap_get___ns1__GetRepositories(struct soap *soap, struct __ns1__GetRepositories *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetRepositories(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetRepositories * SOAP_FMAC4 soap_in___ns1__GetRepositories(struct soap *soap, const char *tag, struct __ns1__GetRepositories *a, const char *type)
{
	short soap_flag_mtrep__GetRepositories = 1;
	int soap_flag;
	a = (struct __ns1__GetRepositories *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetRepositories, sizeof(struct __ns1__GetRepositories), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetRepositories(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mtrep__GetRepositories && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mtrep__GetRepositories(soap, "mtrep:GetRepositories", &a->mtrep__GetRepositories, ""))
				{	soap_flag_mtrep__GetRepositories--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
			if (soap_flag)
				{
					soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__GetRepositories * SOAP_FMAC6 soap_new___ns1__GetRepositories(struct soap *soap, int n)
{	return soap_instantiate___ns1__GetRepositories(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__GetRepositories(struct soap *soap, struct __ns1__GetRepositories *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__GetRepositories * SOAP_FMAC4 soap_instantiate___ns1__GetRepositories(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetRepositories(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetRepositories, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__GetRepositories;
		if (size)
			*size = sizeof(struct __ns1__GetRepositories);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__GetRepositories[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetRepositories);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetRepositories*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetRepositories(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetRepositories %p -> %p\n", q, p));
	*(struct __ns1__GetRepositories*)p = *(struct __ns1__GetRepositories*)q;
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAllRepositories(struct soap *soap, struct __ns1__GetAllRepositories *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mtrep__GetAllRepositories = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAllRepositories(struct soap *soap, const struct __ns1__GetAllRepositories *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mtrep__GetAllRepositories(soap, &a->mtrep__GetAllRepositories);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAllRepositories(struct soap *soap, const struct __ns1__GetAllRepositories *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetAllRepositories(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAllRepositories(struct soap *soap, const char *tag, int id, const struct __ns1__GetAllRepositories *a, const char *type)
{
	soap_out_PointerTo_mtrep__GetAllRepositories(soap, "mtrep:GetAllRepositories", -1, &a->mtrep__GetAllRepositories, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetAllRepositories * SOAP_FMAC4 soap_get___ns1__GetAllRepositories(struct soap *soap, struct __ns1__GetAllRepositories *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetAllRepositories(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__GetAllRepositories * SOAP_FMAC4 soap_in___ns1__GetAllRepositories(struct soap *soap, const char *tag, struct __ns1__GetAllRepositories *a, const char *type)
{
	short soap_flag_mtrep__GetAllRepositories = 1;
	int soap_flag;
	a = (struct __ns1__GetAllRepositories *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__GetAllRepositories, sizeof(struct __ns1__GetAllRepositories), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetAllRepositories(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mtrep__GetAllRepositories && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mtrep__GetAllRepositories(soap, "mtrep:GetAllRepositories", &a->mtrep__GetAllRepositories, ""))
				{	soap_flag_mtrep__GetAllRepositories--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
			if (soap_flag)
				{
					soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__GetAllRepositories * SOAP_FMAC6 soap_new___ns1__GetAllRepositories(struct soap *soap, int n)
{	return soap_instantiate___ns1__GetAllRepositories(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__GetAllRepositories(struct soap *soap, struct __ns1__GetAllRepositories *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__GetAllRepositories * SOAP_FMAC4 soap_instantiate___ns1__GetAllRepositories(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetAllRepositories(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetAllRepositories, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__GetAllRepositories;
		if (size)
			*size = sizeof(struct __ns1__GetAllRepositories);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__GetAllRepositories[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetAllRepositories);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetAllRepositories*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAllRepositories(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetAllRepositories %p -> %p\n", q, p));
	*(struct __ns1__GetAllRepositories*)p = *(struct __ns1__GetAllRepositories*)q;
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PickRepository(struct soap *soap, struct __ns1__PickRepository *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mtrep__PickRepository = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PickRepository(struct soap *soap, const struct __ns1__PickRepository *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mtrep__PickRepository(soap, &a->mtrep__PickRepository);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PickRepository(struct soap *soap, const struct __ns1__PickRepository *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__PickRepository(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PickRepository(struct soap *soap, const char *tag, int id, const struct __ns1__PickRepository *a, const char *type)
{
	soap_out_PointerTo_mtrep__PickRepository(soap, "mtrep:PickRepository", -1, &a->mtrep__PickRepository, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__PickRepository * SOAP_FMAC4 soap_get___ns1__PickRepository(struct soap *soap, struct __ns1__PickRepository *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__PickRepository(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__PickRepository * SOAP_FMAC4 soap_in___ns1__PickRepository(struct soap *soap, const char *tag, struct __ns1__PickRepository *a, const char *type)
{
	short soap_flag_mtrep__PickRepository = 1;
	int soap_flag;
	a = (struct __ns1__PickRepository *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__PickRepository, sizeof(struct __ns1__PickRepository), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__PickRepository(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mtrep__PickRepository && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mtrep__PickRepository(soap, "mtrep:PickRepository", &a->mtrep__PickRepository, ""))
				{	soap_flag_mtrep__PickRepository--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
			if (soap_flag)
				{
					soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__PickRepository * SOAP_FMAC6 soap_new___ns1__PickRepository(struct soap *soap, int n)
{	return soap_instantiate___ns1__PickRepository(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__PickRepository(struct soap *soap, struct __ns1__PickRepository *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__PickRepository * SOAP_FMAC4 soap_instantiate___ns1__PickRepository(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__PickRepository(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__PickRepository, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__PickRepository;
		if (size)
			*size = sizeof(struct __ns1__PickRepository);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__PickRepository[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__PickRepository);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__PickRepository*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__PickRepository(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__PickRepository %p -> %p\n", q, p));
	*(struct __ns1__PickRepository*)p = *(struct __ns1__PickRepository*)q;
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TryGetRepositoryInfo(struct soap *soap, struct __ns1__TryGetRepositoryInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->mtrep__TryGetRepositoryInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TryGetRepositoryInfo(struct soap *soap, const struct __ns1__TryGetRepositoryInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_mtrep__TryGetRepositoryInfo(soap, &a->mtrep__TryGetRepositoryInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TryGetRepositoryInfo(struct soap *soap, const struct __ns1__TryGetRepositoryInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__TryGetRepositoryInfo(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TryGetRepositoryInfo(struct soap *soap, const char *tag, int id, const struct __ns1__TryGetRepositoryInfo *a, const char *type)
{
	soap_out_PointerTo_mtrep__TryGetRepositoryInfo(soap, "mtrep:TryGetRepositoryInfo", -1, &a->mtrep__TryGetRepositoryInfo, "");
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__TryGetRepositoryInfo * SOAP_FMAC4 soap_get___ns1__TryGetRepositoryInfo(struct soap *soap, struct __ns1__TryGetRepositoryInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__TryGetRepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct __ns1__TryGetRepositoryInfo * SOAP_FMAC4 soap_in___ns1__TryGetRepositoryInfo(struct soap *soap, const char *tag, struct __ns1__TryGetRepositoryInfo *a, const char *type)
{
	short soap_flag_mtrep__TryGetRepositoryInfo = 1;
	int soap_flag;
	a = (struct __ns1__TryGetRepositoryInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE___ns1__TryGetRepositoryInfo, sizeof(struct __ns1__TryGetRepositoryInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__TryGetRepositoryInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mtrep__TryGetRepositoryInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_mtrep__TryGetRepositoryInfo(soap, "mtrep:TryGetRepositoryInfo", &a->mtrep__TryGetRepositoryInfo, ""))
				{	soap_flag_mtrep__TryGetRepositoryInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
			if (soap_flag)
				{
					soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__TryGetRepositoryInfo * SOAP_FMAC6 soap_new___ns1__TryGetRepositoryInfo(struct soap *soap, int n)
{	return soap_instantiate___ns1__TryGetRepositoryInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__TryGetRepositoryInfo(struct soap *soap, struct __ns1__TryGetRepositoryInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__TryGetRepositoryInfo * SOAP_FMAC4 soap_instantiate___ns1__TryGetRepositoryInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__TryGetRepositoryInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__TryGetRepositoryInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__TryGetRepositoryInfo;
		if (size)
			*size = sizeof(struct __ns1__TryGetRepositoryInfo);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__TryGetRepositoryInfo[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__TryGetRepositoryInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__TryGetRepositoryInfo*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__TryGetRepositoryInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__TryGetRepositoryInfo %p -> %p\n", q, p));
	*(struct __ns1__TryGetRepositoryInfo*)p = *(struct __ns1__TryGetRepositoryInfo*)q;
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetListCreationTimeResponse(struct soap *soap, _ns1__GetListCreationTimeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetListCreationTimeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetListCreationTimeResponse(struct soap *soap, _ns1__GetListCreationTimeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetListCreationTimeResponse);
	if (soap_out_PointerTo_ns1__GetListCreationTimeResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetListCreationTimeResponse(struct soap *soap, const char *tag, int id, _ns1__GetListCreationTimeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetListCreationTimeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetListCreationTimeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetListCreationTimeResponse(struct soap *soap, _ns1__GetListCreationTimeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetListCreationTimeResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__GetListCreationTimeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetListCreationTimeResponse(struct soap *soap, const char *tag, _ns1__GetListCreationTimeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetListCreationTimeResponse **)soap_malloc(soap, sizeof(_ns1__GetListCreationTimeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetListCreationTimeResponse *)soap_instantiate__ns1__GetListCreationTimeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__GetListCreationTimeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetListCreationTimeResponse, sizeof(_ns1__GetListCreationTimeResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetListCreationTime(struct soap *soap, _ns1__GetListCreationTime *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetListCreationTime))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetListCreationTime(struct soap *soap, _ns1__GetListCreationTime *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetListCreationTime);
	if (soap_out_PointerTo_ns1__GetListCreationTime(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetListCreationTime(struct soap *soap, const char *tag, int id, _ns1__GetListCreationTime *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetListCreationTime);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetListCreationTime ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetListCreationTime(struct soap *soap, _ns1__GetListCreationTime **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetListCreationTime(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _ns1__GetListCreationTime ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetListCreationTime(struct soap *soap, const char *tag, _ns1__GetListCreationTime **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetListCreationTime **)soap_malloc(soap, sizeof(_ns1__GetListCreationTime *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetListCreationTime *)soap_instantiate__ns1__GetListCreationTime(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_ns1__GetListCreationTime **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetListCreationTime, sizeof(_ns1__GetListCreationTime), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mtrep__GetRepositoriesResponse(struct soap *soap, _mtrep__GetRepositoriesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mtrep__GetRepositoriesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mtrep__GetRepositoriesResponse(struct soap *soap, _mtrep__GetRepositoriesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mtrep__GetRepositoriesResponse);
	if (soap_out_PointerTo_mtrep__GetRepositoriesResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mtrep__GetRepositoriesResponse(struct soap *soap, const char *tag, int id, _mtrep__GetRepositoriesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mtrep__GetRepositoriesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mtrep__GetRepositoriesResponse ** SOAP_FMAC4 soap_get_PointerTo_mtrep__GetRepositoriesResponse(struct soap *soap, _mtrep__GetRepositoriesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mtrep__GetRepositoriesResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mtrep__GetRepositoriesResponse ** SOAP_FMAC4 soap_in_PointerTo_mtrep__GetRepositoriesResponse(struct soap *soap, const char *tag, _mtrep__GetRepositoriesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_mtrep__GetRepositoriesResponse **)soap_malloc(soap, sizeof(_mtrep__GetRepositoriesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mtrep__GetRepositoriesResponse *)soap_instantiate__mtrep__GetRepositoriesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mtrep__GetRepositoriesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mtrep__GetRepositoriesResponse, sizeof(_mtrep__GetRepositoriesResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mtrep__GetRepositories(struct soap *soap, _mtrep__GetRepositories *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mtrep__GetRepositories))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mtrep__GetRepositories(struct soap *soap, _mtrep__GetRepositories *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mtrep__GetRepositories);
	if (soap_out_PointerTo_mtrep__GetRepositories(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mtrep__GetRepositories(struct soap *soap, const char *tag, int id, _mtrep__GetRepositories *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mtrep__GetRepositories);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mtrep__GetRepositories ** SOAP_FMAC4 soap_get_PointerTo_mtrep__GetRepositories(struct soap *soap, _mtrep__GetRepositories **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mtrep__GetRepositories(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mtrep__GetRepositories ** SOAP_FMAC4 soap_in_PointerTo_mtrep__GetRepositories(struct soap *soap, const char *tag, _mtrep__GetRepositories **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_mtrep__GetRepositories **)soap_malloc(soap, sizeof(_mtrep__GetRepositories *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mtrep__GetRepositories *)soap_instantiate__mtrep__GetRepositories(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mtrep__GetRepositories **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mtrep__GetRepositories, sizeof(_mtrep__GetRepositories), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mtrep__GetAllRepositoriesResponse(struct soap *soap, _mtrep__GetAllRepositoriesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mtrep__GetAllRepositoriesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mtrep__GetAllRepositoriesResponse(struct soap *soap, _mtrep__GetAllRepositoriesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mtrep__GetAllRepositoriesResponse);
	if (soap_out_PointerTo_mtrep__GetAllRepositoriesResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mtrep__GetAllRepositoriesResponse(struct soap *soap, const char *tag, int id, _mtrep__GetAllRepositoriesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mtrep__GetAllRepositoriesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mtrep__GetAllRepositoriesResponse ** SOAP_FMAC4 soap_get_PointerTo_mtrep__GetAllRepositoriesResponse(struct soap *soap, _mtrep__GetAllRepositoriesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mtrep__GetAllRepositoriesResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mtrep__GetAllRepositoriesResponse ** SOAP_FMAC4 soap_in_PointerTo_mtrep__GetAllRepositoriesResponse(struct soap *soap, const char *tag, _mtrep__GetAllRepositoriesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_mtrep__GetAllRepositoriesResponse **)soap_malloc(soap, sizeof(_mtrep__GetAllRepositoriesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mtrep__GetAllRepositoriesResponse *)soap_instantiate__mtrep__GetAllRepositoriesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mtrep__GetAllRepositoriesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mtrep__GetAllRepositoriesResponse, sizeof(_mtrep__GetAllRepositoriesResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mtrep__GetAllRepositories(struct soap *soap, _mtrep__GetAllRepositories *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mtrep__GetAllRepositories))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mtrep__GetAllRepositories(struct soap *soap, _mtrep__GetAllRepositories *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mtrep__GetAllRepositories);
	if (soap_out_PointerTo_mtrep__GetAllRepositories(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mtrep__GetAllRepositories(struct soap *soap, const char *tag, int id, _mtrep__GetAllRepositories *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mtrep__GetAllRepositories);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mtrep__GetAllRepositories ** SOAP_FMAC4 soap_get_PointerTo_mtrep__GetAllRepositories(struct soap *soap, _mtrep__GetAllRepositories **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mtrep__GetAllRepositories(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mtrep__GetAllRepositories ** SOAP_FMAC4 soap_in_PointerTo_mtrep__GetAllRepositories(struct soap *soap, const char *tag, _mtrep__GetAllRepositories **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_mtrep__GetAllRepositories **)soap_malloc(soap, sizeof(_mtrep__GetAllRepositories *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mtrep__GetAllRepositories *)soap_instantiate__mtrep__GetAllRepositories(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mtrep__GetAllRepositories **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mtrep__GetAllRepositories, sizeof(_mtrep__GetAllRepositories), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mtrep__PickRepositoryResponse(struct soap *soap, _mtrep__PickRepositoryResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mtrep__PickRepositoryResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mtrep__PickRepositoryResponse(struct soap *soap, _mtrep__PickRepositoryResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mtrep__PickRepositoryResponse);
	if (soap_out_PointerTo_mtrep__PickRepositoryResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mtrep__PickRepositoryResponse(struct soap *soap, const char *tag, int id, _mtrep__PickRepositoryResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mtrep__PickRepositoryResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mtrep__PickRepositoryResponse ** SOAP_FMAC4 soap_get_PointerTo_mtrep__PickRepositoryResponse(struct soap *soap, _mtrep__PickRepositoryResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mtrep__PickRepositoryResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mtrep__PickRepositoryResponse ** SOAP_FMAC4 soap_in_PointerTo_mtrep__PickRepositoryResponse(struct soap *soap, const char *tag, _mtrep__PickRepositoryResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_mtrep__PickRepositoryResponse **)soap_malloc(soap, sizeof(_mtrep__PickRepositoryResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mtrep__PickRepositoryResponse *)soap_instantiate__mtrep__PickRepositoryResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mtrep__PickRepositoryResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mtrep__PickRepositoryResponse, sizeof(_mtrep__PickRepositoryResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mtrep__PickRepository(struct soap *soap, _mtrep__PickRepository *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mtrep__PickRepository))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mtrep__PickRepository(struct soap *soap, _mtrep__PickRepository *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mtrep__PickRepository);
	if (soap_out_PointerTo_mtrep__PickRepository(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mtrep__PickRepository(struct soap *soap, const char *tag, int id, _mtrep__PickRepository *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mtrep__PickRepository);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mtrep__PickRepository ** SOAP_FMAC4 soap_get_PointerTo_mtrep__PickRepository(struct soap *soap, _mtrep__PickRepository **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mtrep__PickRepository(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mtrep__PickRepository ** SOAP_FMAC4 soap_in_PointerTo_mtrep__PickRepository(struct soap *soap, const char *tag, _mtrep__PickRepository **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_mtrep__PickRepository **)soap_malloc(soap, sizeof(_mtrep__PickRepository *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mtrep__PickRepository *)soap_instantiate__mtrep__PickRepository(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mtrep__PickRepository **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mtrep__PickRepository, sizeof(_mtrep__PickRepository), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mtrep__TryGetRepositoryInfoResponse(struct soap *soap, _mtrep__TryGetRepositoryInfoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mtrep__TryGetRepositoryInfoResponse(struct soap *soap, _mtrep__TryGetRepositoryInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mtrep__TryGetRepositoryInfoResponse);
	if (soap_out_PointerTo_mtrep__TryGetRepositoryInfoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mtrep__TryGetRepositoryInfoResponse(struct soap *soap, const char *tag, int id, _mtrep__TryGetRepositoryInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mtrep__TryGetRepositoryInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_mtrep__TryGetRepositoryInfoResponse(struct soap *soap, _mtrep__TryGetRepositoryInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mtrep__TryGetRepositoryInfoResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mtrep__TryGetRepositoryInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_mtrep__TryGetRepositoryInfoResponse(struct soap *soap, const char *tag, _mtrep__TryGetRepositoryInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_mtrep__TryGetRepositoryInfoResponse **)soap_malloc(soap, sizeof(_mtrep__TryGetRepositoryInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mtrep__TryGetRepositoryInfoResponse *)soap_instantiate__mtrep__TryGetRepositoryInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mtrep__TryGetRepositoryInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mtrep__TryGetRepositoryInfoResponse, sizeof(_mtrep__TryGetRepositoryInfoResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mtrep__TryGetRepositoryInfo(struct soap *soap, _mtrep__TryGetRepositoryInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__mtrep__TryGetRepositoryInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mtrep__TryGetRepositoryInfo(struct soap *soap, _mtrep__TryGetRepositoryInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_mtrep__TryGetRepositoryInfo);
	if (soap_out_PointerTo_mtrep__TryGetRepositoryInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mtrep__TryGetRepositoryInfo(struct soap *soap, const char *tag, int id, _mtrep__TryGetRepositoryInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__mtrep__TryGetRepositoryInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _mtrep__TryGetRepositoryInfo ** SOAP_FMAC4 soap_get_PointerTo_mtrep__TryGetRepositoryInfo(struct soap *soap, _mtrep__TryGetRepositoryInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_mtrep__TryGetRepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 _mtrep__TryGetRepositoryInfo ** SOAP_FMAC4 soap_in_PointerTo_mtrep__TryGetRepositoryInfo(struct soap *soap, const char *tag, _mtrep__TryGetRepositoryInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_mtrep__TryGetRepositoryInfo **)soap_malloc(soap, sizeof(_mtrep__TryGetRepositoryInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_mtrep__TryGetRepositoryInfo *)soap_instantiate__mtrep__TryGetRepositoryInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (_mtrep__TryGetRepositoryInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__mtrep__TryGetRepositoryInfo, sizeof(_mtrep__TryGetRepositoryInfo), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomtrep__ArrayOfRepositoryInfo(struct soap *soap, mtrep__ArrayOfRepositoryInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_mtrep__ArrayOfRepositoryInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomtrep__ArrayOfRepositoryInfo(struct soap *soap, mtrep__ArrayOfRepositoryInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTomtrep__ArrayOfRepositoryInfo);
	if (soap_out_PointerTomtrep__ArrayOfRepositoryInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomtrep__ArrayOfRepositoryInfo(struct soap *soap, const char *tag, int id, mtrep__ArrayOfRepositoryInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_mtrep__ArrayOfRepositoryInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 mtrep__ArrayOfRepositoryInfo ** SOAP_FMAC4 soap_get_PointerTomtrep__ArrayOfRepositoryInfo(struct soap *soap, mtrep__ArrayOfRepositoryInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTomtrep__ArrayOfRepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 mtrep__ArrayOfRepositoryInfo ** SOAP_FMAC4 soap_in_PointerTomtrep__ArrayOfRepositoryInfo(struct soap *soap, const char *tag, mtrep__ArrayOfRepositoryInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (mtrep__ArrayOfRepositoryInfo **)soap_malloc(soap, sizeof(mtrep__ArrayOfRepositoryInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (mtrep__ArrayOfRepositoryInfo *)soap_instantiate_mtrep__ArrayOfRepositoryInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (mtrep__ArrayOfRepositoryInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_mtrep__ArrayOfRepositoryInfo, sizeof(mtrep__ArrayOfRepositoryInfo), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomtrep__RepositoryInfo(struct soap *soap, mtrep__RepositoryInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_mtrep__RepositoryInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomtrep__RepositoryInfo(struct soap *soap, mtrep__RepositoryInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTomtrep__RepositoryInfo);
	if (soap_out_PointerTomtrep__RepositoryInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomtrep__RepositoryInfo(struct soap *soap, const char *tag, int id, mtrep__RepositoryInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_mtrep__RepositoryInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 mtrep__RepositoryInfo ** SOAP_FMAC4 soap_get_PointerTomtrep__RepositoryInfo(struct soap *soap, mtrep__RepositoryInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTomtrep__RepositoryInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 mtrep__RepositoryInfo ** SOAP_FMAC4 soap_in_PointerTomtrep__RepositoryInfo(struct soap *soap, const char *tag, mtrep__RepositoryInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (mtrep__RepositoryInfo **)soap_malloc(soap, sizeof(mtrep__RepositoryInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (mtrep__RepositoryInfo *)soap_instantiate_mtrep__RepositoryInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	a = (mtrep__RepositoryInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_mtrep__RepositoryInfo, sizeof(mtrep__RepositoryInfo), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(struct soap *soap, std::vector<mtrep__RepositoryInfo * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(struct soap *soap, const std::vector<mtrep__RepositoryInfo * >*a)
{
	for (std::vector<mtrep__RepositoryInfo * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTomtrep__RepositoryInfo(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(struct soap *soap, const char *tag, int id, const std::vector<mtrep__RepositoryInfo * >*a, const char *type)
{
	for (std::vector<mtrep__RepositoryInfo * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTomtrep__RepositoryInfo(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<mtrep__RepositoryInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(struct soap *soap, const char *tag, std::vector<mtrep__RepositoryInfo * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(soap, -1)))
		return NULL;
	mtrep__RepositoryInfo *n;
	mtrep__RepositoryInfo **p;
	do
	{	soap_revert(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_mtrep__RepositoryInfo, SOAP_TYPE_std__vectorTemplateOfPointerTomtrep__RepositoryInfo, sizeof(mtrep__RepositoryInfo), 1))
				break;
			if (!(p = soap_in_PointerTomtrep__RepositoryInfo(soap, tag, NULL, "mtrep:RepositoryInfo")))
				break;
		}
		else
		{	n = NULL;
			if (!soap_in_PointerTomtrep__RepositoryInfo(soap, tag, &n, "mtrep:RepositoryInfo"))
				break;
		}
		a->push_back(n);
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG)
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<mtrep__RepositoryInfo * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(struct soap *soap, std::vector<mtrep__RepositoryInfo * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<mtrep__RepositoryInfo * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTomtrep__RepositoryInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<mtrep__RepositoryInfo * >;
		if (size)
			*size = sizeof(std::vector<mtrep__RepositoryInfo * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<mtrep__RepositoryInfo * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<mtrep__RepositoryInfo * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<mtrep__RepositoryInfo * >*)cp->ptr;
}

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTomtrep__RepositoryInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<mtrep__RepositoryInfo * > %p -> %p\n", q, p));
	*(std::vector<mtrep__RepositoryInfo * >*)p = *(std::vector<mtrep__RepositoryInfo * >*)q;
}
#ifdef __cplusplus
}
#endif

/* End of repositoryC.cpp */
